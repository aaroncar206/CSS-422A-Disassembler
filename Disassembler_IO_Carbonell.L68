00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/30/2021 12:03:36 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Dissassembler IO Subroutine
00000000                             3  * Written by : Aaron Carbonell
00000000                             4  * Date       : 11/22/2020
00000000                             5  * Description: This program scans memory from starting address 
00000000                             6  *              to ending address inputted by user and displays 
00000000                             7  *              mock contents to screen.
00000000                             8  *-----------------------------------------------------------
00000000  =0000000D                  9  CR EQU $0D
00000000  =0000000A                 10  LF EQU $0A
00000000                            11  
00000000                            12  
00000000                            13  *----- PRECONDITIONS ------*
00000000                            14  * - Instruction addresses must be properly formatted hex values
00000000                            15  * - Opcode must be properly formatted hex values ready to be read in memory
00000000                            16  *    - D6: good/bad opcode flag (0 = good, 1 = bad)(NOTE** OPCODE SUBROUTINE SETS THIS FLAG UPON OPCODE PROCESSING) 
00000000                            17  * - Operands must be be properly formatted hex values ready to be read in memory
00000000                            18  *    - D7: good/bad operand1 flag (0 = good, 1 = bad) (NOTE** EA SUBROUTINE SETS THESE FLAGS UPON OPCODE PROCESSING) 
00000000                            19  *    - D5: good/bad operand2 flag(0 = good, 1 = bad), (set to 6 if operand2 is actually needed)
00000000                            20  
00000000                            21  *---- POSTCONDITIONS -----*
00000000                            22  * - Output memory words to console
00000000                            23  
00001000                            24      ORG    $1000
00001000                            25  START:                  ; first instruction of program
00001000                            26  
00001000                            27  
00001000                            28  * --Prompt user for starting address--
00001000                            29  PROMPT_FOR_START
00001000  43F9 00001232             30      LEA PROMPT_START,A1 
00001006  103C 000E                 31      MOVE.B #14,D0 
0000100A  4E4F                      32      TRAP #15 
0000100C  227C 00000000             33      MOVEA.L #0,A1
00001012                            34      
00001012  303C 0002                 35      MOVE.W #2,D0 
00001016  4E4F                      36      TRAP #15 Read a string from the keyboard into D1.L
00001018  6000 001E                 37      BRA CONV_STRING
0000101C                            38  
0000101C                            39  
0000101C                            40  * --Prompt user for ending address--
0000101C                            41  PROMPT_FOR_END
0000101C  43F9 00001261             42      LEA PROMPT_END,A1 
00001022  103C 000E                 43      MOVE.B #14,D0 
00001026  4E4F                      44      TRAP #15 
00001028  227C 00000000             45      MOVEA.L #0,A1
0000102E                            46      
0000102E  303C 0002                 47      MOVE.W #2,D0 
00001032  4E4F                      48      TRAP #15 Read a string from the keyboard into D1.L
00001034  6000 0002                 49      BRA CONV_STRING
00001038                            50       
00001038                            51      
00001038                            52  *-- Converts ASCII string to Hex equivalent --  
00001038                            53  CONV_STRING
00001038  1019                      54      MOVE.B (A1)+,D0 Get individual char in input string
0000103A  B03C 0046                 55      CMP.B #$46,D0 Check if char is more than F, the last valid hex value
0000103E  6E00 001E                 56      BGT DISPLAY_INVALID_HEX 
00001042  B03C 0041                 57      CMP.B #$41,D0 Check if char is a number or letter
00001046  6D00 0034                 58      BLT CONV_NUM
0000104A                            59      
0000104A                            60      **--Convert ASCII char to hex equivalent --
0000104A  0400 0037                 61      SUB.B #$37, D0 
0000104E  D680                      62      ADD.L D0,D3
00001050  5341                      63      SUBI #1,D1 
00001052  B23C 0000                 64      CMP.B #0,D1
00001056  6700 0044                 65      BEQ DONE_START_CONV
0000105A  E98B                      66      LSL.L #4,D3
0000105C  60DA                      67      BRA CONV_STRING
0000105E                            68  
0000105E                            69  
0000105E                            70  * --Display invalid hex error upon invalid input--
0000105E                            71  DISPLAY_INVALID_HEX
0000105E  43F9 000012A8             72      LEA INVALID_HEX,A1
00001064  103C 000E                 73      MOVE.B #14,D0 
00001068  4E4F                      74      TRAP #15 
0000106A                            75      
0000106A  43F9 0000136C             76      LEA LINE_BREAK,A1
00001070  103C 000E                 77      MOVE.B #14,D0 
00001074  4E4F                      78      TRAP #15 
00001076  4243                      79      CLR D3
00001078  4244                      80      CLR D4
0000107A                            81  
0000107A  6084                      82      BRA PROMPT_FOR_START
0000107C                            83  
0000107C                            84  
0000107C                            85  * --Converts ASCII num char into hex equivalent--   
0000107C                            86  CONV_NUM 
0000107C  B03C 0030                 87      CMP.B #$30,D0 
00001080  6DDC                      88      BLT DISPLAY_INVALID_HEX *check if char is less than 30, first valid hex num
00001082  B03C 0039                 89      CMP.B #$39,D0
00001086  6ED6                      90      BGT DISPLAY_INVALID_HEX *check if char is less than 30, last valid hex num
00001088  0400 0030                 91      SUB.B #$30,D0
0000108C  D680                      92      ADD.L D0,D3
0000108E  5341                      93      SUBI #1,D1
00001090  B23C 0000                 94      CMP.B #0,D1 
00001094  6700 0006                 95      BEQ DONE_START_CONV
00001098  E98B                      96      LSL.L #4,D3
0000109A  609C                      97      BRA CONV_STRING
0000109C                            98      
0000109C                            99  
0000109C                           100  * --Move converted starting address into A3--
0000109C                           101  DONE_START_CONV
0000109C  B87C 0001                102     CMP #1,D4
000010A0  6700 000C                103     BEQ DONE_END_CONV
000010A4  5244                     104     ADDI #1,D4
000010A6                           105     
000010A6  2643                     106     MOVEA.L D3,A3
000010A8  4243                     107     CLR D3
000010AA                           108     
000010AA  6000 FF70                109     BRA PROMPT_FOR_END
000010AE                           110    
000010AE                           111  * --Move converted ending address into A4 and prepare for opcodes--
000010AE                           112  DONE_END_CONV
000010AE  4244                     113      CLR.W D4
000010B0  2843                     114      MOVEA.L D3,A4
000010B2  4243                     115      CLR D3
000010B4  4244                     116      CLR D4
000010B6                           117      
000010B6  B9CB                     118      CMPA.L A3,A4 check if starting address is less than ending 
000010B8  6B00 0006                119      BMI DISPLAY_INVALID_ORDER
000010BC                           120      
000010BC  6000 0026                121      BRA PREPARE_DISPLAY_BUFFER
000010C0                           122      *-- op code person takes over from here--
000010C0                           123      *-- derive opcodes starting from start address --*
000010C0                           124      
000010C0                           125  DISPLAY_INVALID_ORDER
000010C0  43F9 00001328            126      LEA INVALID_ORDER, A1
000010C6  103C 000E                127      MOVE.B #14,D0 
000010CA  4E4F                     128      TRAP #15 
000010CC                           129      
000010CC  43F9 0000136C            130      LEA LINE_BREAK,A1
000010D2  103C 000E                131      MOVE.B #14,D0 
000010D6  4E4F                     132      TRAP #15 
000010D8  4243                     133      CLR D3
000010DA  5244                     134      ADDI #1,D4 force to jump straight to DONE_END_CONV when back in DONE_START_CONV
000010DC  387C 0000                135      MOVE.W #$0000,A4 clear A4 for reprocessing
000010E0                           136      
000010E0  6000 FF3A                137      BRA PROMPT_FOR_END
000010E4                           138  
000010E4                           139  * Prepare display buffer (these variables will be filled with real memory upon integration)
000010E4                           140  PREPARE_DISPLAY_BUFFER 
000010E4  33F9 0000137A 00001378   141      MOVE.W INSTRUCTION_ADDR_MESSAGE, INSTRUCTION_ADDR  *-- make placeholder for instruction address
000010EE  33F9 0000138E 0000138C   142      MOVE.W OPCODE_MESSAGE, OPCODE *-- make placeholder for opcode
000010F8                           143      
000010F8  33FC 1398 00001396       144      MOVE.W #OPERAND1_MESSAGE, OPERAND1 *-- make placeholder for first operand 
00001100  33FC 13A4 000013A2       145      MOVE.W #OPERAND2_MESSAGE, OPERAND2 *-- make placeholder for second operand 
00001108                           146          
00001108                           147  *-- Traverse through mock data in memory and print out until ending address
00001108                           148  *-- NOTE** displays random YY's which is okay for now. Intent is to demonstrate 
00001108                           149  *-- the essence of I/O behavior for assembler. 
00001108                           150  PRINT_INSTRUCTIONS  
00001108  4EB9 000011F8            151      JSR NEEDS_NEW_SCREEN
0000110E                           152      
0000110E  B9CB                     153      CMPA.L A3,A4 *-- check if at end address 
00001110  6F00 02AE                154      BLE DONE
00001114                           155   
00001114  33DB 00001378            156      MOVE.W (A3)+,INSTRUCTION_ADDR *get first word in mem
0000111A  43F9 00001378            157      LEA INSTRUCTION_ADDR, A1
00001120  103C 000E                158      MOVE.B #14,D0 
00001124  4E4F                     159      TRAP #15 
00001126                           160      
00001126  43F9 00001370            161      LEA SPACE, A1
0000112C  103C 000E                162      MOVE.B #14,D0 
00001130  4E4F                     163      TRAP #15 
00001132                           164      
00001132  BC3C 0001                165      CMP.B #1, D6 *-- check for valid opcode
00001136  6700 008C                166      BEQ DISPLAY_INVALID_INSTRUCTION
0000113A                           167      
0000113A  33DB 0000138C            168      MOVE.W (A3)+,OPCODE *get next word in mem
00001140  43F9 0000138C            169      LEA OPCODE, A1
00001146  103C 000E                170      MOVE.B #14,D0 
0000114A  4E4F                     171      TRAP #15 
0000114C                           172      
0000114C  43F9 00001370            173      LEA SPACE, A1
00001152  103C 000E                174      MOVE.B #14,D0 
00001156  4E4F                     175      TRAP #15 
00001158                           176      
00001158  BE3C 0001                177      CMP.B #1, D7 *-- check for valid operand1
0000115C  6700 0066                178      BEQ DISPLAY_INVALID_INSTRUCTION
00001160                           179      
00001160  33DB 00001396            180      MOVE.W (A3)+,OPERAND1 *get next word in mem
00001166  43F9 00001396            181      LEA OPERAND1, A1
0000116C  103C 000E                182      MOVE.B #14,D0 
00001170  4E4F                     183      TRAP #15 
00001172                           184      
00001172  1A3C 0006                185      MOVE.B #6, D5
00001176  BA3C 0006                186      CMP.B #6,D5 *-- check if another operand is needed
0000117A  6700 0012                187      BEQ PRINT_SECOND_OPERAND
0000117E                           188      
0000117E  43F9 0000136C            189      LEA LINE_BREAK,A1
00001184  103C 000E                190      MOVE.B #14,D0 
00001188  4E4F                     191      TRAP #15
0000118A                           192      
0000118A  6000 FF7C                193      BRA PRINT_INSTRUCTIONS
0000118E                           194      
0000118E                           195  *-- Print second operand if needed
0000118E                           196  PRINT_SECOND_OPERAND
0000118E  BA3C 0001                197      CMP.B #1, D5 *-- check for valid operand2
00001192  6700 0030                198      BEQ DISPLAY_INVALID_INSTRUCTION
00001196                           199      
00001196  43F9 00001374            200      LEA COMMA, A1
0000119C  103C 000E                201      MOVE.B #14,D0 
000011A0  4E4F                     202      TRAP #15
000011A2                           203      
000011A2  33DB 000013A2            204      MOVE.W (A3)+,OPERAND2 *get next word in mem
000011A8  43F9 000013A2            205      LEA OPERAND2, A1
000011AE  103C 000E                206      MOVE.B #14,D0 
000011B2  4E4F                     207      TRAP #15 
000011B4                           208  
000011B4  43F9 0000136C            209      LEA LINE_BREAK,A1
000011BA  103C 000E                210      MOVE.B #14,D0 
000011BE  4E4F                     211      TRAP #15
000011C0                           212      
000011C0  6000 FF46                213      BRA PRINT_INSTRUCTIONS
000011C4                           214      
000011C4                           215  *Display XXXXXXXX DATA YYYY if memory cannot be decoded to legitimate instruction   
000011C4                           216  DISPLAY_INVALID_INSTRUCTION 
000011C4  33D3 0000135C            217      MOVE.W (A3),INVALID_MEM_ADDR *get invalid word in mem
000011CA  43F9 0000135C            218      LEA INVALID_MEM_ADDR, A1
000011D0  103C 000E                219      MOVE.B #14,D0 
000011D4  4E4F                     220      TRAP #15 
000011D6                           221  
000011D6  43F9 0000135E            222      LEA DATA, A1
000011DC  103C 000E                223      MOVE.B #14,D0 
000011E0  4E4F                     224      TRAP #15 
000011E2                           225      
000011E2  33D3 0000136A            226      MOVE.W (A3),INVALID_HEX_VAL *get next word in mem
000011E8  43F9 0000136A            227      LEA INVALID_HEX_VAL, A1
000011EE  103C 000E                228      MOVE.B #14,D0 
000011F2  4E4F                     229      TRAP #15 
000011F4                           230      
000011F4  6000 FF12                231      BRA PRINT_INSTRUCTIONS
000011F8                           232           
000011F8                           233  *--Check if output reaches the end of screen 
000011F8                           234  NEEDS_NEW_SCREEN
000011F8  5244                     235      ADD      #1,D4                   
000011FA  B87C 001A                236      CMP      #26,D4 check if output reaches 25 lines                                                                                                
000011FE  6700 0010                237      BEQ      PROMPT_USER_FOR_ENTER
00001202  43F9 00001370            238      LEA      SPACE,A1           
00001208  303C 000E                239      MOVE     #14,D0                 
0000120C  4E4F                     240      TRAP     #15                        
0000120E  4E75                     241      RTS 
00001210                           242      
00001210                           243  *--Prompt user to press enter when display reaches line limit    
00001210                           244  PROMPT_USER_FOR_ENTER
00001210  43F9 00001370            245      LEA    SPACE,A1 
00001216  103C 000D                246      MOVE.B #13,D0   
0000121A  4E4F                     247      TRAP   #15
0000121C                           248  
0000121C  43F9 000012F8            249      LEA ENTER_MESSAGE, A1 *Prompt user to press enter to display new screen
00001222  103C 000E                250      MOVE.B #14, D0
00001226  4E4F                     251      TRAP #15
00001228                           252      
00001228  4244                     253      CLR      D4 
0000122A  103C 0005                254      MOVE.B   #5,D0          
0000122E  4E4F                     255      TRAP     #15            
00001230  4E75                     256      RTS 
00001232                           257      
00001232                           258  
00001232                           259  * Put variables and constants here
00001232= 50 6C 65 61 73 65 ...    260  PROMPT_START DC.B 'Please enter starting address in hexadecimal: ' ,0
00001261= 50 6C 65 61 73 65 ...    261  PROMPT_END DC.B 'Please enter ending address in hexadecimal (must be after starting): ' ,0
000012A8= 4572 726F 723A 2...      262  INVALID_HEX DC.W 'Error: Address must be in valid hexadecimal' ,CR,LF,0
000012DA= 44 6F 6E 65 20 70 ...    263  DONE_MESSAGE DC.B 'Done printing instructions' ,CR,LF,0
000012F8= 506C 6561 7365 2...      264  ENTER_MESSAGE DC.W 'Please press enter to display new screen ' ,CR,LF,0
00001328= 4572 726F 723A 2...      265  INVALID_ORDER DC.W 'Error: ending address must come after starting',CR,LF,0
0000135C                           266  INVALID_MEM_ADDR DS.W 1
0000135E= 2044 4154 4120 0...      267  DATA DC.W ' DATA ',CR,LF,0
0000136A                           268  INVALID_HEX_VAL DS.W 1 
0000136C= 20 0D 0A 00              269  LINE_BREAK DC.B ' ',CR,LF,0
00001370= 2000 0000                270  SPACE DC.W ' ',0
00001374= 2C00 0000                271  COMMA DC.W ',',0
00001378                           272  INSTRUCTION_ADDR DS.B 1
0000137A= 494E 5354 5255 4...      273  INSTRUCTION_ADDR_MESSAGE DC.W 'INSTRUCTION ADDR',0
0000138C                           274  OPCODE DS.W 1
0000138E= 4F50 434F 4445 0000      275  OPCODE_MESSAGE DC.W 'OPCODE',0
00001396                           276  OPERAND1 DS.W 1
00001398= 4F50 4552 414E 4...      277  OPERAND1_MESSAGE DC.W 'OPERAND1',0
000013A2                           278  OPERAND2 DS.W 1
000013A4= 4F50 4552 414E 4...      279  OPERAND2_MESSAGE DC.W 'OPERAND2',0
000013AE                           280  
000013AE                           281  GOOD_BAD_FLAG DS.B 1
000013AF                           282  
000013B0                           283  START_ADDR DS.W 4
000013B8                           284  END_ADDR DS.W 4
000013C0                           285  
000013C0                           286  DONE
000013C0  43F8 12DA                287      LEA DONE_MESSAGE, A1
000013C4  103C 000E                288      MOVE.B #14,D0 
000013C8  4E4F                     289      TRAP #15 
000013CA                           290      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
COMMA               1374
CONV_NUM            107C
CONV_STRING         1038
CR                  D
DATA                135E
DISPLAY_INVALID_HEX  105E
DISPLAY_INVALID_INSTRUCTION  11C4
DISPLAY_INVALID_ORDER  10C0
DONE                13C0
DONE_END_CONV       10AE
DONE_MESSAGE        12DA
DONE_START_CONV     109C
END_ADDR            13B8
ENTER_MESSAGE       12F8
GOOD_BAD_FLAG       13AE
INSTRUCTION_ADDR    1378
INSTRUCTION_ADDR_MESSAGE  137A
INVALID_HEX         12A8
INVALID_HEX_VAL     136A
INVALID_MEM_ADDR    135C
INVALID_ORDER       1328
LF                  A
LINE_BREAK          136C
NEEDS_NEW_SCREEN    11F8
OPCODE              138C
OPCODE_MESSAGE      138E
OPERAND1            1396
OPERAND1_MESSAGE    1398
OPERAND2            13A2
OPERAND2_MESSAGE    13A4
PREPARE_DISPLAY_BUFFER  10E4
PRINT_INSTRUCTIONS  1108
PRINT_SECOND_OPERAND  118E
PROMPT_END          1261
PROMPT_FOR_END      101C
PROMPT_FOR_START    1000
PROMPT_START        1232
PROMPT_USER_FOR_ENTER  1210
SPACE               1370
START               1000
START_ADDR          13B0

