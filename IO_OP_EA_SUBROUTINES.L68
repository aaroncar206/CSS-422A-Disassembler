00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/7/2021 22:03:57

00000000                             1  *-----------------------------------------------------------
00000000  =0000000D                  2  CR EQU $0D
00000000  =0000000A                  3  LF EQU $0A
00000000  =00000900                  4  PBUFF EQU $900
00000000                             5  
00000000                             6  
00000000                             7  *----- PRECONDITIONS ------*
00000000                             8  * - Instruction addresses must be properly formatted hex values
00000000                             9  * - Opcode must be properly formatted hex values ready to be read in memory, else outputted as DATA.
00000000                            10  * - Operands/EA fields must be be properly formatted within opcode and supported, else outputted as DATA.
00000000                            11  * - D7: Established as general good/bad flag to know if we should print a line (0 = good, 1 = bad)
00000000                            12  
00000000                            13  *---- POSTCONDITIONS -----*
00000000                            14  * - Output memory words to console in format (MEM LOCATION | OPCODE / DATA | OPERANDS / HEX VALUE OF WORD)
00000000                            15  * - Outputs 25 lines at a time, using ENTER key to continue until given range is read.
00000000                            16  * - Prompts the user to either decode another memory range, or terminate the program.
00000000                            17  
00001000                            18      ORG    $1000
00001000                            19  START:                  ; first instruction of program
00001000                            20  
00001000                            21  
00001000                            22  * --Prompt user for starting address--
00001000                            23  PROMPT_FOR_START
00001000  43F9 00001E82             24      LEA PROMPT_START,A1 
00001006  103C 000E                 25      MOVE.B #14,D0 
0000100A  4E4F                      26      TRAP #15 
0000100C  227C 00000000             27      MOVEA.L #0,A1
00001012                            28      
00001012  303C 0002                 29      MOVE.W #2,D0 
00001016  4E4F                      30      TRAP #15 Read a string from the keyboard into D1.L
00001018  6000 001E                 31      BRA CONV_STRING
0000101C                            32  
0000101C                            33  
0000101C                            34  * --Prompt user for ending address--
0000101C                            35  PROMPT_FOR_END
0000101C  43F9 00001EB1             36      LEA PROMPT_END,A1 
00001022  103C 000E                 37      MOVE.B #14,D0 
00001026  4E4F                      38      TRAP #15 
00001028  227C 00000000             39      MOVEA.L #0,A1
0000102E                            40      
0000102E  303C 0002                 41      MOVE.W #2,D0 
00001032  4E4F                      42      TRAP #15 Read a string from the keyboard into D1.L
00001034  6000 0002                 43      BRA CONV_STRING
00001038                            44       
00001038                            45      
00001038                            46  *-- Converts ASCII string to Hex equivalent --  
00001038                            47  CONV_STRING
00001038  1019                      48      MOVE.B (A1)+,D0 Get individual char in input string
0000103A  B03C 0046                 49      CMP.B #$46,D0 Check if char is more than F, the last valid hex value
0000103E  6E00 001E                 50      BGT DISPLAY_INVALID_HEX 
00001042  B03C 0041                 51      CMP.B #$41,D0 Check if char is a number or letter
00001046  6D00 0034                 52      BLT CONV_NUM
0000104A                            53      
0000104A                            54      **--Convert ASCII char to hex equivalent --
0000104A  0400 0037                 55      SUB.B #$37, D0 
0000104E  D680                      56      ADD.L D0,D3
00001050  5341                      57      SUBI #1,D1 
00001052  B23C 0000                 58      CMP.B #0,D1
00001056  6700 0044                 59      BEQ DONE_START_CONV
0000105A  E98B                      60      LSL.L #4,D3
0000105C  60DA                      61      BRA CONV_STRING
0000105E                            62  
0000105E                            63  
0000105E                            64  * --Display invalid hex error upon invalid input--
0000105E                            65  DISPLAY_INVALID_HEX
0000105E  43F9 00001EF8             66      LEA INVALID_HEX,A1
00001064  103C 000E                 67      MOVE.B #14,D0 
00001068  4E4F                      68      TRAP #15 
0000106A                            69      
0000106A  43F9 00001FEE             70      LEA LINE_BREAK,A1
00001070  103C 000E                 71      MOVE.B #14,D0 
00001074  4E4F                      72      TRAP #15 
00001076  4243                      73      CLR D3
00001078  4244                      74      CLR D4
0000107A                            75  
0000107A  6084                      76      BRA PROMPT_FOR_START
0000107C                            77  
0000107C                            78  
0000107C                            79  * --Converts ASCII num char into hex equivalent--   
0000107C                            80  CONV_NUM 
0000107C  B03C 0030                 81      CMP.B #$30,D0 
00001080  6DDC                      82      BLT DISPLAY_INVALID_HEX *check if char is less than 30, first valid hex num
00001082  B03C 0039                 83      CMP.B #$39,D0
00001086  6ED6                      84      BGT DISPLAY_INVALID_HEX *check if char is less than 30, last valid hex num
00001088  0400 0030                 85      SUB.B #$30,D0
0000108C  D680                      86      ADD.L D0,D3
0000108E  5341                      87      SUBI #1,D1
00001090  B23C 0000                 88      CMP.B #0,D1 
00001094  6700 0006                 89      BEQ DONE_START_CONV
00001098  E98B                      90      LSL.L #4,D3
0000109A  609C                      91      BRA CONV_STRING
0000109C                            92      
0000109C                            93  
0000109C                            94  * --Move converted starting address into A3--
0000109C                            95  DONE_START_CONV
0000109C  B87C 0001                 96     CMP #1,D4
000010A0  6700 000C                 97     BEQ DONE_END_CONV
000010A4  5244                      98     ADDI #1,D4
000010A6                            99     
000010A6  2643                     100     MOVEA.L D3,A3
000010A8  4243                     101     CLR D3
000010AA                           102     
000010AA  6000 FF70                103     BRA PROMPT_FOR_END
000010AE                           104    
000010AE                           105  * --Move converted ending address into A4 and prepare for opcodes--
000010AE                           106  DONE_END_CONV
000010AE  4244                     107      CLR.W D4
000010B0  2843                     108      MOVEA.L D3,A4
000010B2  4243                     109      CLR D3
000010B4  4244                     110      CLR D4
000010B6                           111      
000010B6  B9CB                     112      CMPA.L A3,A4 check if starting address is less than ending 
000010B8  6B00 0006                113      BMI DISPLAY_INVALID_ORDER
000010BC                           114      
000010BC  6000 0026                115      BRA PRINT_INSTRUCTIONS
000010C0                           116      *-- op code person takes over from here--
000010C0                           117      *-- derive opcodes starting from start address --*
000010C0                           118      
000010C0                           119  DISPLAY_INVALID_ORDER
000010C0  43F9 00001F76            120      LEA INVALID_ORDER, A1
000010C6  103C 000E                121      MOVE.B #14,D0 
000010CA  4E4F                     122      TRAP #15 
000010CC                           123      
000010CC  43F9 00001FEE            124      LEA LINE_BREAK,A1
000010D2  103C 000E                125      MOVE.B #14,D0 
000010D6  4E4F                     126      TRAP #15 
000010D8  4243                     127      CLR D3
000010DA  5244                     128      ADDI #1,D4 force to jump straight to DONE_END_CONV when back in DONE_START_CONV
000010DC  387C 0000                129      MOVE.W #$0000,A4 clear A4 for reprocessing
000010E0                           130      
000010E0  6000 FF3A                131      BRA PROMPT_FOR_END
000010E4                           132         
000010E4                           133  *-- Use print buffer pointer to print out instructions. Set good/bad flag (D7) upon 
000010E4                           134  *-- invalid instruction and report back to here. A3 is opcode pointer. 
000010E4                           135  PRINT_INSTRUCTIONS  
000010E4  4EB9 00001180            136      JSR NEEDS_NEW_SCREEN
000010EA                           137      
000010EA  B9CB                     138      CMPA.L A3,A4 *-- check if at end address 
000010EC  6F00 00CC                139      BLE REACHED_END
000010F0                           140   
000010F0  320B                     141      MOVE.W A3, D1 *-- print instruction address
000010F2  143C 0010                142      MOVE.B #16,D2
000010F6  103C 000F                143      MOVE.B #15,D0 
000010FA  4E4F                     144      TRAP #15 
000010FC                           145      
000010FC  43F9 00001FF2            146      LEA SPACE, A1
00001102  103C 000E                147      MOVE.B #14,D0 
00001106  4E4F                     148      TRAP #15 
00001108                           149          
00001108  1E3C 0000                150      MOVE.B #0,D7        * Invalid flag is set to zero
0000110C  2C7C 00000900            151      MOVEA.L #PBUFF,A6   * Printbuff is A6
00001112                           152  
00001112  361B                     153      MOVE.W (A3)+, D3
00001114                           154      
00001114                           155      ** SAVE DATA REGISTERS (Except D7)
00001114  48E7 FE00                156      MOVEM.L D0-D6,-(SP)
00001118                           157      
00001118  4EB9 0000121C            158      JSR START_OP
0000111E                           159      
0000111E  4CDF 007F                160      MOVEM.L (SP)+,D0-D6
00001122                           161      ** LOAD DATA REGISTERS (Except D7)
00001122                           162  
00001122  BE7C 0001                163      CMP #1,D7
00001126  6700 002C                164      BEQ DISPLAY_INVALID_INSTRUCTION
0000112A                           165  
0000112A  1CBC 0000                166      MOVE.B #0, (A6)     * Add terminator to print buffer
0000112E  227C 00000900            167      MOVEA.L #PBUFF,A1
00001134  103C 000E                168      MOVE.B #14, D0
00001138  4E4F                     169      TRAP #15            * Print print buffer
0000113A                           170      
0000113A                           171      * Need space after print buffer? **********************************************
0000113A  43F9 00001FF2            172      LEA SPACE, A1
00001140  103C 000E                173      MOVE.B #14,D0 
00001144  4E4F                     174      TRAP #15 
00001146                           175      
00001146  43F9 00001FEE            176      LEA LINE_BREAK,A1
0000114C  103C 000E                177      MOVE.B #14,D0 
00001150  4E4F                     178      TRAP #15
00001152                           179      
00001152  6090                     180      BRA PRINT_INSTRUCTIONS
00001154                           181      
00001154                           182  *Display XXXXXXXX DATA YYYY if memory cannot be decoded to legitimate instruction   
00001154                           183  DISPLAY_INVALID_INSTRUCTION 
00001154                           184  
00001154  43F9 00001FE0            185      LEA DATA, A1
0000115A  103C 000E                186      MOVE.B #14,D0 
0000115E  4E4F                     187      TRAP #15 
00001160                           188  
00001160  143C 0010                189      MOVE.B #16, D2
00001164                           190      
00001164  554B                     191      SUBA.W  #$0002,A3 * Offset to go back to bad data opcode word
00001166  3213                     192      MOVE.W (A3),D1 * FIX: Needs to print CURRENT opcode word, not next.
00001168  544B                     193      ADDA.W  #$0002,A3 * Go back to correct current position
0000116A                           194      
0000116A                           195      
0000116A  103C 000F                196      MOVE.B #15, D0
0000116E  4E4F                     197      TRAP #15            * Print print buffer
00001170                           198      
00001170  43F9 00001FEE            199      LEA LINE_BREAK,A1
00001176  103C 000E                200      MOVE.B #14,D0 
0000117A  4E4F                     201      TRAP #15
0000117C                           202  
0000117C  6000 FF66                203      BRA PRINT_INSTRUCTIONS
00001180                           204           
00001180                           205  *--Check if output reaches the end of screen 
00001180                           206  NEEDS_NEW_SCREEN
00001180  5244                     207      ADD      #1,D4                   
00001182  B87C 001A                208      CMP      #26,D4 check if output reaches 25 lines                                                                                                
00001186  6700 0010                209      BEQ      PROMPT_USER_FOR_ENTER
0000118A  43F9 00001FF2            210      LEA      SPACE,A1           
00001190  303C 000E                211      MOVE     #14,D0                 
00001194  4E4F                     212      TRAP     #15                        
00001196  4E75                     213      RTS 
00001198                           214      
00001198                           215  *--Prompt user to press enter when display reaches line limit    
00001198                           216  PROMPT_USER_FOR_ENTER
00001198  43F9 00001FF2            217      LEA    SPACE,A1 
0000119E  103C 000D                218      MOVE.B #13,D0   
000011A2  4E4F                     219      TRAP   #15
000011A4                           220  
000011A4  43F9 00001F46            221      LEA ENTER_MESSAGE, A1 *Prompt user to press enter to display new screen
000011AA  103C 000E                222      MOVE.B #14, D0
000011AE  4E4F                     223      TRAP #15
000011B0                           224      
000011B0  4244                     225      CLR      D4 
000011B2  103C 0005                226      MOVE.B   #5,D0          
000011B6  4E4F                     227      TRAP     #15            
000011B8  4E75                     228      RTS 
000011BA                           229  
000011BA                           230  *--Ask if user wants to disassemble more memory--*
000011BA                           231  REACHED_END
000011BA  43F9 00001FF2            232      LEA SPACE, A1
000011C0  103C 000E                233      MOVE.B #14,D0 
000011C4  4E4F                     234      TRAP #15 
000011C6                           235      
000011C6  43F9 00001FAA            236      LEA ASK_REPEAT,A1 
000011CC  103C 000E                237      MOVE.B #14,D0 
000011D0  4E4F                     238      TRAP #15 
000011D2                           239      
000011D2  103C 0004                240      MOVE.B #4,D0 
000011D6  4E4F                     241      TRAP #15 Read num from the keyboard into D1.L
000011D8                           242      
000011D8  0C01 0000                243      CMPI.B #0, D1 0 = yes
000011DC  6700 000A                244      BEQ CLEAR_REG
000011E0                           245      
000011E0  0C01 0001                246      CMPI.B #1,D1 1 = no
000011E4  6700 0F36                247      BEQ DONE
000011E8                           248      
000011E8                           249  *--Clear all registers for reprocessing--*
000011E8                           250  CLEAR_REG 
000011E8  4241                     251      CLR D1
000011EA  4242                     252      CLR D2
000011EC  4243                     253      CLR D3
000011EE  4244                     254      CLR D4
000011F0  4245                     255      CLR D5
000011F2  4246                     256      CLR D6
000011F4                           257      
000011F4  207C 00000000            258      MOVE.L #00000000,A0
000011FA  227C 00000000            259      MOVE.L #00000000,A1
00001200  267C 00000000            260      MOVE.L #00000000,A3
00001206  287C 00000000            261      MOVE.L #00000000,A4
0000120C  2A7C 00000000            262      MOVE.L #00000000,A5
00001212  2C7C 00000000            263      MOVE.L #00000000,A6
00001218                           264      
00001218  6000 FDE6                265      BRA PROMPT_FOR_START
0000121C                           266  
0000121C                           267  START_OP
0000121C                           268  
0000121C                           269  NOP
0000121C  383C 4E71                270      MOVE.W  #$4E71,D4
00001220  B644                     271      CMP.W   D4,D3
00001222  6600 0010                272      BNE     RTS
00001226                           273      *Print instruction to output
00001226  43F9 0000207E            274      LEA     PRNT_NOP,A1
0000122C  4EB9 00001E24            275      JSR PRINT_BUFF
00001232  4E75                     276      RTS *Return to I/O subroutine to find next instruction
00001234                           277  RTS
00001234  383C 4E75                278      MOVE.W  #$4E75,D4
00001238  B644                     279      CMP.W   D4,D3
0000123A  6600 0010                280      BNE     FIND_OP
0000123E                           281      *Print instruction
0000123E  43F9 00002082            282      LEA     PRNT_RTS,A1
00001244  4EB9 00001E24            283      JSR PRINT_BUFF
0000124A  4E75                     284      RTS
0000124C                           285  
0000124C                           286  FIND_OP *determine op code based on first 2 bits
0000124C  1C3C 000E                287      MOVE.B  #14,D6
00001250  3803                     288      MOVE.W  D3,D4
00001252  EC6C                     289      LSR.W   D6,D4
00001254                           290      
00001254  B83C 0000                291      CMP.B   #%00,D4 *MOVE,MOVEA
00001258  6700 001A                292      BEQ     OP_00
0000125C                           293      
0000125C  B83C 0001                294      CMP.B   #%01,D4 *MOVEQ, MOVEM, ADDQ, LEA, NOT, BGT/BLE/BEQ, JSR, BRA
00001260  6700 00C6                295      BEQ     OP_01
00001264                           296      
00001264  B83C 0002                297      CMP.B   #%10,D4 *OR,SUB
00001268  6700 03C6                298      BEQ     OP_10
0000126C                           299      
0000126C  B83C 0003                300      CMP.B   #%11,D4 *ADD,AND,LSL,LSR,ROL,ROR,ASL,ASR
00001270  6700 0514                301      BEQ     OP_11
00001274                           302      
00001274                           303  OP_00 *Determine if MOVE or MOVEA op code
00001274                           304  *Isolate bits 6,7,8
00001274  3803                     305      MOVE.W  D3,D4
00001276  EF4C                     306      LSL.W   #7,D4   *Remove first 7 bits
00001278  1C3C 000D                307      MOVE.B  #13,D6
0000127C  EC6C                     308      LSR.W   D6,D4   *Remove last 6 bits
0000127E  B87C 0001                309      CMP.W   #%001,D4
00001282  6700 0012                310      BEQ     IS_MOVEA
00001286                           311  IS_MOVE
00001286                           312      *Print MOVE
00001286  43F9 00002086            313      LEA     PRNT_MOVE,A1
0000128C  4EB9 00001E24            314      JSR PRINT_BUFF
00001292                           315  
00001292  6000 000E                316      BRA     MOVE_SIZE
00001296                           317  
00001296                           318  IS_MOVEA
00001296                           319      *Print MOVEA
00001296  43F9 0000208B            320      LEA     PRNT_MOVEA,A1
0000129C  4EB9 00001E24            321      JSR PRINT_BUFF
000012A2                           322  MOVE_SIZE
000012A2  3803                     323      MOVE.W  D3,D4
000012A4  1C3C 000E                324      MOVE.B  #14,D6
000012A8  E54C                     325      LSL.W   #2,D4   *Remove first 2 bits
000012AA  EC6C                     326      LSR.W   D6,D4   *Remove last 12 bits to find size code
000012AC                           327      
000012AC  B83C 0001                328      CMP.B   #%01,D4
000012B0  6700 0016                329      BEQ     MOVE_B
000012B4                           330      
000012B4  B83C 0003                331      CMP.B   #%11,D4
000012B8  6700 002E                332      BEQ     MOVE_W
000012BC                           333      
000012BC  B83C 0002                334      CMP.B   #%10,D4
000012C0  6700 0046                335      BEQ     MOVE_L
000012C4  6000 0904                336      BRA     INVALID_OP   
000012C8                           337  MOVE_B    
000012C8                           338      *Print .B (byte)
000012C8  4EB9 00001B94            339      JSR PRINT_B
000012CE                           340      *Proceed to EA Subroutine
000012CE  4EB9 00001C80            341      JSR EA_SRC
000012D4  43F9 00001FF6            342      LEA COMMA,A1
000012DA  4EB9 00001E24            343      JSR PRINT_BUFF
000012E0                           344  
000012E0  4EB9 00001C98            345      JSR EA_DEST
000012E6                           346      
000012E6  4E75                     347      RTS * Done printing move
000012E8                           348  MOVE_W    
000012E8                           349      *Print .W (word)
000012E8  4EB9 00001BA6            350      JSR PRINT_W
000012EE                           351      *Proceed to EA Subroutine
000012EE  4EB9 00001C80            352      JSR EA_SRC 
000012F4  43F9 00001FF6            353      LEA COMMA,A1
000012FA  4EB9 00001E24            354      JSR PRINT_BUFF
00001300  4EB9 00001C98            355      JSR EA_DEST
00001306                           356  
00001306  4E75                     357      RTS
00001308                           358  MOVE_L
00001308                           359      *Print .L (long)
00001308  4EB9 00001BB8            360      JSR PRINT_L
0000130E                           361      *Proceed to EA Subroutine
0000130E  4EB9 00001C80            362      JSR EA_SRC
00001314  43F9 00001FF6            363      LEA COMMA,A1
0000131A  4EB9 00001E24            364      JSR PRINT_BUFF
00001320  4EB9 00001C98            365      JSR EA_DEST
00001326                           366  
00001326  4E75                     367      RTS
00001328                           368  
00001328                           369  OP_01 *MOVEQ, MOVEM, ADDQ, LEA, NOT, BGT/BLE/BEQ, JSR, BRA
00001328  3803                     370      MOVE.W  D3,D4
0000132A  1C3C 000C                371      MOVE.B  #12,D6
0000132E  EC6C                     372      LSR.W   D6,D4   *get first 4 bits
00001330                           373      
00001330  B83C 0007                374      CMP.B   #%0111,D4   *MOVEQ
00001334  6700 001A                375      BEQ     OP_0111
00001338  B83C 0004                376      CMP.B   #%0100,D4   *MOVEM, LEA, NOT, JSR
0000133C  6700 0066                377      BEQ     OP_0100
00001340  B83C 0005                378      CMP.B   #%0101,D4   *ADDQ
00001344  6700 018E                379      BEQ     OP_0101
00001348  B83C 0006                380      CMP.B   #%0110,D4   *Bcc, BRA
0000134C  6700 020A                381      BEQ     OP_0110
00001350                           382      
00001350                           383  OP_0111 *MOVEQ
00001350                           384      *Check bit 8 to validate
00001350  2803                     385      MOVE.L  D3,D4
00001352  EF4C                     386      LSL.W   #7,D4
00001354  1C3C 000F                387      MOVE.B  #15,D6
00001358  EC6C                     388      LSR.W   D6,D4
0000135A  B83C 0000                389      CMP.B   #%0,D4
0000135E  6600 086A                390      BNE     INVALID_OP
00001362                           391  
00001362                           392      *Print MOVEQ
00001362  43F9 00002097            393      LEA     PRNT_MOVEQ,A1
00001368  4EB9 00001E24            394      JSR PRINT_BUFF
0000136E                           395      
0000136E  2803                     396      MOVE.L  D3,D4
00001370  E14C                     397      LSL.W   #8,D4
00001372  E04C                     398      LSR.W   #8,D4
00001374                           399      *Print data
00001374                           400      
00001374                           401      ** Print # in front
00001374                           402      
00001374  43F9 000020FA            403      LEA     PRNT_Q,A1
0000137A  4EB9 00001E24            404      JSR PRINT_BUFF
00001380                           405      
00001380  2204                     406      MOVE.L  D4,D1
00001382  4EB9 00001E30            407      JSR     PRINT_HEXBUFF
00001388                           408      
00001388                           409      *** Move reg. bits into a bitfield for EA
00001388  3803                     410      MOVE.W  D3,D4
0000138A  C87C 0E00                411      AND.W   #%0000111000000000,D4
0000138E  E64C                     412      LSR.W   #3,D4
00001390  EC4C                     413      LSR.W   #6,D4
00001392  1C04                     414      MOVE.B  D4,D6
00001394                           415      
00001394  48E7 FF00                416      MOVEM.L D0-D7,-(SP)
00001398                           417      
00001398  4EB9 00001CC4            418      JSR     EA_SUB
0000139E                           419      
0000139E  4CDF 00FF                420      MOVEM.L (SP)+,D0-D7
000013A2                           421     
000013A2  4E75                     422      RTS
000013A4                           423      
000013A4                           424     
000013A4                           425  OP_0100 *MOVEM, LEA, NOT, JSR
000013A4  2803                     426      MOVE.L  D3,D4
000013A6  1C3C 000B                427      MOVE.B  #11,D6
000013AA  EC6C                     428      LSR.W   D6,D4
000013AC  B83C 0009                429      CMP.B   #%01001,D4  *MOVEM or JSR
000013B0  6700 00B6                430      BEQ     OP_01001
000013B4                           431      
000013B4                           432      *Check if LEA
000013B4  2803                     433      MOVE.L  D3,D4
000013B6  EF4C                     434      LSL.W   #7,D4
000013B8  1C3C 000D                435      MOVE.B  #13,D6
000013BC  EC6C                     436      LSR.W   D6,D4
000013BE  B83C 0007                437      CMP.B   #%111,D4    *Check bits 8,7,6
000013C2  6600 0044                438      BNE     IS_NOT
000013C6                           439      
000013C6                           440      * Is LEA
000013C6  43F9 000020B8            441      LEA     PRNT_LEA,A1
000013CC  4EB9 00001E24            442      JSR     PRINT_BUFF
000013D2                           443      * HANDLE OPERANDS
000013D2  1A3C 0003                444      MOVE.B  #3,D5 * Size operation is always longword for LEA, so set here.
000013D6                           445      
000013D6  4EB9 00001C80            446      JSR EA_SRC * Handle the source EA
000013DC                           447      
000013DC  2803                     448      MOVE.L  D3,D4 **** CHANGED TO LONGWORD TO POTENTIALLY DEAL WITH BAD DATA AT FRONT WORD. *******************
000013DE  C87C 0E00                449      AND.W   #%0000111000000000,D4 * Isolate Register #
000013E2  E64C                     450      LSR.W   #3,D4
000013E4  EC4C                     451      LSR.W   #6,D4
000013E6  1C04                     452      MOVE.B  D4,D6   * Prime D6 register
000013E8  8C3C 0008                453      OR.B    #%00001000,D6 * Add the An mode to D6
000013EC                           454      
000013EC  48E7 FF00                455      MOVEM.L D0-D7,-(SP) * Move register contents to stack (NOT SAVING D7 ANYMORE*******************)
000013F0                           456      
000013F0  43F9 00001FF6            457      LEA COMMA,A1
000013F6  4EB9 00001E24            458      JSR PRINT_BUFF
000013FC                           459  
000013FC  4EB9 00001CC4            460      JSR     EA_SUB * Handle the destination EA (last 6 bits of D6)
00001402                           461      
00001402                           462      * MOVEM RETURN (NOT SAVING D7 ANYMORE*******************)
00001402  4CDF 00FF                463      MOVEM.L (SP)+,D0-D7
00001406                           464          
00001406  4E75                     465      RTS * Return to IO
00001408                           466  
00001408                           467  
00001408                           468  
00001408                           469  IS_NOT    
00001408  2803                     470      MOVE.L  D3,D4
0000140A  E04C                     471      LSR.W   #8,D4
0000140C  B87C 0046                472      CMP.W   #%01000110,D4
00001410  6600 07B8                473      BNE     INVALID_OP
00001414                           474      
00001414  43F9 000020B1            475      LEA     PRNT_NOT,A1
0000141A  4EB9 00001E24            476      JSR PRINT_BUFF
00001420                           477      
00001420  2803                     478      MOVE.L  D3,D4
00001422  E14C                     479      LSL.W   #8,D4
00001424  1C3C 000E                480      MOVE.B  #14,D6
00001428  EC6C                     481      LSR.W   D6,D4 
0000142A  B83C 0000                482      CMP.B   #%00,D4
0000142E  6700 0016                483      BEQ     NOT_B
00001432  B83C 0001                484      CMP.B   #%01,D4
00001436  6700 0018                485      BEQ     NOT_W
0000143A  B83C 0002                486      CMP.B   #%10,D4
0000143E  6700 001A                487      BEQ     NOT_L
00001442                           488  
00001442  6000 0786                489      BRA     INVALID_OP    
00001446                           490  NOT_B
00001446  4EB9 00001B94            491      JSR PRINT_B
0000144C                           492      *Proceed to EA Subroutine  
0000144C  6000 0012                493      BRA NOT_EA  
00001450                           494  NOT_W
00001450  4EB9 00001BA6            495      JSR PRINT_W
00001456                           496      *Proceed to EA Subroutine
00001456  6000 0008                497      BRA NOT_EA    
0000145A                           498  NOT_L
0000145A  4EB9 00001BB8            499      JSR PRINT_L 
00001460                           500      *Proceed to EA Subroutine
00001460                           501      
00001460                           502  NOT_EA * DEALING W/ NOT EA HERE (May need to save registers...) *************
00001460                           503      
00001460  4EB9 00001C80            504      JSR EA_SRC
00001466  4E75                     505      RTS *** Return to IO ***
00001468                           506      
00001468                           507      
00001468                           508  OP_01001    
00001468  2803                     509      MOVE.L  D3,D4
0000146A  EC4C                     510      LSR.W   #6,D4
0000146C  B87C 013A                511      CMP.W   #%0100111010,D4 *Check if JSR
00001470  6600 0016                512      BNE     IS_MOVEM
00001474  43F9 0000209D            513      LEA     PRNT_JSR,A1
0000147A  4EB9 00001E24            514      JSR     PRINT_BUFF
00001480  4EB9 00001C80            515      JSR     EA_SRC
00001486  4E75                     516      RTS     *Proceed to EA Subroutine    
00001488                           517  IS_MOVEM
00001488                           518      *Check bits 9,8,7 to validate   
00001488  2803                     519      MOVE.L  D3,D4
0000148A  ED4C                     520      LSL.W   #6,D4
0000148C  1C3C 000D                521      MOVE.B  #13,D6
00001490  EC6C                     522      LSR.W   D6,D4
00001492  B83C 0001                523      CMP.B   #%001,D4
00001496  6600 0732                524      BNE     INVALID_OP
0000149A                           525      
0000149A  43F9 00002091            526      LEA     PRNT_MOVEM,A1
000014A0  4EB9 00001E24            527      JSR PRINT_BUFF
000014A6                           528      
000014A6  2803                     529      MOVE.L  D3,D4
000014A8  1C3C 0009                530      MOVE.B  #9,D6
000014AC  ED6C                     531      LSL.W   D6,D4
000014AE  1C3C 000F                532      MOVE.B  #15,D6
000014B2  EC6C                     533      LSR.W   D6,D4
000014B4                           534      
000014B4  B83C 0000                535      CMP.B   #0,D4
000014B8  6700 000E                536      BEQ     MOVEM_W
000014BC  B83C 0001                537      CMP.B   #1,D4
000014C0  6700 000C                538      BEQ     MOVEM_L    
000014C4  6000 0704                539      BRA     INVALID_OP   
000014C8                           540  MOVEM_W
000014C8  4EB9 00001BA6            541      JSR PRINT_W
000014CE                           542      *Proceed to EA Subroutine    
000014CE                           543  MOVEM_L
000014CE  4EB9 00001BB8            544      JSR PRINT_L
000014D4                           545      *Proceed to EA Subroutine    
000014D4                           546  OP_0101 *ADDQ
000014D4                           547      *Check bit 8 to validate
000014D4  2803                     548      MOVE.L  D3,D4
000014D6  EF4C                     549      LSL.W   #7,D4
000014D8  1C3C 000F                550      MOVE.B  #15,D6
000014DC  EC6C                     551      LSR.W   D6,D4
000014DE  B83C 0000                552      CMP.B   #%0,D4
000014E2  6600 06E6                553      BNE     INVALID_OP
000014E6                           554  
000014E6                           555      *Print ADDQ
000014E6  43F9 000020BC            556      LEA     PRNT_ADDQ,A1
000014EC  4EB9 00001E24            557      JSR     PRINT_BUFF
000014F2                           558      
000014F2  2803                     559      MOVE.L  D3,D4
000014F4  E14C                     560      LSL.W   #8,D4   *Remove first 8 bits
000014F6  1C3C 000E                561      MOVE.B  #14,D6
000014FA  EC6C                     562      LSR.W   D6,D4   *and last 6 bits to get size
000014FC                           563      
000014FC  B83C 0000                564      CMP.B   #%00,D4
00001500  6700 0012                565      BEQ     ADDQ_B
00001504  B83C 0001                566      CMP.B   #%01,D4
00001508  6700 0014                567      BEQ     ADDQ_W
0000150C  B83C 0002                568      CMP.B   #%10,D4
00001510  6700 0016                569      BEQ     ADDQ_L
00001514                           570      
00001514                           571  ADDQ_B    
00001514                           572      *Print .B
00001514  4EB9 00001B94            573      JSR PRINT_B
0000151A  6000 0016                574      BRA     ADDQ_DATA
0000151E                           575      
0000151E                           576  ADDQ_W     
0000151E                           577      *Print .W
0000151E  4EB9 00001BA6            578      JSR PRINT_W
00001524  6000 000C                579      BRA     ADDQ_DATA
00001528                           580      
00001528                           581  ADDQ_L     
00001528                           582      *Print .L
00001528  4EB9 00001BB8            583      JSR PRINT_L
0000152E  6000 0002                584      BRA     ADDQ_DATA
00001532                           585  ADDQ_DATA    
00001532  2803                     586      MOVE.L  D3,D4
00001534  E94C                     587      LSL.W   #4,D4   *Remove first 4 bits
00001536  1C3C 000D                588      MOVE.B  #13,D6
0000153A  EC6C                     589      LSR.W   D6,D4
0000153C                           590      
0000153C                           591      *Print data
0000153C  43F9 000020FA            592      LEA     PRNT_Q,A1
00001542  4EB9 00001E24            593      JSR     PRINT_BUFF
00001548                           594      
00001548  3204                     595      MOVE.W  D4,D1
0000154A  4EB9 00001E30            596      JSR     PRINT_HEXBUFF
00001550                           597      
00001550                           598      * Handle EA
00001550  4EB9 00001C80            599      JSR     EA_SRC
00001556                           600      
00001556  4E75                     601      RTS * Return to IO
00001558                           602      
00001558                           603      *Proceed to EA Subroutine
00001558                           604  OP_0110    
00001558  2803                     605      MOVE.L  D3,D4
0000155A  1C3C 000C                606      MOVE.B  #12,D6
0000155E  E94C                     607      LSL.W   #4,D4
00001560  EC6C                     608      LSR.W   D6,D4
00001562                           609      
00001562  B87C 0000                610      CMP.W   #%0000,D4
00001566  6700 001E                611      BEQ     IS_BRA
0000156A                           612      
0000156A  B87C 000E                613      CMP.W   #%1110,D4
0000156E  6700 002A                614      BEQ     IS_BGT
00001572                           615      
00001572  B87C 000F                616      CMP.W   #%1111,D4
00001576  6700 0036                617      BEQ     IS_BLE
0000157A                           618      
0000157A  B87C 0007                619      CMP.W   #%0111,D4
0000157E  6700 0042                620      BEQ     IS_BEQ
00001582                           621      
00001582  6000 0646                622      BRA     INVALID_OP
00001586                           623  IS_BRA
00001586  43F9 000020AD            624      LEA     PRNT_BRA,A1
0000158C  4EB9 00001E24            625      JSR     PRINT_BUFF
00001592  4EB9 000015D6            626      JSR DISP
00001598  4E75                     627      RTS
0000159A                           628      
0000159A                           629  IS_BGT
0000159A  43F9 000020A1            630      LEA     PRNT_BGT,A1
000015A0  4EB9 00001E24            631      JSR     PRINT_BUFF
000015A6  4EB9 000015D6            632      JSR DISP
000015AC  4E75                     633      RTS
000015AE                           634  IS_BLE
000015AE  43F9 000020A5            635      LEA     PRNT_BLE,A1
000015B4  4EB9 00001E24            636      JSR     PRINT_BUFF
000015BA  4EB9 000015D6            637      JSR DISP
000015C0  4E75                     638      RTS
000015C2                           639  IS_BEQ  
000015C2  43F9 000020A9            640      LEA     PRNT_BEQ,A1
000015C8  4EB9 00001E24            641      JSR     PRINT_BUFF
000015CE  4EB9 000015D6            642      JSR DISP
000015D4  4E75                     643      RTS  
000015D6                           644  *------------SIZE AFFECT DISP VALUE?---------------
000015D6                           645  DISP *8 bit displacement field
000015D6  2803                     646      MOVE.L  D3,D4
000015D8  E14C                     647      LSL.W   #8,D4
000015DA  E04C                     648      LSR.W   #8,D4   *Holds displacement value
000015DC  C87C 00FF                649      AND.W   #$00FF,D4
000015E0                           650      
000015E0  B87C 0000                651      CMP.W   #$00,D4
000015E4  6700 001E                652      BEQ     DISP_16
000015E8  B87C 00FF                653      CMP.W   #$FF,D4
000015EC  6700 002C                654      BEQ     DISP_32
000015F0                           655  
000015F0  2A4B                     656      MOVEA.L A3,A5
000015F2  2C0D                     657      MOVE.L  A5,D6 *Holds next instruction address
000015F4  4604                     658      NOT.B   D4  *flip bits
000015F6  5284                     659      ADD.L   #%01,D4
000015F8                           660      
000015F8  9C44                     661      SUB.W   D4,D6 
000015FA  2206                     662      MOVE.L  D6,D1
000015FC                           663      *=MOVE.B  #16,D2
000015FC                           664      *=MOVE.B  #15,D0
000015FC                           665      *TRAP    #15
000015FC  4EB9 00001E30            666      JSR     PRINT_HEXBUFF
00001602  4E75                     667      RTS    
00001604                           668  DISP_16
00001604  381B                     669      MOVE.W  (A3)+,D4
00001606  2A4B                     670      MOVEA.L A3,A5
00001608  2C0D                     671      MOVE.L A5,D6 *Holds next instruction address
0000160A  4604                     672      NOT.B   D4
0000160C  5284                     673      ADD.L   #%01,D4
0000160E                           674      
0000160E  9C44                     675      SUB.W   D4,D6
00001610  2206                     676      MOVE.L  D6,D1
00001612                           677      *=MOVE.B  #16,D2
00001612                           678      *=MOVE.B  #15,D0
00001612                           679      *TRAP    #15
00001612  4EB9 00001E30            680      JSR     PRINT_HEXBUFF
00001618  4E75                     681      RTS
0000161A                           682  DISP_32    
0000161A  281B                     683      MOVE.L  (A3)+,D4
0000161C  2A4B                     684      MOVEA.L A3,A5
0000161E  2C0D                     685      MOVE.L  A5,D6 *Holds next instruction address
00001620  4604                     686      NOT.B   D4
00001622  5284                     687      ADD.L   #%01,D4
00001624                           688      
00001624  9C44                     689      SUB.W   D4,D6
00001626  2206                     690      MOVE.L  D6,D1
00001628  4EB9 00001E30            691      JSR     PRINT_HEXBUFF
0000162E                           692      * MOVE.B  #16,D2
0000162E                           693      * MOVE.B  #15,D0
0000162E                           694      * TRAP    #15
0000162E  4E75                     695      RTS
00001630                           696  OP_10   *OR,SUB
00001630  2803                     697      MOVE.L  D3,D4
00001632  E54C                     698      LSL.W   #2,D4
00001634  1C3C 000E                699      MOVE.B  #14,D6
00001638  EC6C                     700      LSR.W   D6,D4
0000163A  B83C 0000                701      CMP.B   #%00,D4 *Check bits 13 and 12
0000163E  6700 000E                702      BEQ     IS_OR
00001642                           703      
00001642  B83C 0001                704      CMP.B   #%01,D4
00001646  6700 00A4                705      BEQ     IS_SUB
0000164A                           706      
0000164A  6000 057E                707      BRA     INVALID_OP
0000164E                           708  IS_OR
0000164E  43F9 000020B5            709      LEA     PRNT_OR,A1
00001654  4EB9 00001E24            710      JSR     PRINT_BUFF
0000165A                           711      
0000165A  2803                     712      MOVE.L  D3,D4
0000165C  EF4C                     713      LSL.W   #7,D4
0000165E  1C3C 000D                714      MOVE.B  #13,D6
00001662  EC6C                     715      LSR.W   D6,D4
00001664                           716      
00001664                           717      * Destination is Dn
00001664  B83C 0000                718      CMP.B   #%000,D4
00001668  6700 002E                719      BEQ     OR_B_D
0000166C  B83C 0001                720      CMP.B   #%001,D4
00001670  6700 0034                721      BEQ     OR_W_D
00001674  B83C 0002                722      CMP.B   #%010,D4
00001678  6700 003A                723      BEQ     OR_L_D
0000167C                           724      
0000167C  B83C 0004                725      CMP.B   #%100,D4
00001680  6700 0040                726      BEQ     OR_B
00001684  B83C 0005                727      CMP.B   #%101,D4
00001688  6700 0046                728      BEQ     OR_W
0000168C  B83C 0006                729      CMP.B   #%110,D4
00001690  6700 004C                730      BEQ     OR_L
00001694                           731      
00001694  6000 0534                732      BRA     INVALID_OP
00001698                           733  
00001698                           734  
00001698                           735  
00001698                           736  
00001698                           737  * For these, handle EA first, then Data reg.
00001698                           738  OR_B_D
00001698  4EB9 00001B94            739      JSR PRINT_B
0000169E                           740      *Proceed to EA Subroutine
0000169E  4EB9 00001C22            741      JSR     ADDFORMAT_DATA_DEST_EA
000016A4                           742      
000016A4  4E75                     743      RTS * Return to IO
000016A6                           744      
000016A6                           745  OR_W_D
000016A6  4EB9 00001BA6            746      JSR PRINT_W
000016AC                           747      *Proceed to EA Subroutine
000016AC  4EB9 00001C22            748      JSR     ADDFORMAT_DATA_DEST_EA
000016B2                           749      
000016B2  4E75                     750      RTS * Return to IO    
000016B4                           751  OR_L_D
000016B4  4EB9 00001BB8            752      JSR PRINT_L
000016BA                           753      *Proceed to EA Subroutine
000016BA  4EB9 00001C22            754      JSR     ADDFORMAT_DATA_DEST_EA
000016C0                           755      
000016C0  4E75                     756      RTS * Return to IO
000016C2                           757  
000016C2                           758  
000016C2                           759  * For these, handle Data reg first, then EA    
000016C2                           760  OR_B
000016C2  4EB9 00001B94            761      JSR PRINT_B
000016C8                           762      *Proceed to EA Subroutine
000016C8  4EB9 00001C50            763      JSR     ADDFORMAT_EA_DEST_EA
000016CE  4E75                     764      RTS * Return to IO 
000016D0                           765      
000016D0                           766  OR_W
000016D0  4EB9 00001BA6            767      JSR PRINT_W
000016D6                           768      *Proceed to EA Subroutine
000016D6  4EB9 00001C50            769      JSR     ADDFORMAT_EA_DEST_EA
000016DC  4E75                     770      RTS * Return to IO 
000016DE                           771      
000016DE                           772  OR_L
000016DE  4EB9 00001BB8            773      JSR PRINT_L
000016E4                           774      *Proceed to EA Subroutine
000016E4  4EB9 00001C50            775      JSR     ADDFORMAT_EA_DEST_EA
000016EA  4E75                     776      RTS * Return to IO 
000016EC                           777      
000016EC                           778  IS_SUB
000016EC  43F9 000020CE            779      LEA     PRNT_SUB,A1
000016F2  4EB9 00001E24            780      JSR     PRINT_BUFF
000016F8                           781  
000016F8  2803                     782      MOVE.L  D3,D4
000016FA  EF4C                     783      LSL.W   #7,D4
000016FC  1C3C 000D                784      MOVE.B  #13,D6
00001700  EC6C                     785      LSR.W   D6,D4
00001702                           786      
00001702                           787      * Data register as destination;
00001702  B83C 0000                788      CMP.B   #%000,D4
00001706  6700 002A                789      BEQ     SUB_B_D
0000170A  B83C 0001                790      CMP.B   #%001,D4
0000170E  6700 0030                791      BEQ     SUB_W_D
00001712  B83C 0002                792      CMP.B   #%010,D4
00001716  6700 0036                793      BEQ     SUB_L_D
0000171A                           794  
0000171A                           795      * EA as destination;
0000171A  B83C 0004                796      CMP.B   #%100,D4
0000171E  6700 003C                797      BEQ     SUB_B
00001722  B83C 0005                798      CMP.B   #%101,D4
00001726  6700 0042                799      BEQ     SUB_W
0000172A  B83C 0006                800      CMP.B   #%110,D4
0000172E  6700 0048                801      BEQ     SUB_L
00001732                           802  
00001732                           803  
00001732                           804  * Handle EA, then Data Reg.
00001732                           805  SUB_B_D
00001732  4EB9 00001B94            806      JSR PRINT_B
00001738                           807      *Proceed to EA Subroutine
00001738  4EB9 00001C22            808      JSR     ADDFORMAT_DATA_DEST_EA
0000173E                           809      
0000173E  4E75                     810      RTS * Return to IO    
00001740                           811  SUB_W_D
00001740  4EB9 00001BA6            812      JSR PRINT_W
00001746                           813      *Proceed to EA Subroutine
00001746  4EB9 00001C22            814      JSR     ADDFORMAT_DATA_DEST_EA
0000174C                           815      
0000174C  4E75                     816      RTS * Return to IO    
0000174E                           817  SUB_L_D
0000174E  4EB9 00001BB8            818      JSR PRINT_L
00001754                           819      *Proceed to EA Subroutine 
00001754  4EB9 00001C22            820      JSR     ADDFORMAT_DATA_DEST_EA
0000175A                           821      
0000175A  4E75                     822      RTS * Return to IO
0000175C                           823  
0000175C                           824  
0000175C                           825  * Handle Data reg, then EA    
0000175C                           826  SUB_B
0000175C  4EB9 00001B94            827      JSR PRINT_B
00001762                           828      *Proceed to EA Subroutine
00001762  4EB9 00001C50            829      JSR     ADDFORMAT_EA_DEST_EA
00001768  4E75                     830      RTS * Return to IO     
0000176A                           831  SUB_W
0000176A  4EB9 00001BA6            832      JSR PRINT_W
00001770                           833      *Proceed to EA Subroutine    
00001770  4EB9 00001C50            834      JSR     ADDFORMAT_EA_DEST_EA
00001776  4E75                     835      RTS * Return to IO 
00001778                           836  SUB_L
00001778  4EB9 00001BB8            837      JSR PRINT_L
0000177E                           838      *Proceed to EA Subroutine 
0000177E  4EB9 00001C50            839      JSR     ADDFORMAT_EA_DEST_EA
00001784  4E75                     840      RTS * Return to IO     
00001786                           841  
00001786                           842     
00001786                           843  OP_11
00001786  2803                     844      MOVE.L  D3,D4
00001788  1C3C 000C                845      MOVE.B  #12,D6
0000178C  EC6C                     846      LSR.W   D6,D4
0000178E                           847      
0000178E  B83C 000C                848      CMP.B   #%1100,D4   *AND
00001792  6700 0016                849      BEQ     OP_1100
00001796                           850      
00001796  B83C 000D                851      CMP.B   #%1101,D4   *ADD,ADDA
0000179A  6700 00AC                852      BEQ     OP_1101
0000179E                           853      
0000179E  B83C 000E                854      CMP.B   #%1110,D4   *LSL/LSR,ASL/ASR,ROL/ROR
000017A2  6700 019E                855      BEQ     OP_1110
000017A6                           856      
000017A6  6000 0422                857      BRA     INVALID_OP
000017AA                           858  OP_1100 *AND
000017AA  43F9 000020CA            859      LEA     PRNT_AND,A1
000017B0  4EB9 00001E24            860      JSR     PRINT_BUFF
000017B6                           861  
000017B6  2803                     862      MOVE.L  D3,D4
000017B8  EF4C                     863      LSL.W   #7,D4
000017BA  1C3C 000D                864      MOVE.B  #13,D6
000017BE  EC6C                     865      LSR.W   D6,D4 *Get Opmode
000017C0                           866      *< ea > Dn -> Dn (Data reg destination)
000017C0  B83C 0000                867      CMP.B   #%000,D4
000017C4  6700 002E                868      BEQ     AND_B_D
000017C8  B83C 0001                869      CMP.B   #%001,D4
000017CC  6700 0034                870      BEQ     AND_W_D
000017D0  B83C 0002                871      CMP.B   #%010,D4
000017D4  6700 003A                872      BEQ     AND_L_D
000017D8                           873      *Dn < ea > -> < ea > (EA destination)
000017D8  B83C 0004                874      CMP.B   #%100,D4
000017DC  6700 0040                875      BEQ     AND_B
000017E0  B83C 0005                876      CMP.B   #%101,D4
000017E4  6700 0046                877      BEQ     AND_W
000017E8  B83C 0006                878      CMP.B   #%110,D4
000017EC  6700 004C                879      BEQ     AND_L
000017F0                           880      
000017F0  6000 03D8                881      BRA     INVALID_OP
000017F4                           882     
000017F4                           883  * Handle EA, then Data Reg.
000017F4                           884  AND_B_D
000017F4  4EB9 00001B94            885      JSR PRINT_B
000017FA                           886      *Proceed to EA Subroutine
000017FA  4EB9 00001C22            887      JSR     ADDFORMAT_DATA_DEST_EA
00001800                           888      
00001800  4E75                     889      RTS * Return to IO
00001802                           890      
00001802                           891  AND_W_D
00001802  4EB9 00001BA6            892      JSR PRINT_W
00001808                           893      *Proceed to EA Subroutine    
00001808  4EB9 00001C22            894      JSR     ADDFORMAT_DATA_DEST_EA
0000180E                           895      
0000180E  4E75                     896      RTS * Return to IO
00001810                           897  
00001810                           898  AND_L_D  
00001810  4EB9 00001BB8            899      JSR PRINT_L
00001816                           900      *Proceed to EA Subroutine    
00001816  4EB9 00001C22            901      JSR     ADDFORMAT_DATA_DEST_EA
0000181C                           902      
0000181C  4E75                     903      RTS * Return to IO
0000181E                           904  
0000181E                           905      
0000181E                           906  * Handle data reg, then EA     
0000181E                           907  AND_B
0000181E  4EB9 00001B94            908      JSR PRINT_B
00001824                           909      *Proceed to EA Subroutine
00001824  4EB9 00001C50            910      JSR     ADDFORMAT_EA_DEST_EA
0000182A  4E75                     911      RTS * Return to IO 
0000182C                           912      
0000182C                           913  AND_W
0000182C  4EB9 00001BA6            914      JSR PRINT_W
00001832                           915      *Proceed to EA Subroutine    
00001832  4EB9 00001C50            916      JSR     ADDFORMAT_EA_DEST_EA
00001838  4E75                     917      RTS * Return to IO 
0000183A                           918  
0000183A                           919  AND_L    
0000183A  4EB9 00001BB8            920      JSR PRINT_L
00001840                           921      *Proceed to EA Subroutine  
00001840  4EB9 00001C50            922      JSR     ADDFORMAT_EA_DEST_EA
00001846  4E75                     923      RTS * Return to IO 
00001848                           924  
00001848                           925      
00001848                           926      
00001848                           927  OP_1101 *ADD,ADDA
00001848  2803                     928      MOVE.L  D3,D4
0000184A  EF4C                     929      LSL.W   #7,D4
0000184C  1C3C 000D                930      MOVE.B  #13,D6
00001850  EC6C                     931      LSR.W   D6,D4 *Get Opmode
00001852                           932      
00001852                           933      *ADD Opmodes
00001852                           934      *< ea > Dn -> Dn (Dn is the destination; Print <ea> first, then data register)
00001852                           935          * Added new branches to differentiate between orders.
00001852  B83C 0000                936      CMP.B   #%000,D4
00001856  6700 005A                937      BEQ     ADD_B_D
0000185A  B83C 0001                938      CMP.B   #%001,D4
0000185E  6700 0064                939      BEQ     ADD_W_D
00001862  B83C 0002                940      CMP.B   #%010,D4
00001866  6700 006E                941      BEQ     ADD_L_D
0000186A                           942      
0000186A                           943      
0000186A                           944      *Dn < ea > -> < ea > (EA is the destination; Print data reg first, then <ea>)
0000186A  B83C 0004                945      CMP.B   #%100,D4
0000186E  6700 0078                946      BEQ     ADD_B
00001872  B83C 0005                947      CMP.B   #%101,D4
00001876  6700 0082                948      BEQ     ADD_W
0000187A  B83C 0006                949      CMP.B   #%110,D4
0000187E  6700 008C                950      BEQ     ADD_L
00001882                           951      
00001882                           952      
00001882                           953      *ADDA Opmodes
00001882  B83C 0003                954      CMP.B   #%011,D4
00001886  6700 0096                955      BEQ     ADDA_W
0000188A  B83C 0007                956      CMP.B   #%111,D4
0000188E  6700 00A0                957      BEQ     ADDA_L
00001892                           958       
00001892                           959      
00001892  6000 0336                960      BRA     INVALID_OP
00001896                           961  
00001896                           962  IS_ADD
00001896  43F9 000020C1            963      LEA     PRNT_ADD,A1
0000189C  4EB9 00001E24            964      JSR     PRINT_BUFF
000018A2  4E75                     965      RTS
000018A4                           966  IS_ADDA
000018A4  43F9 000020C5            967      LEA     PRNT_ADDA,A1
000018AA  4EB9 00001E24            968      JSR     PRINT_BUFF
000018B0  4E75                     969      RTS   
000018B2                           970  
000018B2                           971  * For these, handle EA first, then Data reg.
000018B2                           972  ADD_B_D
000018B2  4EB8 1896                973      JSR     IS_ADD
000018B6  4EB9 00001B94            974      JSR     PRINT_B
000018BC                           975      * Handle operands
000018BC  4EB9 00001C22            976      JSR     ADDFORMAT_DATA_DEST_EA
000018C2                           977      
000018C2  4E75                     978      RTS * Return to IO
000018C4                           979      
000018C4                           980  ADD_W_D
000018C4  4EB8 1896                981      JSR     IS_ADD
000018C8  4EB9 00001BA6            982      JSR     PRINT_W
000018CE                           983      * Handle operands
000018CE  4EB9 00001C22            984      JSR     ADDFORMAT_DATA_DEST_EA
000018D4                           985      
000018D4  4E75                     986      RTS * Return to IO    
000018D6                           987  ADD_L_D
000018D6  4EB8 1896                988      JSR     IS_ADD
000018DA  4EB9 00001BB8            989      JSR     PRINT_L
000018E0                           990      * Handle operands
000018E0  4EB9 00001C22            991      JSR     ADDFORMAT_DATA_DEST_EA
000018E6                           992      
000018E6  4E75                     993      RTS * Return to IO
000018E8                           994  
000018E8                           995  
000018E8                           996  * For these, handle data reg first, then EA.
000018E8                           997  ADD_B
000018E8  4EB8 1896                998      JSR     IS_ADD
000018EC  4EB9 00001B94            999      JSR     PRINT_B
000018F2                          1000      *Proceed to EA Subroutine
000018F2  4EB9 00001C50           1001      JSR     ADDFORMAT_EA_DEST_EA
000018F8  4E75                    1002      RTS * Return to IO 
000018FA                          1003      
000018FA                          1004  ADD_W
000018FA  4EB8 1896               1005      JSR     IS_ADD
000018FE  4EB9 00001BA6           1006      JSR     PRINT_W
00001904                          1007      *Proceed to EA Subroutine    
00001904  4EB9 00001C50           1008      JSR     ADDFORMAT_EA_DEST_EA
0000190A  4E75                    1009      RTS * Return to IO 
0000190C                          1010      
0000190C                          1011  ADD_L
0000190C  4EB8 1896               1012      JSR     IS_ADD
00001910  4EB9 00001BB8           1013      JSR     PRINT_L
00001916                          1014      *Proceed to EA Subroutine
00001916  4EB9 00001C50           1015      JSR     ADDFORMAT_EA_DEST_EA
0000191C  4E75                    1016      RTS * Return to IO 
0000191E                          1017  
0000191E                          1018  
0000191E                          1019  * Destination must be An, so do data reg first, then EA (POTENTIAL BUG, CHECK ********************)
0000191E                          1020  ADDA_W
0000191E  4EB8 18A4               1021      JSR     IS_ADDA
00001922  4EB9 00001BA6           1022      JSR     PRINT_W
00001928                          1023      *Proceed to EA Subroutine
00001928  4EB9 00001C50           1024      JSR     ADDFORMAT_EA_DEST_EA
0000192E  4E75                    1025      RTS * Return to IO 
00001930                          1026      
00001930                          1027  ADDA_L  
00001930  4EB8 18A4               1028      JSR     IS_ADDA  
00001934  4EB9 00001BB8           1029      JSR     PRINT_L
0000193A                          1030      *Proceed to EA Subroutine
0000193A  4EB9 00001C50           1031      JSR     ADDFORMAT_EA_DEST_EA
00001940  4E75                    1032      RTS * Return to IO 
00001942                          1033  
00001942                          1034      
00001942                          1035      
00001942                          1036  OP_1110 *LSL/LSR,ASL/ASR,ROL/ROR (ADDED: Using D2 to track Mem/Reg state (0 = Reg, 1 = Mem) (D2 only used in hex input tester, so good to use))
00001942                          1037  
00001942                          1038      *Memory Shift Check bits 6,7
00001942  2803                    1039      MOVE.L  D3,D4
00001944  E14C                    1040      LSL.W   #8,D4
00001946  7C0E                    1041      MOVE.L  #14,D6
00001948  EC6C                    1042      LSR.W   D6,D4
0000194A                          1043      
0000194A  B83C 0003               1044      CMP.B   #%11,D4
0000194E  6600 0024               1045      BNE     REG
00001952                          1046      *Memory Shift check bits 11,10,9
00001952  2803                    1047      MOVE.L  D3,D4
00001954  E94C                    1048      LSL.W   #4,D4
00001956  1C3C 000D               1049      MOVE.B  #13,D6
0000195A  EC6C                    1050      LSR.W   D6,D4
0000195C                          1051      
0000195C  B83C 0000               1052      CMP.B   #%000,D4 *ASL/ASR
00001960  6700 0064               1053      BEQ     A_MEM
00001964  B83C 0001               1054      CMP.B   #%001,D4 *LSL,LSR
00001968  6700 00D0               1055      BEQ     L_MEM
0000196C  B83C 0003               1056      CMP.B   #%011,D4 *ROL/ROR
00001970  6700 013C               1057      BEQ     R_MEM
00001974                          1058      
00001974                          1059      *Register Shift check bits 4,3
00001974  2803                    1060  REG MOVE.L  D3,D4
00001976  1C3C 000B               1061      MOVE.B  #11,D6
0000197A  ED6C                    1062      LSL.W   D6,D4
0000197C  1C3C 000E               1063      MOVE.B  #14,D6
00001980  EC6C                    1064      LSR.W   D6,D4
00001982                          1065      
00001982  B83C 0000               1066      CMP.B   #%00,D4 *ASL/ASR
00001986  6700 0016               1067      BEQ     A_REG
0000198A  B83C 0001               1068      CMP.B   #%01,D4 *LSL/LSR
0000198E  6700 0082               1069      BEQ     L_REG
00001992  B83C 0003               1070      CMP.B   #%11,D4 *ROL/ROR
00001996  6700 00EE               1071      BEQ     R_REG
0000199A                          1072      
0000199A                          1073      
0000199A  6000 022E               1074      BRA     INVALID_OP
0000199E                          1075      
0000199E                          1076      *Check bit 8 to determine L/R shift
0000199E                          1077  A_REG
0000199E  4EB9 00001AFA           1078      JSR     RGHT_LFT
000019A4                          1079      
000019A4  143C 0000               1080      MOVE.B  #0,D2 * SET D2 TO 0 TO KNOW IS REG
000019A8                          1081      
000019A8  4286                    1082      CLR.L   D6
000019AA  1C3C 0001               1083      MOVE.B  #01,D6
000019AE  B83C 0000               1084      CMP.B   #%0,D4
000019B2  6700 0032               1085      BEQ     IS_ASR
000019B6  B83C 0001               1086      CMP.B   #%1,D4
000019BA  6700 0040               1087      BEQ     IS_ASL
000019BE                          1088      
000019BE  6000 020A               1089      BRA INVALID_OP
000019C2                          1090  A_SIZE    
000019C2  6000 0142               1091      BRA     GET_SHFT_SIZE 
000019C6                          1092  
000019C6                          1093  A_MEM
000019C6  4EB9 00001AFA           1094      JSR     RGHT_LFT
000019CC                          1095      
000019CC  143C 0001               1096      MOVE.B  #1,D2 * SET D2 TO 1 TO KNOW IS MEM
000019D0                          1097      
000019D0  4286                    1098      CLR.L   D6
000019D2  1C3C 0002               1099      MOVE.B  #02,D6
000019D6  B83C 0000               1100      CMP.B   #%0,D4
000019DA  6700 000A               1101      BEQ     IS_ASR
000019DE  B83C 0001               1102      CMP.B   #%1,D4
000019E2  6700 0018               1103      BEQ     IS_ASL    
000019E6                          1104  
000019E6                          1105  
000019E6                          1106      
000019E6                          1107      
000019E6                          1108  IS_ASR
000019E6  43F9 000020D6           1109      LEA     PRNT_ASR,A1
000019EC  4EB9 00001E24           1110      JSR     PRINT_BUFF
000019F2  BC3C 0001               1111      CMP.B   #01,D6
000019F6  67CA                    1112      BEQ     A_SIZE
000019F8                          1113  
000019F8  6000 016A               1114      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
000019FC                          1115  
000019FC                          1116  
000019FC                          1117  IS_ASL
000019FC  43F9 000020D2           1118      LEA     PRNT_ASL,A1
00001A02  4EB9 00001E24           1119      JSR     PRINT_BUFF
00001A08  BC3C 0001               1120      CMP.B   #01,D6
00001A0C  67B4                    1121      BEQ     A_SIZE
00001A0E                          1122  
00001A0E  6000 0154               1123      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001A12                          1124  
00001A12                          1125  
00001A12                          1126      
00001A12                          1127  L_REG
00001A12  4EB9 00001AFA           1128      JSR     RGHT_LFT
00001A18                          1129      
00001A18  143C 0000               1130      MOVE.B  #0,D2 * SET D2 TO 0 TO KNOW IS REG
00001A1C                          1131      
00001A1C  4286                    1132      CLR.L   D6
00001A1E  1C3C 0001               1133      MOVE.B  #01,D6
00001A22  B83C 0000               1134      CMP.B   #%0,D4
00001A26  6700 0032               1135      BEQ     IS_LSR
00001A2A  B83C 0001               1136      CMP.B   #%1,D4
00001A2E  6700 0040               1137      BEQ     IS_LSL
00001A32                          1138      
00001A32  6000 0196               1139      BRA INVALID_OP
00001A36                          1140  L_SIZE    
00001A36  6000 00CE               1141      BRA     GET_SHFT_SIZE 
00001A3A                          1142  
00001A3A                          1143  L_MEM
00001A3A  4EB9 00001AFA           1144      JSR     RGHT_LFT
00001A40                          1145      
00001A40  143C 0001               1146      MOVE.B  #1,D2 * SET D2 TO 1 TO KNOW IS MEM
00001A44                          1147      
00001A44  4286                    1148      CLR.L   D6
00001A46  1C3C 0002               1149      MOVE.B  #02,D6
00001A4A  B83C 0000               1150      CMP.B   #%0,D4
00001A4E  6700 000A               1151      BEQ     IS_LSR
00001A52  B83C 0001               1152      CMP.B   #%1,D4
00001A56  6700 0018               1153      BEQ     IS_LSL    
00001A5A                          1154  
00001A5A                          1155      
00001A5A                          1156  IS_LSR
00001A5A  43F9 000020DE           1157      LEA     PRNT_LSR,A1
00001A60  4EB9 00001E24           1158      JSR     PRINT_BUFF
00001A66  BC3C 0001               1159      CMP.B   #01,D6
00001A6A  67CA                    1160      BEQ     L_SIZE
00001A6C                          1161      
00001A6C  6000 00F6               1162      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001A70                          1163      
00001A70                          1164  
00001A70                          1165  IS_LSL
00001A70  43F9 000020DA           1166      LEA     PRNT_LSL,A1
00001A76  4EB9 00001E24           1167      JSR     PRINT_BUFF
00001A7C  BC3C 0001               1168      CMP.B   #01,D6
00001A80  67B4                    1169      BEQ     L_SIZE 
00001A82                          1170      
00001A82  6000 00E0               1171      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001A86                          1172      
00001A86                          1173  
00001A86                          1174      
00001A86                          1175      
00001A86                          1176  R_REG
00001A86  4EB9 00001AFA           1177      JSR     RGHT_LFT
00001A8C                          1178      
00001A8C  143C 0000               1179      MOVE.B  #0,D2 * SET D2 TO 0 TO KNOW IS REG
00001A90                          1180      
00001A90  4286                    1181      CLR.L   D6
00001A92  1C3C 0001               1182      MOVE.B  #01,D6
00001A96  B83C 0000               1183      CMP.B   #%0,D4
00001A9A  6700 0032               1184      BEQ     IS_ROR
00001A9E  B83C 0001               1185      CMP.B   #%1,D4
00001AA2  6700 0040               1186      BEQ     IS_ROL
00001AA6                          1187      
00001AA6  6000 0122               1188      BRA INVALID_OP
00001AAA                          1189  R_SIZE    
00001AAA  6000 005A               1190      BRA     GET_SHFT_SIZE 
00001AAE                          1191  
00001AAE                          1192  R_MEM
00001AAE  4EB9 00001AFA           1193      JSR     RGHT_LFT
00001AB4                          1194      
00001AB4  143C 0001               1195      MOVE.B  #1,D2 * SET D2 TO 1 TO KNOW IS MEM
00001AB8                          1196      
00001AB8  4286                    1197      CLR.L   D6
00001ABA  1C3C 0002               1198      MOVE.B  #02,D6
00001ABE  B83C 0000               1199      CMP.B   #%0,D4
00001AC2  6700 000A               1200      BEQ     IS_ROR
00001AC6  B83C 0001               1201      CMP.B   #%1,D4
00001ACA  6700 0018               1202      BEQ     IS_ROL    
00001ACE                          1203  
00001ACE                          1204      
00001ACE                          1205      
00001ACE                          1206  IS_ROR
00001ACE  43F9 000020E6           1207      LEA     PRNT_ROR,A1
00001AD4  4EB9 00001E24           1208      JSR     PRINT_BUFF
00001ADA  BC3C 0001               1209      CMP.B   #01,D6
00001ADE  67CA                    1210      BEQ     R_SIZE  
00001AE0                          1211  
00001AE0  6000 0082               1212      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001AE4                          1213    
00001AE4                          1214  
00001AE4                          1215  IS_ROL
00001AE4  43F9 000020E2           1216      LEA     PRNT_ROL,A1
00001AEA  4EB9 00001E24           1217      JSR     PRINT_BUFF
00001AF0  BC3C 0001               1218      CMP.B   #01,D6
00001AF4  67B4                    1219      BEQ     R_SIZE 
00001AF6                          1220  
00001AF6  6000 006C               1221      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001AFA                          1222     
00001AFA                          1223  
00001AFA                          1224      
00001AFA                          1225      
00001AFA                          1226  
00001AFA                          1227  *GET_IR
00001AFA                          1228  *    MOVE.L  D3,D4
00001AFA                          1229  *    MOVE.B  #10,D6
00001AFA                          1230  *    LSL.W   D6,D4
00001AFA                          1231  *    MOVE.B  #15,D6
00001AFA                          1232  *    LSR.W   D6,D4
00001AFA                          1233  *    
00001AFA                          1234  *    MOVE.W  D4,D1
00001AFA                          1235  *    MOVE.B  #3,D0
00001AFA                          1236  *    TRAP    #15
00001AFA                          1237  *    SIMHALT    
00001AFA                          1238  
00001AFA                          1239  RGHT_LFT    *0 = RIGHT 1 = LEFT
00001AFA                          1240  *Determine if right/left shift
00001AFA  2803                    1241      MOVE.L  D3,D4
00001AFC  1C3C 000F               1242      MOVE.B  #15,D6
00001B00  EF4C                    1243      LSL.W   #7,D4
00001B02  EC6C                    1244      LSR.W   D6,D4
00001B04  4E75                    1245      RTS
00001B06                          1246      
00001B06                          1247  GET_SHFT_SIZE
00001B06  2803                    1248      MOVE.L  D3,D4
00001B08  E14C                    1249      LSL.W   #8,D4
00001B0A  1C3C 000E               1250      MOVE.B  #14,D6
00001B0E  EC6C                    1251      LSR.W   D6,D4
00001B10                          1252      
00001B10  B83C 0000               1253      CMP.B   #%00,D4    *B
00001B14  6700 0012               1254      BEQ     PRINT_B_SHIFT
00001B18  B83C 0001               1255      CMP.B   #%01,D4    *W
00001B1C  6700 001E               1256      BEQ     PRINT_W_SHIFT
00001B20  B83C 0002               1257      CMP.B   #%10,D4    *L
00001B24  6700 002A               1258      BEQ     PRINT_L_SHIFT
00001B28                          1259      
00001B28                          1260  
00001B28                          1261      
00001B28                          1262  PRINT_B_SHIFT
00001B28  1A3C 0001               1263      MOVE.B  #$1,D5 * For EA subroutine's size handling
00001B2C  43F9 00002072           1264      LEA     PRNT_B,A1
00001B32  4EB9 00001E24           1265      JSR     PRINT_BUFF
00001B38  6000 002A               1266      BRA     DO_SHIFT_EA
00001B3C                          1267  PRINT_W_SHIFT
00001B3C  1A3C 0002               1268      MOVE.B  #$2,D5 * For EA subroutine's size handling
00001B40  43F9 00002076           1269      LEA     PRNT_W,A1
00001B46  4EB9 00001E24           1270      JSR     PRINT_BUFF
00001B4C  6000 0016               1271      BRA     DO_SHIFT_EA
00001B50                          1272  PRINT_L_SHIFT
00001B50  1A3C 0003               1273      MOVE.B  #$3,D5 * For EA subroutine's size handling
00001B54  43F9 0000207A           1274      LEA     PRNT_L,A1
00001B5A  4EB9 00001E24           1275      JSR     PRINT_BUFF
00001B60  6000 0002               1276      BRA     DO_SHIFT_EA
00001B64                          1277  
00001B64                          1278  DO_SHIFT_EA
00001B64                          1279      
00001B64                          1280      
00001B64                          1281      *Proceed to EA Subroutine (ALL SHIFT OPS END UP HERE; USE TO GENERALIZE THE EA HANDLING FOR ALL)
00001B64                          1282      * Check D2 for status on MEM/REG for these.
00001B64  B43C 0000               1283      CMP.B   #0,D2
00001B68  6700 000C               1284      BEQ     REG_EA
00001B6C                          1285  
00001B6C  4EB9 00001C80           1286      JSR     EA_SRC * MEM mode, so just need to print single EA field.
00001B72  6000 001E               1287      BRA     SHIFT_EA_DONE
00001B76                          1288  
00001B76                          1289  REG_EA
00001B76  4EB9 00001BD0           1290      JSR     REGSHIFTFORMAT_EA
00001B7C                          1291      
00001B7C  3803                    1292      MOVE.W  D3,D4
00001B7E  C87C 0007               1293      AND.W   #%0000000000000111,D4
00001B82  1C04                    1294      MOVE.B  D4,D6
00001B84                          1295      
00001B84  48E7 FF00               1296      MOVEM.L D0-D7,-(SP) * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001B88  4EB9 00001CC4           1297      JSR     EA_SUB
00001B8E  4CDF 00FF               1298      MOVEM.L (SP)+,D0-D7 * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001B92                          1299  
00001B92                          1300  SHIFT_EA_DONE
00001B92  4E75                    1301      RTS * GO TO IO; SHIFT INSTR DONE.    
00001B94                          1302   
00001B94                          1303  PRINT_B
00001B94  1A3C 0001               1304      MOVE.B  #$1,D5 * For EA subroutine's size handling
00001B98  43F9 00002072           1305      LEA     PRNT_B,A1
00001B9E  4EB9 00001E24           1306      JSR     PRINT_BUFF
00001BA4  4E75                    1307      RTS
00001BA6                          1308  PRINT_W
00001BA6  1A3C 0002               1309      MOVE.B  #$2,D5 * For EA subroutine's size handling
00001BAA  43F9 00002076           1310      LEA     PRNT_W,A1
00001BB0  4EB9 00001E24           1311      JSR     PRINT_BUFF
00001BB6  4E75                    1312      RTS
00001BB8                          1313  PRINT_L
00001BB8  1A3C 0003               1314      MOVE.B  #$3,D5 * For EA subroutine's size handling
00001BBC  43F9 0000207A           1315      LEA     PRNT_L,A1
00001BC2  4EB9 00001E24           1316      JSR     PRINT_BUFF
00001BC8  4E75                    1317      RTS
00001BCA                          1318  INVALID_OP
00001BCA                          1319      * LEA     INVALID_MSG,A1
00001BCA                          1320      * JSR       PRINT_BUFF
00001BCA  1E3C 0001               1321      MOVE.B  #1,D7
00001BCE  4E75                    1322      RTS
00001BD0                          1323  *-----------HANDLE BIT SHIFTING EA SOURCE -------------------------
00001BD0                          1324  REGSHIFTFORMAT_EA
00001BD0  3803                    1325      MOVE.W  D3,D4 * Refresh D4 with our opcode word to analyze
00001BD2                          1326       
00001BD2  C87C 0E00               1327      AND.W   #%0000111000000000,D4 * Isolate the register number
00001BD6  E64C                    1328      LSR.W   #3,D4   * Shift reg/count to far right
00001BD8  EC4C                    1329      LSR.W   #6,D4
00001BDA  1C04                    1330      MOVE.B  D4,D6   * D6 now contains either our register number or amount to shift by
00001BDC                          1331      
00001BDC  3803                    1332      MOVE.W  D3,D4
00001BDE  0804 0005               1333      BTST    #5,D4 * Test bit 5 to tell if specified as a register or immediate value (Doesn't modify D4)
00001BE2  6700 0012               1334      BEQ     S_IMM   * Bit was 0, need to do immediate value process.
00001BE6                          1335      * If here, do data register contains count process (D6 already prepared)
00001BE6                          1336      
00001BE6  48E7 FF00               1337      MOVEM.L D0-D7,-(SP) * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001BEA                          1338      
00001BEA  4EB9 00001CC4           1339      JSR     EA_SUB * Print the source operand
00001BF0                          1340      
00001BF0  4CDF 00FF               1341      MOVEM.L (SP)+,D0-D7 * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001BF4                          1342  
00001BF4                          1343      
00001BF4  4E75                    1344      RTS * Go back to process the destination
00001BF6                          1345      
00001BF6                          1346  S_IMM
00001BF6  43F9 000020FA           1347      LEA     PRNT_Q,A1 * To print hash for immediate data.
00001BFC  4EB9 00001E24           1348      JSR     PRINT_BUFF
00001C02                          1349      
00001C02  BC3C 0000               1350      CMP.B   #0,D6 * Test to see if D6 is equal to zero.
00001C06  6700 000C               1351      BEQ     S_EIGHT * Convert value to 8.
00001C0A                          1352      
00001C0A  1206                    1353      MOVE.B  D6,D1 * Print the value.
00001C0C  4EB9 00001E30           1354      JSR     PRINT_HEXBUFF
00001C12                          1355      
00001C12  4E75                    1356      RTS
00001C14                          1357  
00001C14                          1358  S_EIGHT
00001C14  1C3C 0008               1359      MOVE.B  #8,D6
00001C18                          1360      
00001C18  1206                    1361      MOVE.B  D6,D1 * Print the value.
00001C1A  4EB9 00001E30           1362      JSR     PRINT_HEXBUFF
00001C20                          1363  
00001C20  4E75                    1364      RTS
00001C22                          1365      
00001C22                          1366  *------------------------------------------------------------
00001C22                          1367  *-----------HANDLE ADD FORMAT DATA DESTINATION EA -----------
00001C22                          1368  ADDFORMAT_DATA_DEST_EA
00001C22  4EB9 00001C80           1369      JSR     EA_SRC * Handle source EA
00001C28                          1370      
00001C28                          1371      
00001C28                          1372      
00001C28  3803                    1373      MOVE.W  D3,D4
00001C2A  C87C 0E00               1374      AND.W   #%0000111000000000,D4 * Isolate Register #
00001C2E  E64C                    1375      LSR.W   #3,D4
00001C30  EC4C                    1376      LSR.W   #6,D4
00001C32  1C04                    1377      MOVE.B  D4,D6   * Prime D6 register
00001C34                          1378      
00001C34                          1379      * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001C34  48E7 FF00               1380      MOVEM.L D0-D7,-(SP) * Move register contents to stack
00001C38                          1381  
00001C38  43F9 00001FF6           1382      LEA     COMMA,A1
00001C3E  4EB9 00001E24           1383      JSR     PRINT_BUFF
00001C44                          1384      
00001C44  4EB9 00001CC4           1385      JSR     EA_SUB * Handle the destination EA (last 6 bits of D6)
00001C4A                          1386      
00001C4A                          1387      * MOVEM RETURN
00001C4A  4CDF 00FF               1388      MOVEM.L (SP)+,D0-D7 * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001C4E                          1389  
00001C4E                          1390      
00001C4E  4E75                    1391      RTS
00001C50                          1392  *------------------------------------------------------------
00001C50                          1393  *-----------HANDLE ADD FORMAT EA DESTINATION EA -------------
00001C50                          1394  ADDFORMAT_EA_DEST_EA
00001C50                          1395      
00001C50  3803                    1396      MOVE.W  D3,D4
00001C52  C87C 0E00               1397      AND.W   #%0000111000000000,D4 * Isolate Register #
00001C56  E64C                    1398      LSR.W   #3,D4
00001C58  EC4C                    1399      LSR.W   #6,D4
00001C5A  1C04                    1400      MOVE.B  D4,D6   * Prime D6 register
00001C5C                          1401      
00001C5C                          1402      * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001C5C                          1403  
00001C5C  48E7 FF00               1404      MOVEM.L D0-D7,-(SP) * Move register contents to stack
00001C60                          1405      
00001C60  4EB9 00001CC4           1406      JSR     EA_SUB * Handle the source EA
00001C66                          1407      
00001C66                          1408      * MOVEM RETURN
00001C66  4CDF 00FF               1409      MOVEM.L (SP)+,D0-D7 * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001C6A                          1410  
00001C6A                          1411      
00001C6A  3803                    1412      MOVE.W  D3,D4  * Refresh opcode
00001C6C                          1413  
00001C6C  43F9 00001FF6           1414      LEA     COMMA,A1
00001C72  4EB9 00001E24           1415      JSR     PRINT_BUFF
00001C78                          1416      
00001C78  4EB9 00001C80           1417      JSR     EA_SRC * Handle destination EA
00001C7E                          1418  
00001C7E  4E75                    1419      RTS
00001C80                          1420  
00001C80                          1421  *------------------------------------------------------------
00001C80                          1422  *-------------------HANDLE SOURCE EA (last 6 bits)-----------
00001C80                          1423  EA_SRC
00001C80                          1424      * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001C80  48E7 FF00               1425      MOVEM.L D0-D7,-(SP) * Move register contents to stack
00001C84                          1426  
00001C84  3803                    1427      MOVE.W  D3,D4
00001C86  C87C 003F               1428      AND.W   #%0000000000111111,D4
00001C8A  1C04                    1429      MOVE.B  D4,D6
00001C8C                          1430      
00001C8C  4EB9 00001CC4           1431      JSR EA_SUB ** Print source EA bits from bits in D6
00001C92                          1432      
00001C92                          1433      * MOVEM RETURN
00001C92  4CDF 00FF               1434      MOVEM.L (SP)+,D0-D7 * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001C96  4E75                    1435      RTS
00001C98                          1436  *------------------------------------------------------------
00001C98                          1437  *------HANDLE DESTINATION EA(6 bits before last 6 bits)------
00001C98                          1438  EA_DEST
00001C98                          1439      * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001C98  48E7 FF00               1440      MOVEM.L D0-D7,-(SP) * Move register contents to stack
00001C9C                          1441  
00001C9C  3803                    1442      MOVE.W  D3,D4
00001C9E  C87C 0FC0               1443      AND.W #%0000111111000000,D4
00001CA2  EC4C                    1444      LSR.W #6,D4
00001CA4  1004                    1445      MOVE.B  D4,D0
00001CA6  C07C 0007               1446      AND.W #%0000000000000111,D0 * D0 contains mode bits
00001CAA  1200                    1447      MOVE.B  D0,D1   *MODE (D1) (Curr state: 000 001 in D1)
00001CAC  2004                    1448      MOVE.L  D4,D0 * D0 contains 6 bit field out of order
00001CAE  E648                    1449      LSR.W   #3,D0 * D0 contains reg bits (Curr State: 000 010 in D0)
00001CB0  1400                    1450      MOVE.B  D0,D2   *REG (D2) (Curr State: 000 010 in D2 and D0)
00001CB2                          1451      
00001CB2  E709                    1452      LSL.B   #3,D1 * Shift mode into position
00001CB4                          1453      
00001CB4  8401                    1454      OR.B    D1,D2   
00001CB6  1C02                    1455      MOVE.B  D2,D6 *
00001CB8                          1456      
00001CB8  4EB9 00001CC4           1457      JSR     EA_SUB
00001CBE                          1458      
00001CBE                          1459      * MOVEM RETURN
00001CBE  4CDF 00FF               1460      MOVEM.L (SP)+,D0-D7 * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001CC2                          1461      
00001CC2  4E75                    1462      RTS
00001CC4                          1463  *------------------------------------------------------------ 
00001CC4                          1464      
00001CC4                          1465  *-------------------EA Subroutine----------------------------
00001CC4                          1466  
00001CC4                          1467  EA_SUB
00001CC4                          1468  
00001CC4                          1469              * 1: Process the 6-bit field into D3 (Register bits) and D4 (Mode bits)
00001CC4  1806                    1470              MOVE.B  D6,D4 * Prime D4 with the full 6-bit field
00001CC6  C83C 0007               1471              AND.B   #%00000111,D4 * Clear everything but the register bits (BITS READY)
00001CCA                          1472              
00001CCA  1606                    1473              MOVE.B  D6,D3 * Prime D3 with the full 6-bit field
00001CCC  E60B                    1474              LSR.B   #3,D3 * Shift out the register bits to isolate the mode bits (BITS READY)
00001CCE                          1475                  
00001CCE                          1476              * 2: Process the MODE BITS:
00001CCE  B63C 0000               1477  MODE_P      CMP.B   #%00000000,D3   * TEST FOR 000: Dn
00001CD2  6700 002E               1478              BEQ     DN_MODE
00001CD6                          1479              
00001CD6  B63C 0001               1480              CMP.B   #%00000001,D3   * TEST FOR 001: An
00001CDA  6700 0036               1481              BEQ     AN_MODE
00001CDE                          1482              
00001CDE  B63C 0002               1483              CMP.B   #%00000010,D3   * TEST FOR 010: (An)
00001CE2  6700 003E               1484              BEQ     ANIND_MODE
00001CE6                          1485              
00001CE6  B63C 0003               1486              CMP.B   #%00000011,D3   * TEST FOR 011: (An)+
00001CEA  6700 0046               1487              BEQ     ANINC_MODE
00001CEE                          1488              
00001CEE  B63C 0004               1489              CMP.B   #%00000100,D3   * TEST FOR 100: -(An)
00001CF2  6700 004E               1490              BEQ     ANDEC_MODE
00001CF6                          1491              
00001CF6  B63C 0007               1492              CMP.B   #%00000111,D3   * TEST FOR 111: #<data>, (xxx).W, or (xxx).L (or unsupported!)
00001CFA  6700 0056               1493              BEQ     ABSDAT_MODE
00001CFE                          1494              
00001CFE  6000 011E               1495              BRA     UNSUPP_MODE     * If we made it here, assume an unsupported mode!
00001D02                          1496              
00001D02                          1497              
00001D02  43F9 000020EA           1498  DN_MODE     LEA     PRNT_D,A1
00001D08  4EB9 00001E24           1499              JSR     PRINT_BUFF
00001D0E                          1500              
00001D0E  6000 005E               1501              BRA     REG_P
00001D12                          1502              
00001D12  43F9 000020EC           1503  AN_MODE     LEA     PRNT_A,A1
00001D18  4EB9 00001E24           1504              JSR     PRINT_BUFF
00001D1E                          1505              
00001D1E  6000 004E               1506              BRA     REG_P
00001D22                          1507  
00001D22  43F9 000020EE           1508  ANIND_MODE  LEA     PRNT_AI,A1
00001D28  4EB9 00001E24           1509              JSR     PRINT_BUFF
00001D2E                          1510              
00001D2E  6000 003E               1511              BRA     REG_P
00001D32                          1512  
00001D32  43F9 000020EE           1513  ANINC_MODE  LEA     PRNT_AI,A1  * As of now this is the same as indirect, postdec added after register
00001D38  4EB9 00001E24           1514              JSR     PRINT_BUFF
00001D3E                          1515              
00001D3E  6000 002E               1516              BRA     REG_P
00001D42                          1517  
00001D42  43F9 000020F6           1518  ANDEC_MODE  LEA     PRNT_DC,A1
00001D48  4EB9 00001E24           1519              JSR     PRINT_BUFF
00001D4E                          1520              
00001D4E  6000 001E               1521              BRA     REG_P
00001D52                          1522              
00001D52                          1523  
00001D52                          1524  * DATA / ABSOLUTE ADDRESSING HANDLING (Mode was 111 in D3; need to chk. D4 reg bits for behavior)
00001D52  B83C 0004               1525  ABSDAT_MODE CMP.B   #%00000100,D4 * TEST FOR 100: #<data>
00001D56  6700 005A               1526              BEQ     DATA_MODE
00001D5A                          1527              
00001D5A  B83C 0000               1528              CMP.B   #%00000000,D4 * TEST FOR 000: (xxx).W
00001D5E  6700 0076               1529              BEQ     ABSW_MODE
00001D62                          1530              
00001D62  B83C 0001               1531              CMP.B   #%00000001,D4 * TEST FOR 001: (xxx).L
00001D66  6700 007E               1532              BEQ     ABSL_MODE
00001D6A                          1533              
00001D6A  6000 00B2               1534              BRA     UNSUPP_MODE   * If the register is some other val, unsupported!
00001D6E                          1535              
00001D6E                          1536              * 3: Process the REGISTER BITS: (IN D4)
00001D6E  2204                    1537  REG_P       MOVE.L  D4,D1   * Load the register value into D1 for display.
00001D70  4EB9 00001E30           1538              JSR     PRINT_HEXBUFF
00001D76                          1539              
00001D76  B63C 0002               1540              CMP.B   #%00000010,D3
00001D7A  6700 0016               1541              BEQ     END_ONE
00001D7E                          1542              
00001D7E  B63C 0004               1543              CMP.B   #%00000100,D3
00001D82  6700 000E               1544              BEQ     END_ONE
00001D86                          1545              
00001D86  B63C 0003               1546              CMP.B   #%00000011,D3
00001D8A  6700 0016               1547              BEQ     END_TWO
00001D8E                          1548              
00001D8E  6000 0092               1549              BRA     FINISH  * Additional char after register unnecessary, branch to finish
00001D92                          1550              
00001D92  43F9 000020F1           1551  END_ONE     LEA     PRNT_CL,A1
00001D98  4EB9 00001E24           1552              JSR     PRINT_BUFF
00001D9E                          1553              
00001D9E  6000 0082               1554              BRA     FINISH
00001DA2                          1555  
00001DA2  43F9 000020F3           1556  END_TWO     LEA     PRNT_IN,A1
00001DA8  4EB9 00001E24           1557              JSR     PRINT_BUFF
00001DAE                          1558              
00001DAE  6000 0072               1559              BRA     FINISH
00001DB2                          1560  
00001DB2                          1561  * #<DATA>; RELIES ON D5 CONTAINING SIZE VALUE OF THE INSTRUCTION! (So we know how much data to grab, then what to increment A5 by! (word or long))
00001DB2                          1562      * If this contains 0, this will not work in this state. D5 MUST have val 1-3 at this point!
00001DB2  43F9 000020FC           1563  DATA_MODE   LEA     PRNT_DT,A1 * Print '#$'
00001DB8  4EB9 00001E24           1564              JSR     PRINT_BUFF
00001DBE                          1565              
00001DBE  BA3C 0001               1566              CMP.B   #1,D5
00001DC2  6700 0032               1567              BEQ     BYTE
00001DC6                          1568              
00001DC6  BA3C 0002               1569              CMP.B   #2,D5
00001DCA  6700 003A               1570              BEQ     WORD
00001DCE                          1571              
00001DCE  BA3C 0003               1572              CMP.B   #3,D5
00001DD2  6700 003E               1573              BEQ     LONG
00001DD6                          1574              
00001DD6                          1575  * (xxx).W;            
00001DD6  43F9 000020FF           1576  ABSW_MODE   LEA     PRNT_HX,A1 * Print '$'
00001DDC  4EB9 00001E24           1577              JSR     PRINT_BUFF
00001DE2                          1578              
00001DE2  6000 0022               1579              BRA     WORD
00001DE6                          1580              
00001DE6                          1581  * (xxx).L; Assembler uses this when it sign extends automatically over (xxx).W           
00001DE6  43F9 000020FF           1582  ABSL_MODE   LEA     PRNT_HX,A1 * Print '$'
00001DEC  4EB9 00001E24           1583              JSR     PRINT_BUFF
00001DF2                          1584              
00001DF2  6000 001E               1585              BRA     LONG
00001DF6                          1586  
00001DF6                          1587  * Expects format created by assembled machine code, NOT how it is just pushed to memory by (An)!            
00001DF6  321B                    1588  BYTE        MOVE.W  (A3)+,D1    * Move word of data from curr opcode word pointer to D1, then increment pointer a word.
00001DF8                          1589              *=MOVE.B  #16,D2      * Prepare to display a hex value
00001DF8  C27C 00FF               1590              AND.W   #%0000000011111111,D1   * Discard potential word part from byte
00001DFC                          1591              *=MOVE.B  #15,D0      * Set the task to 15
00001DFC                          1592              *=TRAP    #15         * Print the value.
00001DFC  4EB9 00001E30           1593              JSR     PRINT_HEXBUFF
00001E02                          1594  
00001E02  6000 001E               1595              BRA     FINISH
00001E06                          1596  
00001E06  321B                    1597  WORD        MOVE.W  (A3)+,D1    * Move word of data from curr opcode word pointer to D1, then increment pointer a word.
00001E08                          1598              *=MOVE.B  #16,D2      * Prepare to display a hex value
00001E08                          1599              *=MOVE.B  #15,D0      * Set the task to 15
00001E08                          1600              *=TRAP    #15         * Print the value.
00001E08  4EB9 00001E30           1601              JSR     PRINT_HEXBUFF
00001E0E                          1602  
00001E0E  6000 0012               1603              BRA     FINISH
00001E12                          1604  
00001E12  221B                    1605  LONG        MOVE.L  (A3)+,D1    * Move longword of data from curr opcode word pointer to D1, then increment pointer a longword.
00001E14                          1606              *=MOVE.B  #16,D2      * Prepare to display a hex value
00001E14                          1607              *=MOVE.B  #15,D0      * Set the task to 15
00001E14                          1608              *=TRAP    #15         * Print the value.
00001E14  4EB9 00001E30           1609              JSR     PRINT_HEXBUFF
00001E1A                          1610  
00001E1A  6000 0006               1611              BRA     FINISH
00001E1E                          1612        
00001E1E                          1613              * 4: UNSUPPORTED BRANCH:
00001E1E                          1614  UNSUPP_MODE *LEA     PRNT_ER,A1
00001E1E                          1615              *JSR        PRINT_BUFF * Continue directly onto finishing up from here
00001E1E                          1616              
00001E1E  1E3C 0001               1617              MOVE.B  #1,D7   * Set Good/Bad flag to Bad state (1 bit)
00001E22                          1618              
00001E22                          1619              * 5: Finishing up:
00001E22                          1620  FINISH      
00001E22                          1621              * Return values stored in stack prior to moving into here into registers.
00001E22                          1622                  * (Will put here on integration...)
00001E22                          1623              * A5 currently points to the next needed opcode to process, which could be the following:
00001E22                          1624                  * Next opcode word instruction
00001E22                          1625                  * More data corresponding to the next <ea> field for current instruction
00001E22                          1626              
00001E22  4E75                    1627              RTS
00001E24                          1628  
00001E24                          1629  * POTENTIAL PRINT LOGIC ERROR: HANDLES LSL/R-LIKE INSTRUCTIONS WITH DIRECT NUMBER INCORRECTLY (prints first byte of mem location addr, then the number desired) *********************************
00001E24                          1630  
00001E24                          1631  PRINT_BUFF
00001E24  0C11 0000               1632              CMP.B #0,(A1)
00001E28  6700 0056               1633              BEQ RET_PBUFF           * Done copying? Jump back
00001E2C                          1634  
00001E2C  1CD9                    1635              MOVE.B (A1)+,(A6)+      * Copy character to print buffer
00001E2E  60F4                    1636              BRA PRINT_BUFF          * Repeat
00001E30                          1637  
00001E30                          1638  PRINT_HEXBUFF
00001E30  143C 0000               1639              MOVE.B #0,D2
00001E34  B2BC 00000000           1640              CMP.L #0,D1
00001E3A  6600 0006               1641              BNE PRINT_HEXBUFF_LP
00001E3E  1CFC 0030               1642              MOVE.B #$30,(A6)+       * Value was 0, print 0
00001E42                          1643  
00001E42                          1644  PRINT_HEXBUFF_LP
00001E42  B2BC 00000000           1645              CMP.L #0,D1
00001E48  6700 0036               1646              BEQ RET_PBUFF
00001E4C                          1647              
00001E4C  E999                    1648              ROL.L #4,D1             *Rotate 1 nibble to the left
00001E4E  2001                    1649              MOVE.L D1,D0    
00001E50  C0BC 0000000F           1650              AND.L #$F,D0            *Isolate the hex value
00001E56                          1651              
00001E56  0600 0037               1652              ADD.B #$37,D0
00001E5A  B03C 0040               1653              CMP.B #$40,D0
00001E5E  6E00 0004               1654              BGT   PRINT_HEXBUFF_SKIP
00001E62  5F00                    1655              SUB.B #$7,D0
00001E64                          1656      
00001E64                          1657  PRINT_HEXBUFF_SKIP
00001E64  B03C 0030               1658              CMP.B #$30,D0           * Going to print a zero
00001E68  6600 000A               1659              BNE PRINT_HEXBUFF_YESZERO
00001E6C                          1660  
00001E6C  B43C 0000               1661              CMP.B #0,D2             * Actually, don't
00001E70  6700 0008               1662              BEQ PRINT_HEXBUFF_NOZERO
00001E74                          1663  
00001E74                          1664  PRINT_HEXBUFF_YESZERO
00001E74  1CC0                    1665              MOVE.B D0,(A6)+
00001E76  143C 0001               1666              MOVE.B #1,D2
00001E7A                          1667  
00001E7A                          1668  PRINT_HEXBUFF_NOZERO
00001E7A  C23C 00F0               1669              AND.B #$F0,D1   Clear last nibble
00001E7E  60C2                    1670              BRA PRINT_HEXBUFF_LP
00001E80                          1671  
00001E80  4E75                    1672  RET_PBUFF   RTS
00001E82                          1673  * Put variables and constants here
00001E82= 50 6C 65 61 73 65 ...   1674  PROMPT_START DC.B 'Please enter starting address in hexadecimal: ' ,0
00001EB1= 50 6C 65 61 73 65 ...   1675  PROMPT_END DC.B 'Please enter ending address in hexadecimal (must be after starting): ' ,0
00001EF8= 4572 726F 723A 2...     1676  INVALID_HEX DC.W 'Error: Address must be in valid hexadecimal' ,CR,LF,0
00001F2A= 44 6F 6E 65 20 72 ...   1677  DONE_MESSAGE DC.B 'Done reading instructions' ,CR,LF,0
00001F46= 506C 6561 7365 2...     1678  ENTER_MESSAGE DC.W 'Please press enter to display new screen ' ,CR,LF,0
00001F76= 4572 726F 723A 2...     1679  INVALID_ORDER DC.W 'Error: ending address must come after starting',CR,LF,0
00001FAA= 4469 7361 7373 6...     1680  ASK_REPEAT DC.W 'Disassemble another mem range? (Yes = 0, No = 1) ' ,0 
00001FDE                          1681  INVALID_MEM_ADDR DS.W 1
00001FE0= 4441 5441 2000 0...     1682  DATA DC.W 'DATA ',CR,LF,0
00001FEC                          1683  INVALID_HEX_VAL DS.W 1 
00001FEE= 20 0D 0A 00             1684  LINE_BREAK DC.B ' ',CR,LF,0
00001FF2= 2000 0000               1685  SPACE DC.W ' ',0
00001FF6= 2C00 0000               1686  COMMA DC.W ',',0
00001FFA                          1687  INSTRUCTION_ADDR DS.B 1
00001FFC= 494E 5354 5255 4...     1688  INSTRUCTION_ADDR_MESSAGE DC.W 'INSTRUCTION ADDR',0
0000200E                          1689  OPCODE DS.W 1
00002010= 4F50 434F 4445 0000     1690  OPCODE_MESSAGE DC.W 'OPCODE',0
00002018                          1691  OPERAND1 DS.W 1
0000201A= 4F50 4552 414E 4...     1692  OPERAND1_MESSAGE DC.W 'OPERAND1',0
00002024                          1693  OPERAND2 DS.W 1
00002026= 4F50 4552 414E 4...     1694  OPERAND2_MESSAGE DC.W 'OPERAND2',0
00002030                          1695  
00002030                          1696  GOOD_BAD_FLAG DS.B 1
00002031                          1697  
00002032                          1698  START_ADDR DS.W 4
0000203A                          1699  END_ADDR DS.W 4
00002042                          1700  
00002042= 45 6E 74 65 72 20 ...   1701  INPUT_MSG   DC.B    'Enter machine code: ',0
00002058                          1702  INPUT       DS.L    1
0000205C= 49 6E 76 61 6C 69 ...   1703  INVALID_MSG DC.B    'Invalid Instruction',CR,LF,0
00002072                          1704  
00002072= 2E 42 20 00             1705  PRNT_B      DC.B    '.B ',0
00002076= 2E 57 20 00             1706  PRNT_W      DC.B    '.W ',0
0000207A= 2E 4C 20 00             1707  PRNT_L      DC.B    '.L ',0
0000207E                          1708  
0000207E= 4E 4F 50 00             1709  PRNT_NOP    DC.B    'NOP',0
00002082= 52 54 53 00             1710  PRNT_RTS    DC.B    'RTS',0
00002086= 4D 4F 56 45 00          1711  PRNT_MOVE   DC.B    'MOVE',0
0000208B= 4D 4F 56 45 41 00       1712  PRNT_MOVEA  DC.B    'MOVEA',0
00002091= 4D 4F 56 45 4D 00       1713  PRNT_MOVEM  DC.B    'MOVEM',0
00002097= 4D 4F 56 45 51 00       1714  PRNT_MOVEQ  DC.B    'MOVEQ',0
0000209D= 4A 53 52 00             1715  PRNT_JSR    DC.B    'JSR',0
000020A1= 42 47 54 00             1716  PRNT_BGT    DC.B    'BGT',0
000020A5= 42 4C 45 00             1717  PRNT_BLE    DC.B    'BLE',0
000020A9= 42 45 51 00             1718  PRNT_BEQ    DC.B    'BEQ',0
000020AD= 42 52 41 00             1719  PRNT_BRA    DC.B    'BRA',0
000020B1= 4E 4F 54 00             1720  PRNT_NOT    DC.B    'NOT',0
000020B5= 4F 52 00                1721  PRNT_OR     DC.B    'OR',0
000020B8= 4C 45 41 00             1722  PRNT_LEA    DC.B    'LEA',0
000020BC= 41 44 44 51 00          1723  PRNT_ADDQ   DC.B    'ADDQ',0
000020C1= 41 44 44 00             1724  PRNT_ADD    DC.B    'ADD',0
000020C5= 41 44 44 41 00          1725  PRNT_ADDA   DC.B    'ADDA',0
000020CA= 41 4E 44 00             1726  PRNT_AND    DC.B    'AND',0
000020CE= 53 55 42 00             1727  PRNT_SUB    DC.B    'SUB',0
000020D2= 41 53 4C 00             1728  PRNT_ASL    DC.B    'ASL',0
000020D6= 41 53 52 00             1729  PRNT_ASR    DC.B    'ASR',0
000020DA= 4C 53 4C 00             1730  PRNT_LSL    DC.B    'LSL',0
000020DE= 4C 53 52 00             1731  PRNT_LSR    DC.B    'LSR',0
000020E2= 52 4F 4C 00             1732  PRNT_ROL    DC.B    'ROL',0
000020E6= 52 4F 52 00             1733  PRNT_ROR    DC.B    'ROR',0
000020EA                          1734  
000020EA= 44 00                   1735  PRNT_D  DC.B    'D',0
000020EC= 41 00                   1736  PRNT_A  DC.B    'A',0
000020EE= 28 41 00                1737  PRNT_AI DC.B    '(A',0
000020F1= 29 00                   1738  PRNT_CL DC.B    ')',0
000020F3= 29 2B 00                1739  PRNT_IN DC.B    ')+',0
000020F6= 2D 28 41 00             1740  PRNT_DC DC.B    '-(A',0
000020FA                          1741  
000020FA= 23 00                   1742  PRNT_Q  DC.B    '#',0
000020FC= 23 24 00                1743  PRNT_DT DC.B    '#$',0
000020FF= 24 00                   1744  PRNT_HX DC.B    '$',0
00002101                          1745  
00002101= 45 52 52 4F 52 3A ...   1746  PRNT_ER DC.B    'ERROR: Unsupported EA Mode',0
0000211C                          1747  
0000211C                          1748  *D3 = original instruction
0000211C                          1749  *D4 = copy of instruction
0000211C                          1750  *D6 = num of bits to shift
0000211C                          1751  
0000211C                          1752      
0000211C                          1753  
0000211C                          1754  DONE
0000211C  43F8 1F2A               1755      LEA DONE_MESSAGE, A1
00002120  4EB8 1E24               1756      JSR     PRINT_BUFF
00002124                          1757      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSDAT_MODE         1D52
ABSL_MODE           1DE6
ABSW_MODE           1DD6
ADDA_L              1930
ADDA_W              191E
ADDFORMAT_DATA_DEST_EA  1C22
ADDFORMAT_EA_DEST_EA  1C50
ADDQ_B              1514
ADDQ_DATA           1532
ADDQ_L              1528
ADDQ_W              151E
ADD_B               18E8
ADD_B_D             18B2
ADD_L               190C
ADD_L_D             18D6
ADD_W               18FA
ADD_W_D             18C4
ANDEC_MODE          1D42
AND_B               181E
AND_B_D             17F4
AND_L               183A
AND_L_D             1810
AND_W               182C
AND_W_D             1802
ANINC_MODE          1D32
ANIND_MODE          1D22
AN_MODE             1D12
ASK_REPEAT          1FAA
A_MEM               19C6
A_REG               199E
A_SIZE              19C2
BYTE                1DF6
CLEAR_REG           11E8
COMMA               1FF6
CONV_NUM            107C
CONV_STRING         1038
CR                  D
DATA                1FE0
DATA_MODE           1DB2
DISP                15D6
DISPLAY_INVALID_HEX  105E
DISPLAY_INVALID_INSTRUCTION  1154
DISPLAY_INVALID_ORDER  10C0
DISP_16             1604
DISP_32             161A
DN_MODE             1D02
DONE                211C
DONE_END_CONV       10AE
DONE_MESSAGE        1F2A
DONE_START_CONV     109C
DO_SHIFT_EA         1B64
EA_DEST             1C98
EA_SRC              1C80
EA_SUB              1CC4
END_ADDR            203A
END_ONE             1D92
END_TWO             1DA2
ENTER_MESSAGE       1F46
FIND_OP             124C
FINISH              1E22
GET_SHFT_SIZE       1B06
GOOD_BAD_FLAG       2030
INPUT               2058
INPUT_MSG           2042
INSTRUCTION_ADDR    1FFA
INSTRUCTION_ADDR_MESSAGE  1FFC
INVALID_HEX         1EF8
INVALID_HEX_VAL     1FEC
INVALID_MEM_ADDR    1FDE
INVALID_MSG         205C
INVALID_OP          1BCA
INVALID_ORDER       1F76
IS_ADD              1896
IS_ADDA             18A4
IS_ASL              19FC
IS_ASR              19E6
IS_BEQ              15C2
IS_BGT              159A
IS_BLE              15AE
IS_BRA              1586
IS_LSL              1A70
IS_LSR              1A5A
IS_MOVE             1286
IS_MOVEA            1296
IS_MOVEM            1488
IS_NOT              1408
IS_OR               164E
IS_ROL              1AE4
IS_ROR              1ACE
IS_SUB              16EC
LF                  A
LINE_BREAK          1FEE
LONG                1E12
L_MEM               1A3A
L_REG               1A12
L_SIZE              1A36
MODE_P              1CCE
MOVEM_L             14CE
MOVEM_W             14C8
MOVE_B              12C8
MOVE_L              1308
MOVE_SIZE           12A2
MOVE_W              12E8
NEEDS_NEW_SCREEN    1180
NOP                 121C
NOT_B               1446
NOT_EA              1460
NOT_L               145A
NOT_W               1450
OPCODE              200E
OPCODE_MESSAGE      2010
OPERAND1            2018
OPERAND1_MESSAGE    201A
OPERAND2            2024
OPERAND2_MESSAGE    2026
OP_00               1274
OP_01               1328
OP_0100             13A4
OP_01001            1468
OP_0101             14D4
OP_0110             1558
OP_0111             1350
OP_10               1630
OP_11               1786
OP_1100             17AA
OP_1101             1848
OP_1110             1942
OR_B                16C2
OR_B_D              1698
OR_L                16DE
OR_L_D              16B4
OR_W                16D0
OR_W_D              16A6
PBUFF               900
PRINT_B             1B94
PRINT_BUFF          1E24
PRINT_B_SHIFT       1B28
PRINT_HEXBUFF       1E30
PRINT_HEXBUFF_LP    1E42
PRINT_HEXBUFF_NOZERO  1E7A
PRINT_HEXBUFF_SKIP  1E64
PRINT_HEXBUFF_YESZERO  1E74
PRINT_INSTRUCTIONS  10E4
PRINT_L             1BB8
PRINT_L_SHIFT       1B50
PRINT_W             1BA6
PRINT_W_SHIFT       1B3C
PRNT_A              20EC
PRNT_ADD            20C1
PRNT_ADDA           20C5
PRNT_ADDQ           20BC
PRNT_AI             20EE
PRNT_AND            20CA
PRNT_ASL            20D2
PRNT_ASR            20D6
PRNT_B              2072
PRNT_BEQ            20A9
PRNT_BGT            20A1
PRNT_BLE            20A5
PRNT_BRA            20AD
PRNT_CL             20F1
PRNT_D              20EA
PRNT_DC             20F6
PRNT_DT             20FC
PRNT_ER             2101
PRNT_HX             20FF
PRNT_IN             20F3
PRNT_JSR            209D
PRNT_L              207A
PRNT_LEA            20B8
PRNT_LSL            20DA
PRNT_LSR            20DE
PRNT_MOVE           2086
PRNT_MOVEA          208B
PRNT_MOVEM          2091
PRNT_MOVEQ          2097
PRNT_NOP            207E
PRNT_NOT            20B1
PRNT_OR             20B5
PRNT_Q              20FA
PRNT_ROL            20E2
PRNT_ROR            20E6
PRNT_RTS            2082
PRNT_SUB            20CE
PRNT_W              2076
PROMPT_END          1EB1
PROMPT_FOR_END      101C
PROMPT_FOR_START    1000
PROMPT_START        1E82
PROMPT_USER_FOR_ENTER  1198
REACHED_END         11BA
REG                 1974
REGSHIFTFORMAT_EA   1BD0
REG_EA              1B76
REG_P               1D6E
RET_PBUFF           1E80
RGHT_LFT            1AFA
RTS                 1234
R_MEM               1AAE
R_REG               1A86
R_SIZE              1AAA
SHIFT_EA_DONE       1B92
SPACE               1FF2
START               1000
START_ADDR          2032
START_OP            121C
SUB_B               175C
SUB_B_D             1732
SUB_L               1778
SUB_L_D             174E
SUB_W               176A
SUB_W_D             1740
S_EIGHT             1C14
S_IMM               1BF6
UNSUPP_MODE         1E1E
WORD                1E06
