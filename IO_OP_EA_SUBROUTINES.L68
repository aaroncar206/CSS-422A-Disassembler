00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/9/2021 18:20:08

00000000                             1  *-----------------------------------------------------------
00000000  =0000000D                  2  CR EQU $0D
00000000  =0000000A                  3  LF EQU $0A
00000000  =00000900                  4  PBUFF EQU $900
00000000                             5  
00000000                             6  
00000000                             7  *----- PRECONDITIONS ------*
00000000                             8  * - Instruction addresses must be properly formatted hex values
00000000                             9  * - Opcode must be properly formatted hex values ready to be read in memory, else outputted as DATA.
00000000                            10  * - Operands/EA fields must be be properly formatted within opcode and supported, else outputted as DATA.
00000000                            11  * - D7: Established as general good/bad flag to know if we should print a line (0 = good, 1 = bad)
00000000                            12  
00000000                            13  *---- POSTCONDITIONS -----*
00000000                            14  * - Output memory words to console in format (MEM LOCATION | OPCODE / DATA | OPERANDS / HEX VALUE OF WORD)
00000000                            15  * - Outputs 25 lines at a time, using ENTER key to continue until given range is read.
00000000                            16  * - Prompts the user to either decode another memory range, or terminate the program.
00000000                            17  
00001000                            18      ORG    $1000
00001000                            19  START:                  ; first instruction of program
00001000  E12D                      20      LSL.B  D0,D5
00001002                            21  
00001002                            22  * --Prompt user for starting address--
00001002                            23  PROMPT_FOR_START
00001002  43F9 00001F24             24      LEA PROMPT_START,A1 
00001008  103C 000E                 25      MOVE.B #14,D0 
0000100C  4E4F                      26      TRAP #15 
0000100E  227C 00000000             27      MOVEA.L #0,A1
00001014                            28      
00001014  303C 0002                 29      MOVE.W #2,D0 
00001018  4E4F                      30      TRAP #15 Read a string from the keyboard into D1.L
0000101A  6000 001E                 31      BRA CONV_STRING
0000101E                            32  
0000101E                            33  
0000101E                            34  * --Prompt user for ending address--
0000101E                            35  PROMPT_FOR_END
0000101E  43F9 00001F62             36      LEA PROMPT_END,A1 
00001024  103C 000E                 37      MOVE.B #14,D0 
00001028  4E4F                      38      TRAP #15 
0000102A  227C 00000000             39      MOVEA.L #0,A1
00001030                            40      
00001030  303C 0002                 41      MOVE.W #2,D0 
00001034  4E4F                      42      TRAP #15 Read a string from the keyboard into D1.L
00001036  6000 0002                 43      BRA CONV_STRING
0000103A                            44       
0000103A                            45      
0000103A                            46  *-- Converts ASCII string to Hex equivalent --  
0000103A                            47  CONV_STRING
0000103A  1019                      48      MOVE.B (A1)+,D0 Get individual char in input string
0000103C  B03C 0046                 49      CMP.B #$46,D0 Check if char is more than F, the last valid hex value
00001040  6E00 001E                 50      BGT DISPLAY_INVALID_HEX 
00001044  B03C 0041                 51      CMP.B #$41,D0 Check if char is a number or letter
00001048  6D00 0034                 52      BLT CONV_NUM
0000104C                            53      
0000104C                            54      **--Convert ASCII char to hex equivalent --
0000104C  0400 0037                 55      SUB.B #$37, D0 
00001050  D680                      56      ADD.L D0,D3
00001052  5341                      57      SUBI #1,D1 
00001054  B23C 0000                 58      CMP.B #0,D1
00001058  6700 0044                 59      BEQ DONE_START_CONV
0000105C  E98B                      60      LSL.L #4,D3
0000105E  60DA                      61      BRA CONV_STRING
00001060                            62  
00001060                            63  
00001060                            64  * --Display invalid hex error upon invalid input--
00001060                            65  DISPLAY_INVALID_HEX
00001060  43F9 00001FA8             66      LEA INVALID_HEX,A1
00001066  103C 000E                 67      MOVE.B #14,D0 
0000106A  4E4F                      68      TRAP #15 
0000106C                            69      
0000106C  43F9 0000209E             70      LEA LINE_BREAK,A1
00001072  103C 000E                 71      MOVE.B #14,D0 
00001076  4E4F                      72      TRAP #15 
00001078  4243                      73      CLR D3
0000107A  4244                      74      CLR D4
0000107C                            75  
0000107C  6084                      76      BRA PROMPT_FOR_START
0000107E                            77  
0000107E                            78  
0000107E                            79  * --Converts ASCII num char into hex equivalent--   
0000107E                            80  CONV_NUM 
0000107E  B03C 0030                 81      CMP.B #$30,D0 
00001082  6DDC                      82      BLT DISPLAY_INVALID_HEX *check if char is less than 30, first valid hex num
00001084  B03C 0039                 83      CMP.B #$39,D0
00001088  6ED6                      84      BGT DISPLAY_INVALID_HEX *check if char is less than 30, last valid hex num
0000108A  0400 0030                 85      SUB.B #$30,D0
0000108E  D680                      86      ADD.L D0,D3
00001090  5341                      87      SUBI #1,D1
00001092  B23C 0000                 88      CMP.B #0,D1 
00001096  6700 0006                 89      BEQ DONE_START_CONV
0000109A  E98B                      90      LSL.L #4,D3
0000109C  609C                      91      BRA CONV_STRING
0000109E                            92      
0000109E                            93  
0000109E                            94  * --Move converted starting address into A3--
0000109E                            95  DONE_START_CONV
0000109E  B87C 0001                 96     CMP #1,D4
000010A2  6700 000C                 97     BEQ DONE_END_CONV
000010A6  5244                      98     ADDI #1,D4
000010A8                            99     
000010A8  2643                     100     MOVEA.L D3,A3
000010AA  4243                     101     CLR D3
000010AC                           102     
000010AC  6000 FF70                103     BRA PROMPT_FOR_END
000010B0                           104    
000010B0                           105  * --Move converted ending address into A4 and prepare for opcodes--
000010B0                           106  DONE_END_CONV
000010B0  4244                     107      CLR.W D4
000010B2  2843                     108      MOVEA.L D3,A4
000010B4  4243                     109      CLR D3
000010B6  4244                     110      CLR D4
000010B8                           111      
000010B8  B9CB                     112      CMPA.L A3,A4 check if starting address is less than ending 
000010BA  6B00 0006                113      BMI DISPLAY_INVALID_ORDER
000010BE                           114      
000010BE  6000 0026                115      BRA PRINT_INSTRUCTIONS
000010C2                           116      *-- op code person takes over from here--
000010C2                           117      *-- derive opcodes starting from start address --*
000010C2                           118      
000010C2                           119  DISPLAY_INVALID_ORDER
000010C2  43F9 00002026            120      LEA INVALID_ORDER, A1
000010C8  103C 000E                121      MOVE.B #14,D0 
000010CC  4E4F                     122      TRAP #15 
000010CE                           123      
000010CE  43F9 0000209E            124      LEA LINE_BREAK,A1
000010D4  103C 000E                125      MOVE.B #14,D0 
000010D8  4E4F                     126      TRAP #15 
000010DA  4243                     127      CLR D3
000010DC  5244                     128      ADDI #1,D4 force to jump straight to DONE_END_CONV when back in DONE_START_CONV
000010DE  387C 0000                129      MOVE.W #$0000,A4 clear A4 for reprocessing
000010E2                           130      
000010E2  6000 FF3A                131      BRA PROMPT_FOR_END
000010E6                           132         
000010E6                           133  *-- Use print buffer pointer to print out instructions. Set good/bad flag (D7) upon 
000010E6                           134  *-- invalid instruction and report back to here. A3 is opcode pointer. 
000010E6                           135  PRINT_INSTRUCTIONS  
000010E6  4EB9 00001182            136      JSR NEEDS_NEW_SCREEN
000010EC                           137      
000010EC  B9CB                     138      CMPA.L A3,A4 *-- check if at end address 
000010EE  6F00 00D8                139      BLE REACHED_END
000010F2                           140   
000010F2  320B                     141      MOVE.W A3, D1 *-- print instruction address
000010F4  143C 0010                142      MOVE.B #16,D2
000010F8  103C 000F                143      MOVE.B #15,D0 
000010FC  4E4F                     144      TRAP #15 
000010FE                           145      
000010FE  43F9 000020A2            146      LEA SPACE, A1
00001104  103C 000E                147      MOVE.B #14,D0 
00001108  4E4F                     148      TRAP #15 
0000110A                           149          
0000110A  1E3C 0000                150      MOVE.B #0,D7        * Invalid flag is set to zero
0000110E  2C7C 00000900            151      MOVEA.L #PBUFF,A6   * Printbuff is A6
00001114                           152  
00001114  361B                     153      MOVE.W (A3)+, D3
00001116                           154      
00001116                           155      ** SAVE DATA REGISTERS (Except D7)
00001116  48E7 FE00                156      MOVEM.L D0-D6,-(SP)
0000111A                           157      
0000111A  4EB9 0000122A            158      JSR START_OP
00001120                           159      
00001120  4CDF 007F                160      MOVEM.L (SP)+,D0-D6
00001124                           161      ** LOAD DATA REGISTERS (Except D7)
00001124                           162  
00001124  BE7C 0001                163      CMP #1,D7
00001128  6700 002C                164      BEQ DISPLAY_INVALID_INSTRUCTION
0000112C                           165  
0000112C  1CBC 0000                166      MOVE.B #0, (A6)     * Add terminator to print buffer
00001130  227C 00000900            167      MOVEA.L #PBUFF,A1
00001136  103C 000E                168      MOVE.B #14, D0
0000113A  4E4F                     169      TRAP #15            * Print print buffer
0000113C                           170      
0000113C  43F9 000020A2            171      LEA SPACE, A1
00001142  103C 000E                172      MOVE.B #14,D0 
00001146  4E4F                     173      TRAP #15 
00001148                           174      
00001148  43F9 0000209E            175      LEA LINE_BREAK,A1
0000114E  103C 000E                176      MOVE.B #14,D0 
00001152  4E4F                     177      TRAP #15
00001154                           178      
00001154  6090                     179      BRA PRINT_INSTRUCTIONS
00001156                           180      
00001156                           181  *Display XXXXXXXX DATA YYYY if memory cannot be decoded to legitimate instruction   
00001156                           182  DISPLAY_INVALID_INSTRUCTION 
00001156                           183  
00001156  43F9 00002090            184      LEA DATA, A1
0000115C  103C 000E                185      MOVE.B #14,D0 
00001160  4E4F                     186      TRAP #15 
00001162                           187  
00001162  143C 0010                188      MOVE.B #16, D2
00001166                           189      
00001166  554B                     190      SUBA.W  #$0002,A3 * Offset to go back to bad data opcode word
00001168  3213                     191      MOVE.W (A3),D1 
0000116A  544B                     192      ADDA.W  #$0002,A3 * Go back to correct current position
0000116C                           193      
0000116C                           194      
0000116C  103C 000F                195      MOVE.B #15, D0
00001170  4E4F                     196      TRAP #15            * Print print buffer
00001172                           197      
00001172  43F9 0000209E            198      LEA LINE_BREAK,A1
00001178  103C 000E                199      MOVE.B #14,D0 
0000117C  4E4F                     200      TRAP #15
0000117E                           201  
0000117E  6000 FF66                202      BRA PRINT_INSTRUCTIONS
00001182                           203           
00001182                           204  *--Check if output reaches the end of screen 
00001182                           205  NEEDS_NEW_SCREEN
00001182  5244                     206      ADD      #1,D4                   
00001184  B87C 0019                207      CMP      #25,D4 check if output reaches 25 lines                                                                                                
00001188  6700 0010                208      BEQ      PROMPT_USER_FOR_ENTER
0000118C  43F9 000020A2            209      LEA      SPACE,A1           
00001192  303C 000E                210      MOVE     #14,D0                 
00001196  4E4F                     211      TRAP     #15                        
00001198  4E75                     212      RTS 
0000119A                           213      
0000119A                           214  *--Prompt user to press enter when display reaches line limit    
0000119A                           215  PROMPT_USER_FOR_ENTER
0000119A  43F9 000020A2            216      LEA    SPACE,A1 
000011A0  103C 000D                217      MOVE.B #13,D0   
000011A4  4E4F                     218      TRAP   #15
000011A6                           219  
000011A6  43F9 00001FF6            220      LEA ENTER_MESSAGE, A1 *Prompt user to press enter to display new screen
000011AC  103C 000E                221      MOVE.B #14, D0
000011B0  4E4F                     222      TRAP #15
000011B2                           223      
000011B2  4244                     224      CLR      D4 
000011B4  103C 0005                225      MOVE.B   #5,D0 read enter from keyboard         
000011B8  4E4F                     226      TRAP     #15        
000011BA                           227  
000011BA  43F9 000020A2            228      LEA SPACE, A1 fixed alignment issues
000011C0  103C 000E                229      MOVE.B #14,D0 
000011C4  4E4F                     230      TRAP #15    
000011C6  4E75                     231      RTS 
000011C8                           232  
000011C8                           233  
000011C8                           234  *--Ask if user wants to disassemble more memory--*
000011C8                           235  REACHED_END
000011C8  43F9 000020A2            236      LEA SPACE, A1
000011CE  103C 000E                237      MOVE.B #14,D0 
000011D2  4E4F                     238      TRAP #15 
000011D4                           239      
000011D4  43F9 0000205A            240      LEA ASK_REPEAT,A1 
000011DA  103C 000E                241      MOVE.B #14,D0 
000011DE  4E4F                     242      TRAP #15 
000011E0                           243      
000011E0  103C 0004                244      MOVE.B #4,D0 
000011E4  4E4F                     245      TRAP #15 Read num from the keyboard into D1.L
000011E6                           246      
000011E6  0C01 0000                247      CMPI.B #0, D1 0 = yes
000011EA  6700 000A                248      BEQ CLEAR_REG
000011EE                           249      
000011EE  0C01 0001                250      CMPI.B #1,D1 1 = no
000011F2  6700 0FE3                251      BEQ DONE
000011F6                           252      
000011F6                           253  *--Clear all registers for reprocessing--*
000011F6                           254  CLEAR_REG 
000011F6  4241                     255      CLR D1
000011F8  4242                     256      CLR D2
000011FA  4243                     257      CLR D3
000011FC  4244                     258      CLR D4
000011FE  4245                     259      CLR D5
00001200  4246                     260      CLR D6
00001202                           261      
00001202  207C 00000000            262      MOVE.L #00000000,A0
00001208  227C 00000000            263      MOVE.L #00000000,A1
0000120E  267C 00000000            264      MOVE.L #00000000,A3
00001214  287C 00000000            265      MOVE.L #00000000,A4
0000121A  2A7C 00000000            266      MOVE.L #00000000,A5
00001220  2C7C 00000000            267      MOVE.L #00000000,A6
00001226                           268      
00001226  6000 FDDA                269      BRA PROMPT_FOR_START
0000122A                           270  
0000122A                           271  START_OP
0000122A                           272  
0000122A                           273  NOP
0000122A  383C 4E71                274      MOVE.W  #$4E71,D4
0000122E  B644                     275      CMP.W   D4,D3
00001230  6600 0010                276      BNE     RTS
00001234                           277      *Print instruction to output
00001234  43F9 0000212E            278      LEA     PRNT_NOP,A1
0000123A  4EB9 00001EC6            279      JSR PRINT_BUFF
00001240  4E75                     280      RTS *Return to I/O subroutine to find next instruction
00001242                           281  RTS
00001242  383C 4E75                282      MOVE.W  #$4E75,D4
00001246  B644                     283      CMP.W   D4,D3
00001248  6600 0010                284      BNE     FIND_OP
0000124C                           285      *Print instruction
0000124C  43F9 00002132            286      LEA     PRNT_RTS,A1
00001252  4EB9 00001EC6            287      JSR PRINT_BUFF
00001258  4E75                     288      RTS
0000125A                           289  
0000125A                           290  FIND_OP *determine op code based on first 2 bits
0000125A  1C3C 000E                291      MOVE.B  #14,D6
0000125E  3803                     292      MOVE.W  D3,D4
00001260  EC6C                     293      LSR.W   D6,D4
00001262                           294      
00001262  B83C 0000                295      CMP.B   #%00,D4 *MOVE,MOVEA
00001266  6700 001A                296      BEQ     OP_00
0000126A                           297      
0000126A  B83C 0001                298      CMP.B   #%01,D4 *MOVEQ, MOVEM, ADDQ, LEA, NOT, BGT/BLE/BEQ, JSR, BRA
0000126E  6700 00C6                299      BEQ     OP_01
00001272                           300      
00001272  B83C 0002                301      CMP.B   #%10,D4 *OR,SUB
00001276  6700 03B6                302      BEQ     OP_10
0000127A                           303      
0000127A  B83C 0003                304      CMP.B   #%11,D4 *ADD,AND,LSL,LSR,ROL,ROR,ASL,ASR
0000127E  6700 0504                305      BEQ     OP_11
00001282                           306      
00001282                           307  OP_00 *Determine if MOVE or MOVEA op code
00001282                           308  *Isolate bits 6,7,8
00001282  3803                     309      MOVE.W  D3,D4
00001284  EF4C                     310      LSL.W   #7,D4   *Remove first 7 bits
00001286  1C3C 000D                311      MOVE.B  #13,D6
0000128A  EC6C                     312      LSR.W   D6,D4   *Remove last 6 bits
0000128C  B87C 0001                313      CMP.W   #%001,D4
00001290  6700 0012                314      BEQ     IS_MOVEA
00001294                           315  IS_MOVE
00001294                           316      *Print MOVE
00001294  43F9 00002136            317      LEA     PRNT_MOVE,A1
0000129A  4EB9 00001EC6            318      JSR PRINT_BUFF
000012A0                           319  
000012A0  6000 000E                320      BRA     MOVE_SIZE
000012A4                           321  
000012A4                           322  IS_MOVEA
000012A4                           323      *Print MOVEA
000012A4  43F9 0000213B            324      LEA     PRNT_MOVEA,A1
000012AA  4EB9 00001EC6            325      JSR PRINT_BUFF
000012B0                           326  MOVE_SIZE
000012B0  3803                     327      MOVE.W  D3,D4
000012B2  1C3C 000E                328      MOVE.B  #14,D6
000012B6  E54C                     329      LSL.W   #2,D4   *Remove first 2 bits
000012B8  EC6C                     330      LSR.W   D6,D4   *Remove last 12 bits to find size code
000012BA                           331      
000012BA  B83C 0001                332      CMP.B   #%01,D4
000012BE  6700 0016                333      BEQ     MOVE_B
000012C2                           334      
000012C2  B83C 0003                335      CMP.B   #%11,D4
000012C6  6700 002E                336      BEQ     MOVE_W
000012CA                           337      
000012CA  B83C 0002                338      CMP.B   #%10,D4
000012CE  6700 0046                339      BEQ     MOVE_L
000012D2  6000 093C                340      BRA     INVALID_OP   
000012D6                           341  MOVE_B    
000012D6                           342      *Print .B (byte)
000012D6  4EB9 00001BDA            343      JSR PRINT_B
000012DC                           344      *Proceed to EA Subroutine
000012DC  4EB9 00001D20            345      JSR EA_SRC
000012E2  43F9 000020A6            346      LEA COMMA,A1
000012E8  4EB9 00001EC6            347      JSR PRINT_BUFF
000012EE                           348  
000012EE  4EB9 00001D38            349      JSR EA_DEST
000012F4                           350      
000012F4  4E75                     351      RTS * Done printing move
000012F6                           352  MOVE_W    
000012F6                           353      *Print .W (word)
000012F6  4EB9 00001BEC            354      JSR PRINT_W
000012FC                           355      *Proceed to EA Subroutine
000012FC  4EB9 00001D20            356      JSR EA_SRC 
00001302  43F9 000020A6            357      LEA COMMA,A1
00001308  4EB9 00001EC6            358      JSR PRINT_BUFF
0000130E  4EB9 00001D38            359      JSR EA_DEST
00001314                           360  
00001314  4E75                     361      RTS
00001316                           362  MOVE_L
00001316                           363      *Print .L (long)
00001316  4EB9 00001BFE            364      JSR PRINT_L
0000131C                           365      *Proceed to EA Subroutine
0000131C  4EB9 00001D20            366      JSR EA_SRC
00001322  43F9 000020A6            367      LEA COMMA,A1
00001328  4EB9 00001EC6            368      JSR PRINT_BUFF
0000132E  4EB9 00001D38            369      JSR EA_DEST
00001334                           370  
00001334  4E75                     371      RTS
00001336                           372  
00001336                           373  OP_01 *MOVEQ, MOVEM, ADDQ, LEA, NOT, BGT/BLE/BEQ, JSR, BRA
00001336  3803                     374      MOVE.W  D3,D4
00001338  1C3C 000C                375      MOVE.B  #12,D6
0000133C  EC6C                     376      LSR.W   D6,D4   *get first 4 bits
0000133E                           377      
0000133E  B83C 0007                378      CMP.B   #%0111,D4   *MOVEQ
00001342  6700 001A                379      BEQ     OP_0111
00001346  B83C 0004                380      CMP.B   #%0100,D4   *MOVEM, LEA, NOT, JSR
0000134A  6700 0066                381      BEQ     OP_0100
0000134E  B83C 0005                382      CMP.B   #%0101,D4   *ADDQ
00001352  6700 0172                383      BEQ     OP_0101
00001356  B83C 0006                384      CMP.B   #%0110,D4   *Bcc, BRA
0000135A  6700 01FA                385      BEQ     OP_0110
0000135E                           386      
0000135E                           387  OP_0111 *MOVEQ
0000135E                           388      *Check bit 8 to validate
0000135E  2803                     389      MOVE.L  D3,D4
00001360  EF4C                     390      LSL.W   #7,D4
00001362  1C3C 000F                391      MOVE.B  #15,D6
00001366  EC6C                     392      LSR.W   D6,D4
00001368  B83C 0000                393      CMP.B   #%0,D4
0000136C  6600 08A2                394      BNE     INVALID_OP
00001370                           395  
00001370                           396      *Print MOVEQ
00001370  43F9 00002147            397      LEA     PRNT_MOVEQ,A1
00001376  4EB9 00001EC6            398      JSR PRINT_BUFF
0000137C                           399      
0000137C  2803                     400      MOVE.L  D3,D4
0000137E  E14C                     401      LSL.W   #8,D4
00001380  E04C                     402      LSR.W   #8,D4
00001382                           403      *Print data
00001382                           404      
00001382                           405      ** NOW PRINTS #$ in front
00001382                           406      
00001382  43F9 000021B7            407      LEA     PRNT_DT,A1
00001388  4EB9 00001EC6            408      JSR PRINT_BUFF
0000138E                           409      
0000138E  2204                     410      MOVE.L  D4,D1
00001390  4EB9 00001ED2            411      JSR     PRINT_HEXBUFF
00001396                           412      
00001396                           413      *** Move reg. bits into a bitfield for EA
00001396  3803                     414      MOVE.W  D3,D4
00001398  C87C 0E00                415      AND.W   #%0000111000000000,D4
0000139C  E64C                     416      LSR.W   #3,D4
0000139E  EC4C                     417      LSR.W   #6,D4
000013A0  1C04                     418      MOVE.B  D4,D6
000013A2                           419      
000013A2  48E7 FE00                420      MOVEM.L D0-D6,-(SP) * D0-D6
000013A6                           421      
000013A6  4EB9 00001D64            422      JSR     EA_SUB
000013AC                           423      
000013AC  4CDF 007F                424      MOVEM.L (SP)+,D0-D6 * D0-D6
000013B0                           425     
000013B0  4E75                     426      RTS
000013B2                           427       
000013B2                           428     
000013B2                           429  OP_0100 *MOVEM, LEA, NOT, JSR
000013B2                           430      *Check if LEA (Now before MOVEM/JSR Check)
000013B2  2803                     431      MOVE.L  D3,D4
000013B4  EF4C                     432      LSL.W   #7,D4
000013B6  1C3C 000D                433      MOVE.B  #13,D6
000013BA  EC6C                     434      LSR.W   D6,D4
000013BC  B83C 0007                435      CMP.B   #%111,D4    *Check bits 8,7,6
000013C0  6700 0016                436      BEQ     IS_LEA
000013C4                           437  
000013C4  2803                     438      MOVE.L  D3,D4
000013C6  1C3C 000B                439      MOVE.B  #11,D6
000013CA  EC6C                     440      LSR.W   D6,D4
000013CC  B83C 0009                441      CMP.B   #%01001,D4  *MOVEM or JSR
000013D0  6700 00A8                442      BEQ     OP_01001
000013D4                           443      
000013D4  6000 0044                444      BRA     IS_NOT
000013D8                           445      
000013D8                           446      
000013D8                           447  IS_LEA
000013D8  43F9 00002172            448      LEA     PRNT_LEA,A1
000013DE  4EB9 00001EC6            449      JSR     PRINT_BUFF
000013E4                           450      * HANDLE OPERANDS
000013E4  1A3C 0003                451      MOVE.B  #3,D5 * Size operation is always longword for LEA, so set here.
000013E8                           452      
000013E8  4EB9 00001D20            453      JSR EA_SRC * Handle the source EA
000013EE                           454      
000013EE  2803                     455      MOVE.L  D3,D4 
000013F0  C87C 0E00                456      AND.W   #%0000111000000000,D4 * Isolate Register #
000013F4  E64C                     457      LSR.W   #3,D4
000013F6  EC4C                     458      LSR.W   #6,D4
000013F8  1C04                     459      MOVE.B  D4,D6   * Prime D6 register
000013FA  8C3C 0008                460      OR.B    #%00001000,D6 * Add the An mode to D6
000013FE                           461      
000013FE  48E7 FE00                462      MOVEM.L D0-D6,-(SP) * D0-D6
00001402                           463      
00001402  43F9 000020A6            464      LEA COMMA,A1
00001408  4EB9 00001EC6            465      JSR PRINT_BUFF
0000140E                           466  
0000140E  4EB9 00001D64            467      JSR     EA_SUB * Handle the destination EA (last 6 bits of D6)
00001414                           468      
00001414  4CDF 007F                469      MOVEM.L (SP)+,D0-D6 * D0-D6
00001418                           470          
00001418  4E75                     471      RTS * Return to IO
0000141A                           472  
0000141A                           473  
0000141A                           474  
0000141A                           475  IS_NOT    
0000141A  2803                     476      MOVE.L  D3,D4
0000141C  E04C                     477      LSR.W   #8,D4
0000141E  B87C 0046                478      CMP.W   #%01000110,D4
00001422  6600 07EC                479      BNE     INVALID_OP
00001426                           480      
00001426  43F9 0000216B            481      LEA     PRNT_NOT,A1
0000142C  4EB9 00001EC6            482      JSR PRINT_BUFF
00001432                           483      
00001432  2803                     484      MOVE.L  D3,D4
00001434  E14C                     485      LSL.W   #8,D4
00001436  1C3C 000E                486      MOVE.B  #14,D6
0000143A  EC6C                     487      LSR.W   D6,D4 
0000143C  B83C 0000                488      CMP.B   #%00,D4
00001440  6700 0016                489      BEQ     NOT_B
00001444  B83C 0001                490      CMP.B   #%01,D4
00001448  6700 0018                491      BEQ     NOT_W
0000144C  B83C 0002                492      CMP.B   #%10,D4
00001450  6700 001A                493      BEQ     NOT_L
00001454                           494  
00001454  6000 07BA                495      BRA     INVALID_OP    
00001458                           496  NOT_B
00001458  4EB9 00001BDA            497      JSR PRINT_B
0000145E                           498      *Proceed to EA Subroutine  
0000145E  6000 0012                499      BRA NOT_EA  
00001462                           500  NOT_W
00001462  4EB9 00001BEC            501      JSR PRINT_W
00001468                           502      *Proceed to EA Subroutine
00001468  6000 0008                503      BRA NOT_EA    
0000146C                           504  NOT_L
0000146C  4EB9 00001BFE            505      JSR PRINT_L 
00001472                           506      *Proceed to EA Subroutine
00001472                           507      
00001472                           508  NOT_EA
00001472                           509      
00001472  4EB9 00001D20            510      JSR EA_SRC
00001478  4E75                     511      RTS *** Return to IO ***
0000147A                           512      
0000147A                           513      
0000147A                           514  OP_01001    
0000147A  2803                     515      MOVE.L  D3,D4
0000147C  EC4C                     516      LSR.W   #6,D4
0000147E  B87C 013A                517      CMP.W   #%0100111010,D4 *Check if JSR
00001482  6600 0016                518      BNE     IS_MOVEM
00001486  43F9 0000214E            519      LEA     PRNT_JSR,A1
0000148C  4EB9 00001EC6            520      JSR     PRINT_BUFF
00001492  4EB9 00001D20            521      JSR     EA_SRC
00001498  4E75                     522      RTS     *Proceed to EA Subroutine    
0000149A                           523  IS_MOVEM
0000149A                           524      *Check bits 9,8,7 to validate   
0000149A  2803                     525      MOVE.L  D3,D4
0000149C  ED4C                     526      LSL.W   #6,D4
0000149E  1C3C 000D                527      MOVE.B  #13,D6
000014A2  EC6C                     528      LSR.W   D6,D4
000014A4  B83C 0001                529      CMP.B   #%001,D4
000014A8  6600 0766                530      BNE     INVALID_OP
000014AC                           531      
000014AC  43F9 00002141            532      LEA     PRNT_MOVEM,A1
000014B2  4EB9 00001EC6            533      JSR PRINT_BUFF
000014B8  4E75                     534      RTS
000014BA                           535      
000014BA                           536  *    MOVE.L  D3,D4
000014BA                           537  *    MOVE.B  #9,D6
000014BA                           538  *    LSL.W   D6,D4
000014BA                           539  *    MOVE.B  #15,D6
000014BA                           540  *    LSR.W   D6,D4
000014BA                           541      
000014BA                           542  *    CMP.B   #0,D4
000014BA                           543  *    BEQ     MOVEM_W
000014BA                           544  *    CMP.B   #1,D4
000014BA                           545  *    BEQ     MOVEM_L    
000014BA                           546  *    BRA     INVALID_OP  
000014BA                           547  MOVEM_W
000014BA  4EB9 00001BEC            548      JSR PRINT_W
000014C0                           549      *Proceed to EA Subroutine    
000014C0                           550  MOVEM_L
000014C0  4EB9 00001BFE            551      JSR PRINT_L
000014C6                           552      *Proceed to EA Subroutine    
000014C6                           553  OP_0101 *ADDQ
000014C6                           554      *Check bit 8 to validate
000014C6  2803                     555      MOVE.L  D3,D4
000014C8  EF4C                     556      LSL.W   #7,D4
000014CA  1C3C 000F                557      MOVE.B  #15,D6
000014CE  EC6C                     558      LSR.W   D6,D4
000014D0  B83C 0000                559      CMP.B   #%0,D4
000014D4  6600 073A                560      BNE     INVALID_OP
000014D8                           561  
000014D8                           562      *Print ADDQ
000014D8  43F9 00002177            563      LEA     PRNT_ADDQ,A1
000014DE  4EB9 00001EC6            564      JSR     PRINT_BUFF
000014E4                           565      
000014E4  2803                     566      MOVE.L  D3,D4
000014E6  E14C                     567      LSL.W   #8,D4   *Remove first 8 bits
000014E8  1C3C 000E                568      MOVE.B  #14,D6
000014EC  EC6C                     569      LSR.W   D6,D4   *and last 6 bits to get size
000014EE                           570      
000014EE  B83C 0000                571      CMP.B   #%00,D4
000014F2  6700 0012                572      BEQ     ADDQ_B
000014F6  B83C 0001                573      CMP.B   #%01,D4
000014FA  6700 0014                574      BEQ     ADDQ_W
000014FE  B83C 0002                575      CMP.B   #%10,D4
00001502  6700 0016                576      BEQ     ADDQ_L
00001506                           577      
00001506                           578  ADDQ_B    
00001506                           579      *Print .B
00001506  4EB9 00001BDA            580      JSR PRINT_B
0000150C  6000 0016                581      BRA     ADDQ_DATA
00001510                           582      
00001510                           583  ADDQ_W     
00001510                           584      *Print .W
00001510  4EB9 00001BEC            585      JSR PRINT_W
00001516  6000 000C                586      BRA     ADDQ_DATA
0000151A                           587      
0000151A                           588  ADDQ_L     
0000151A                           589      *Print .L
0000151A  4EB9 00001BFE            590      JSR PRINT_L
00001520  6000 0002                591      BRA     ADDQ_DATA
00001524                           592  ADDQ_DATA    
00001524  2803                     593      MOVE.L  D3,D4
00001526  E94C                     594      LSL.W   #4,D4   *Remove first 4 bits
00001528  1C3C 000D                595      MOVE.B  #13,D6
0000152C  EC6C                     596      LSR.W   D6,D4
0000152E                           597      
0000152E                           598      *Print data
0000152E  43F9 000021B5            599      LEA     PRNT_Q,A1
00001534  4EB9 00001EC6            600      JSR     PRINT_BUFF
0000153A                           601      
0000153A  3204                     602      MOVE.W  D4,D1
0000153C  4EB9 00001ED2            603      JSR     PRINT_HEXBUFF
00001542                           604      
00001542  43F9 000020A6            605      LEA     COMMA,A1
00001548  4EB9 00001EC6            606      JSR     PRINT_BUFF
0000154E                           607      
0000154E                           608      * Handle EA
0000154E  4EB9 00001D20            609      JSR     EA_SRC
00001554                           610      
00001554  4E75                     611      RTS * Return to IO
00001556                           612      
00001556                           613      *Proceed to EA Subroutine
00001556                           614  OP_0110    
00001556  2803                     615      MOVE.L  D3,D4
00001558  1C3C 000C                616      MOVE.B  #12,D6
0000155C  E94C                     617      LSL.W   #4,D4
0000155E  EC6C                     618      LSR.W   D6,D4
00001560                           619      
00001560  B87C 0000                620      CMP.W   #%0000,D4
00001564  6700 001E                621      BEQ     IS_BRA
00001568                           622      
00001568  B87C 000E                623      CMP.W   #%1110,D4
0000156C  6700 002A                624      BEQ     IS_BGT
00001570                           625      
00001570  B87C 000F                626      CMP.W   #%1111,D4
00001574  6700 0036                627      BEQ     IS_BLE
00001578                           628      
00001578  B87C 0007                629      CMP.W   #%0111,D4
0000157C  6700 0042                630      BEQ     IS_BEQ
00001580                           631      
00001580  6000 068E                632      BRA     INVALID_OP
00001584                           633  IS_BRA
00001584  43F9 00002165            634      LEA     PRNT_BRA,A1
0000158A  4EB9 00001EC6            635      JSR     PRINT_BUFF
00001590  4EB9 000015D4            636      JSR DISP
00001596  4E75                     637      RTS
00001598                           638      
00001598                           639  IS_BGT
00001598  43F9 00002153            640      LEA     PRNT_BGT,A1
0000159E  4EB9 00001EC6            641      JSR     PRINT_BUFF
000015A4  4EB9 000015D4            642      JSR DISP
000015AA  4E75                     643      RTS
000015AC                           644  IS_BLE
000015AC  43F9 00002159            645      LEA     PRNT_BLE,A1
000015B2  4EB9 00001EC6            646      JSR     PRINT_BUFF
000015B8  4EB9 000015D4            647      JSR DISP
000015BE  4E75                     648      RTS
000015C0                           649  IS_BEQ  
000015C0  43F9 0000215F            650      LEA     PRNT_BEQ,A1
000015C6  4EB9 00001EC6            651      JSR     PRINT_BUFF
000015CC  4EB9 000015D4            652      JSR DISP
000015D2  4E75                     653      RTS  
000015D4                           654  
000015D4                           655  
000015D4                           656  DISP *8 bit displacement field
000015D4  2803                     657      MOVE.L  D3,D4
000015D6  E14C                     658      LSL.W   #8,D4
000015D8  E04C                     659      LSR.W   #8,D4   *Holds displacement value
000015DA  C87C 00FF                660      AND.W   #$00FF,D4
000015DE                           661      
000015DE  B87C 0000                662      CMP.W   #$00,D4
000015E2  6700 001E                663      BEQ     DISP_16
000015E6  B87C 00FF                664      CMP.W   #$FF,D4
000015EA  6700 002C                665      BEQ     DISP_32
000015EE                           666  
000015EE  2A4B                     667      MOVEA.L A3,A5
000015F0  2C0D                     668      MOVE.L  A5,D6 *Holds next instruction address
000015F2  4604                     669      NOT.B   D4  *flip bits
000015F4  5284                     670      ADD.L   #%01,D4
000015F6                           671      
000015F6  9C44                     672      SUB.W   D4,D6 
000015F8  2206                     673      MOVE.L  D6,D1
000015FA                           674      *=MOVE.B  #16,D2
000015FA                           675      *=MOVE.B  #15,D0
000015FA                           676      *TRAP    #15
000015FA  4EB9 00001ED2            677      JSR     PRINT_HEXBUFF
00001600  4E75                     678      RTS    
00001602                           679  DISP_16
00001602  381B                     680      MOVE.W  (A3)+,D4
00001604  2A4B                     681      MOVEA.L A3,A5
00001606  2C0D                     682      MOVE.L A5,D6 *Holds next instruction address
00001608  4604                     683      NOT.B   D4
0000160A  5284                     684      ADD.L   #%01,D4
0000160C                           685      
0000160C  9C44                     686      SUB.W   D4,D6
0000160E  2206                     687      MOVE.L  D6,D1
00001610                           688      *=MOVE.B  #16,D2
00001610                           689      *=MOVE.B  #15,D0
00001610                           690      *TRAP    #15
00001610  4EB9 00001ED2            691      JSR     PRINT_HEXBUFF
00001616  4E75                     692      RTS
00001618                           693  DISP_32    
00001618  281B                     694      MOVE.L  (A3)+,D4
0000161A  2A4B                     695      MOVEA.L A3,A5
0000161C  2C0D                     696      MOVE.L  A5,D6 *Holds next instruction address
0000161E  4604                     697      NOT.B   D4
00001620  5284                     698      ADD.L   #%01,D4
00001622                           699      
00001622  9C44                     700      SUB.W   D4,D6
00001624  2206                     701      MOVE.L  D6,D1
00001626  4EB9 00001ED2            702      JSR     PRINT_HEXBUFF
0000162C                           703      * MOVE.B  #16,D2
0000162C                           704      * MOVE.B  #15,D0
0000162C                           705      * TRAP    #15
0000162C  4E75                     706      RTS
0000162E                           707  OP_10   *OR,SUB
0000162E  2803                     708      MOVE.L  D3,D4
00001630  E54C                     709      LSL.W   #2,D4
00001632  1C3C 000E                710      MOVE.B  #14,D6
00001636  EC6C                     711      LSR.W   D6,D4
00001638  B83C 0000                712      CMP.B   #%00,D4 *Check bits 13 and 12
0000163C  6700 000E                713      BEQ     IS_OR
00001640                           714      
00001640  B83C 0001                715      CMP.B   #%01,D4
00001644  6700 00A4                716      BEQ     IS_SUB
00001648                           717      
00001648  6000 05C6                718      BRA     INVALID_OP
0000164C                           719  IS_OR
0000164C  43F9 0000216F            720      LEA     PRNT_OR,A1
00001652  4EB9 00001EC6            721      JSR     PRINT_BUFF
00001658                           722      
00001658  2803                     723      MOVE.L  D3,D4
0000165A  EF4C                     724      LSL.W   #7,D4
0000165C  1C3C 000D                725      MOVE.B  #13,D6
00001660  EC6C                     726      LSR.W   D6,D4
00001662                           727      
00001662                           728      * Destination is Dn
00001662  B83C 0000                729      CMP.B   #%000,D4
00001666  6700 002E                730      BEQ     OR_B_D
0000166A  B83C 0001                731      CMP.B   #%001,D4
0000166E  6700 0034                732      BEQ     OR_W_D
00001672  B83C 0002                733      CMP.B   #%010,D4
00001676  6700 003A                734      BEQ     OR_L_D
0000167A                           735      
0000167A  B83C 0004                736      CMP.B   #%100,D4
0000167E  6700 0040                737      BEQ     OR_B
00001682  B83C 0005                738      CMP.B   #%101,D4
00001686  6700 0046                739      BEQ     OR_W
0000168A  B83C 0006                740      CMP.B   #%110,D4
0000168E  6700 004C                741      BEQ     OR_L
00001692                           742      
00001692  6000 057C                743      BRA     INVALID_OP
00001696                           744  
00001696                           745  
00001696                           746  
00001696                           747  
00001696                           748  * For these, handle EA first, then Data reg.
00001696                           749  OR_B_D
00001696  4EB9 00001BDA            750      JSR PRINT_B
0000169C                           751      *Proceed to EA Subroutine
0000169C  4EB9 00001CC2            752      JSR     ADDFORMAT_DATA_DEST_EA
000016A2                           753      
000016A2  4E75                     754      RTS * Return to IO
000016A4                           755      
000016A4                           756  OR_W_D
000016A4  4EB9 00001BEC            757      JSR PRINT_W
000016AA                           758      *Proceed to EA Subroutine
000016AA  4EB9 00001CC2            759      JSR     ADDFORMAT_DATA_DEST_EA
000016B0                           760      
000016B0  4E75                     761      RTS * Return to IO    
000016B2                           762  OR_L_D
000016B2  4EB9 00001BFE            763      JSR PRINT_L
000016B8                           764      *Proceed to EA Subroutine
000016B8  4EB9 00001CC2            765      JSR     ADDFORMAT_DATA_DEST_EA
000016BE                           766      
000016BE  4E75                     767      RTS * Return to IO
000016C0                           768  
000016C0                           769  
000016C0                           770  * For these, handle Data reg first, then EA    
000016C0                           771  OR_B
000016C0  4EB9 00001BDA            772      JSR PRINT_B
000016C6                           773      *Proceed to EA Subroutine
000016C6  4EB9 00001CF0            774      JSR     ADDFORMAT_EA_DEST_EA
000016CC  4E75                     775      RTS * Return to IO 
000016CE                           776      
000016CE                           777  OR_W
000016CE  4EB9 00001BEC            778      JSR PRINT_W
000016D4                           779      *Proceed to EA Subroutine
000016D4  4EB9 00001CF0            780      JSR     ADDFORMAT_EA_DEST_EA
000016DA  4E75                     781      RTS * Return to IO 
000016DC                           782      
000016DC                           783  OR_L
000016DC  4EB9 00001BFE            784      JSR PRINT_L
000016E2                           785      *Proceed to EA Subroutine
000016E2  4EB9 00001CF0            786      JSR     ADDFORMAT_EA_DEST_EA
000016E8  4E75                     787      RTS * Return to IO 
000016EA                           788      
000016EA                           789  IS_SUB
000016EA  43F9 00002189            790      LEA     PRNT_SUB,A1
000016F0  4EB9 00001EC6            791      JSR     PRINT_BUFF
000016F6                           792  
000016F6  2803                     793      MOVE.L  D3,D4
000016F8  EF4C                     794      LSL.W   #7,D4
000016FA  1C3C 000D                795      MOVE.B  #13,D6
000016FE  EC6C                     796      LSR.W   D6,D4
00001700                           797      
00001700                           798      * Data register as destination;
00001700  B83C 0000                799      CMP.B   #%000,D4
00001704  6700 002A                800      BEQ     SUB_B_D
00001708  B83C 0001                801      CMP.B   #%001,D4
0000170C  6700 0030                802      BEQ     SUB_W_D
00001710  B83C 0002                803      CMP.B   #%010,D4
00001714  6700 0036                804      BEQ     SUB_L_D
00001718                           805  
00001718                           806      * EA as destination;
00001718  B83C 0004                807      CMP.B   #%100,D4
0000171C  6700 003C                808      BEQ     SUB_B
00001720  B83C 0005                809      CMP.B   #%101,D4
00001724  6700 0042                810      BEQ     SUB_W
00001728  B83C 0006                811      CMP.B   #%110,D4
0000172C  6700 0048                812      BEQ     SUB_L
00001730                           813  
00001730                           814  
00001730                           815  * Handle EA, then Data Reg.
00001730                           816  SUB_B_D
00001730  4EB9 00001BDA            817      JSR PRINT_B
00001736                           818      *Proceed to EA Subroutine
00001736  4EB9 00001CC2            819      JSR     ADDFORMAT_DATA_DEST_EA
0000173C                           820      
0000173C  4E75                     821      RTS * Return to IO    
0000173E                           822  SUB_W_D
0000173E  4EB9 00001BEC            823      JSR PRINT_W
00001744                           824      *Proceed to EA Subroutine
00001744  4EB9 00001CC2            825      JSR     ADDFORMAT_DATA_DEST_EA
0000174A                           826      
0000174A  4E75                     827      RTS * Return to IO    
0000174C                           828  SUB_L_D
0000174C  4EB9 00001BFE            829      JSR PRINT_L
00001752                           830      *Proceed to EA Subroutine 
00001752  4EB9 00001CC2            831      JSR     ADDFORMAT_DATA_DEST_EA
00001758                           832      
00001758  4E75                     833      RTS * Return to IO
0000175A                           834  
0000175A                           835  
0000175A                           836  * Handle Data reg, then EA    
0000175A                           837  SUB_B
0000175A  4EB9 00001BDA            838      JSR PRINT_B
00001760                           839      *Proceed to EA Subroutine
00001760  4EB9 00001CF0            840      JSR     ADDFORMAT_EA_DEST_EA
00001766  4E75                     841      RTS * Return to IO     
00001768                           842  SUB_W
00001768  4EB9 00001BEC            843      JSR PRINT_W
0000176E                           844      *Proceed to EA Subroutine    
0000176E  4EB9 00001CF0            845      JSR     ADDFORMAT_EA_DEST_EA
00001774  4E75                     846      RTS * Return to IO 
00001776                           847  SUB_L
00001776  4EB9 00001BFE            848      JSR PRINT_L
0000177C                           849      *Proceed to EA Subroutine 
0000177C  4EB9 00001CF0            850      JSR     ADDFORMAT_EA_DEST_EA
00001782  4E75                     851      RTS * Return to IO     
00001784                           852  
00001784                           853     
00001784                           854  OP_11
00001784  2803                     855      MOVE.L  D3,D4
00001786  1C3C 000C                856      MOVE.B  #12,D6
0000178A  EC6C                     857      LSR.W   D6,D4
0000178C                           858      
0000178C  B83C 000C                859      CMP.B   #%1100,D4   *AND
00001790  6700 0016                860      BEQ     OP_1100
00001794                           861      
00001794  B83C 000D                862      CMP.B   #%1101,D4   *ADD,ADDA
00001798  6700 00AC                863      BEQ     OP_1101
0000179C                           864      
0000179C  B83C 000E                865      CMP.B   #%1110,D4   *LSL/LSR,ASL/ASR,ROL/ROR
000017A0  6700 019E                866      BEQ     OP_1110
000017A4                           867      
000017A4  6000 046A                868      BRA     INVALID_OP
000017A8                           869  OP_1100 *AND
000017A8  43F9 00002185            870      LEA     PRNT_AND,A1
000017AE  4EB9 00001EC6            871      JSR     PRINT_BUFF
000017B4                           872  
000017B4  2803                     873      MOVE.L  D3,D4
000017B6  EF4C                     874      LSL.W   #7,D4
000017B8  1C3C 000D                875      MOVE.B  #13,D6
000017BC  EC6C                     876      LSR.W   D6,D4 *Get Opmode
000017BE                           877      *< ea > Dn -> Dn (Data reg destination)
000017BE  B83C 0000                878      CMP.B   #%000,D4
000017C2  6700 002E                879      BEQ     AND_B_D
000017C6  B83C 0001                880      CMP.B   #%001,D4
000017CA  6700 0034                881      BEQ     AND_W_D
000017CE  B83C 0002                882      CMP.B   #%010,D4
000017D2  6700 003A                883      BEQ     AND_L_D
000017D6                           884      *Dn < ea > -> < ea > (EA destination)
000017D6  B83C 0004                885      CMP.B   #%100,D4
000017DA  6700 0040                886      BEQ     AND_B
000017DE  B83C 0005                887      CMP.B   #%101,D4
000017E2  6700 0046                888      BEQ     AND_W
000017E6  B83C 0006                889      CMP.B   #%110,D4
000017EA  6700 004C                890      BEQ     AND_L
000017EE                           891      
000017EE  6000 0420                892      BRA     INVALID_OP
000017F2                           893     
000017F2                           894  * Handle EA, then Data Reg.
000017F2                           895  AND_B_D
000017F2  4EB9 00001BDA            896      JSR PRINT_B
000017F8                           897      *Proceed to EA Subroutine
000017F8  4EB9 00001CC2            898      JSR     ADDFORMAT_DATA_DEST_EA
000017FE                           899      
000017FE  4E75                     900      RTS * Return to IO
00001800                           901      
00001800                           902  AND_W_D
00001800  4EB9 00001BEC            903      JSR PRINT_W
00001806                           904      *Proceed to EA Subroutine    
00001806  4EB9 00001CC2            905      JSR     ADDFORMAT_DATA_DEST_EA
0000180C                           906      
0000180C  4E75                     907      RTS * Return to IO
0000180E                           908  
0000180E                           909  AND_L_D  
0000180E  4EB9 00001BFE            910      JSR PRINT_L
00001814                           911      *Proceed to EA Subroutine    
00001814  4EB9 00001CC2            912      JSR     ADDFORMAT_DATA_DEST_EA
0000181A                           913      
0000181A  4E75                     914      RTS * Return to IO
0000181C                           915  
0000181C                           916      
0000181C                           917  * Handle data reg, then EA     
0000181C                           918  AND_B
0000181C  4EB9 00001BDA            919      JSR PRINT_B
00001822                           920      *Proceed to EA Subroutine
00001822  4EB9 00001CF0            921      JSR     ADDFORMAT_EA_DEST_EA
00001828  4E75                     922      RTS * Return to IO 
0000182A                           923      
0000182A                           924  AND_W
0000182A  4EB9 00001BEC            925      JSR PRINT_W
00001830                           926      *Proceed to EA Subroutine    
00001830  4EB9 00001CF0            927      JSR     ADDFORMAT_EA_DEST_EA
00001836  4E75                     928      RTS * Return to IO 
00001838                           929  
00001838                           930  AND_L    
00001838  4EB9 00001BFE            931      JSR PRINT_L
0000183E                           932      *Proceed to EA Subroutine  
0000183E  4EB9 00001CF0            933      JSR     ADDFORMAT_EA_DEST_EA
00001844  4E75                     934      RTS * Return to IO 
00001846                           935  
00001846                           936      
00001846                           937      
00001846                           938  OP_1101 *ADD,ADDA
00001846  2803                     939      MOVE.L  D3,D4
00001848  EF4C                     940      LSL.W   #7,D4
0000184A  1C3C 000D                941      MOVE.B  #13,D6
0000184E  EC6C                     942      LSR.W   D6,D4 *Get Opmode
00001850                           943      
00001850                           944      *ADD Opmodes
00001850                           945      *< ea > Dn -> Dn (Dn is the destination; Print <ea> first, then data register)
00001850                           946          * Added new branches to differentiate between orders.
00001850  B83C 0000                947      CMP.B   #%000,D4
00001854  6700 005A                948      BEQ     ADD_B_D
00001858  B83C 0001                949      CMP.B   #%001,D4
0000185C  6700 0064                950      BEQ     ADD_W_D
00001860  B83C 0002                951      CMP.B   #%010,D4
00001864  6700 006E                952      BEQ     ADD_L_D
00001868                           953      
00001868                           954      
00001868                           955      *Dn < ea > -> < ea > (EA is the destination; Print data reg first, then <ea>)
00001868  B83C 0004                956      CMP.B   #%100,D4
0000186C  6700 0078                957      BEQ     ADD_B
00001870  B83C 0005                958      CMP.B   #%101,D4
00001874  6700 0082                959      BEQ     ADD_W
00001878  B83C 0006                960      CMP.B   #%110,D4
0000187C  6700 008C                961      BEQ     ADD_L
00001880                           962      
00001880                           963      
00001880                           964      *ADDA Opmodes (ALWAYS has An as the destination, so print <ea> first, then the register)
00001880  B83C 0003                965      CMP.B   #%011,D4
00001884  6700 0096                966      BEQ     ADDA_W
00001888  B83C 0007                967      CMP.B   #%111,D4
0000188C  6700 00A0                968      BEQ     ADDA_L
00001890                           969       
00001890                           970      
00001890  6000 037E                971      BRA     INVALID_OP
00001894                           972  
00001894                           973  IS_ADD
00001894  43F9 0000217C            974      LEA     PRNT_ADD,A1
0000189A  4EB9 00001EC6            975      JSR     PRINT_BUFF
000018A0  4E75                     976      RTS
000018A2                           977  IS_ADDA
000018A2  43F9 00002180            978      LEA     PRNT_ADDA,A1
000018A8  4EB9 00001EC6            979      JSR     PRINT_BUFF
000018AE  4E75                     980      RTS   
000018B0                           981  
000018B0                           982  * For these, handle EA first, then Data reg.
000018B0                           983  ADD_B_D
000018B0  4EB8 1894                984      JSR     IS_ADD
000018B4  4EB9 00001BDA            985      JSR     PRINT_B
000018BA                           986      * Handle operands
000018BA  4EB9 00001CC2            987      JSR     ADDFORMAT_DATA_DEST_EA
000018C0                           988      
000018C0  4E75                     989      RTS * Return to IO
000018C2                           990      
000018C2                           991  ADD_W_D
000018C2  4EB8 1894                992      JSR     IS_ADD
000018C6  4EB9 00001BEC            993      JSR     PRINT_W
000018CC                           994      * Handle operands
000018CC  4EB9 00001CC2            995      JSR     ADDFORMAT_DATA_DEST_EA
000018D2                           996      
000018D2  4E75                     997      RTS * Return to IO    
000018D4                           998  ADD_L_D
000018D4  4EB8 1894                999      JSR     IS_ADD
000018D8  4EB9 00001BFE           1000      JSR     PRINT_L
000018DE                          1001      * Handle operands
000018DE  4EB9 00001CC2           1002      JSR     ADDFORMAT_DATA_DEST_EA
000018E4                          1003      
000018E4  4E75                    1004      RTS * Return to IO
000018E6                          1005  
000018E6                          1006  
000018E6                          1007  * For these, handle data reg first, then EA.
000018E6                          1008  ADD_B
000018E6  4EB8 1894               1009      JSR     IS_ADD
000018EA  4EB9 00001BDA           1010      JSR     PRINT_B
000018F0                          1011      *Proceed to EA Subroutine
000018F0  4EB9 00001CF0           1012      JSR     ADDFORMAT_EA_DEST_EA
000018F6  4E75                    1013      RTS * Return to IO 
000018F8                          1014      
000018F8                          1015  ADD_W
000018F8  4EB8 1894               1016      JSR     IS_ADD
000018FC  4EB9 00001BEC           1017      JSR     PRINT_W
00001902                          1018      *Proceed to EA Subroutine    
00001902  4EB9 00001CF0           1019      JSR     ADDFORMAT_EA_DEST_EA
00001908  4E75                    1020      RTS * Return to IO 
0000190A                          1021      
0000190A                          1022  ADD_L
0000190A  4EB8 1894               1023      JSR     IS_ADD
0000190E  4EB9 00001BFE           1024      JSR     PRINT_L
00001914                          1025      *Proceed to EA Subroutine
00001914  4EB9 00001CF0           1026      JSR     ADDFORMAT_EA_DEST_EA
0000191A  4E75                    1027      RTS * Return to IO 
0000191C                          1028  
0000191C                          1029  
0000191C                          1030  * Destination must be An, so do EA first, then reg
0000191C                          1031  ADDA_W
0000191C  4EB8 18A2               1032      JSR     IS_ADDA
00001920  4EB9 00001BEC           1033      JSR     PRINT_W
00001926                          1034      *Proceed to EA Subroutine
00001926  4EB9 00001C90           1035      JSR     ADDAFORMAT_EA
0000192C  4E75                    1036      RTS * Return to IO 
0000192E                          1037      
0000192E                          1038  ADDA_L  
0000192E  4EB8 18A2               1039      JSR     IS_ADDA  
00001932  4EB9 00001BFE           1040      JSR     PRINT_L
00001938                          1041      *Proceed to EA Subroutine
00001938  4EB9 00001C90           1042      JSR     ADDAFORMAT_EA
0000193E  4E75                    1043      RTS * Return to IO 
00001940                          1044  
00001940                          1045      
00001940                          1046      
00001940                          1047  OP_1110 *LSL/LSR,ASL/ASR,ROL/ROR (Using D2 to track Mem/Reg state (0 = Reg, 1 = Mem))
00001940                          1048  
00001940                          1049      *Memory Shift Check bits 6,7
00001940  2803                    1050      MOVE.L  D3,D4
00001942  E14C                    1051      LSL.W   #8,D4
00001944  7C0E                    1052      MOVE.L  #14,D6
00001946  EC6C                    1053      LSR.W   D6,D4
00001948                          1054      
00001948  B83C 0003               1055      CMP.B   #%11,D4
0000194C  6600 0024               1056      BNE     REG
00001950                          1057      *Memory Shift check bits 11,10,9
00001950  2803                    1058      MOVE.L  D3,D4
00001952  E94C                    1059      LSL.W   #4,D4
00001954  1C3C 000D               1060      MOVE.B  #13,D6
00001958  EC6C                    1061      LSR.W   D6,D4
0000195A                          1062      
0000195A  B83C 0000               1063      CMP.B   #%000,D4 *ASL/ASR
0000195E  6700 0064               1064      BEQ     A_MEM
00001962  B83C 0001               1065      CMP.B   #%001,D4 *LSL,LSR
00001966  6700 00E8               1066      BEQ     L_MEM
0000196A  B83C 0003               1067      CMP.B   #%011,D4 *ROL/ROR
0000196E  6700 016C               1068      BEQ     R_MEM
00001972                          1069      
00001972                          1070      *Register Shift check bits 4,3
00001972  2803                    1071  REG MOVE.L  D3,D4
00001974  1C3C 000B               1072      MOVE.B  #11,D6
00001978  ED6C                    1073      LSL.W   D6,D4
0000197A  1C3C 000E               1074      MOVE.B  #14,D6
0000197E  EC6C                    1075      LSR.W   D6,D4
00001980                          1076      
00001980  B83C 0000               1077      CMP.B   #%00,D4 *ASL/ASR
00001984  6700 0016               1078      BEQ     A_REG
00001988  B83C 0001               1079      CMP.B   #%01,D4 *LSL/LSR
0000198C  6700 009A               1080      BEQ     L_REG
00001990  B83C 0003               1081      CMP.B   #%11,D4 *ROL/ROR
00001994  6700 011E               1082      BEQ     R_REG
00001998                          1083      
00001998                          1084      
00001998  6000 0276               1085      BRA     INVALID_OP
0000199C                          1086      
0000199C                          1087      *Check bit 8 to determine L/R shift
0000199C                          1088  A_REG
0000199C  4EB9 00001B40           1089      JSR     RGHT_LFT
000019A2                          1090      
000019A2  143C 0000               1091      MOVE.B  #0,D2 * SET D2 TO 0 TO KNOW IS REG
000019A6                          1092      
000019A6  4286                    1093      CLR.L   D6
000019A8  1C3C 0001               1094      MOVE.B  #01,D6
000019AC  B83C 0000               1095      CMP.B   #%0,D4
000019B0  6700 0032               1096      BEQ     IS_ASR
000019B4  B83C 0001               1097      CMP.B   #%1,D4
000019B8  6700 004C               1098      BEQ     IS_ASL
000019BC                          1099      
000019BC  6000 0252               1100      BRA INVALID_OP
000019C0                          1101  A_SIZE    
000019C0  6000 018A               1102      BRA     GET_SHFT_SIZE 
000019C4                          1103  
000019C4                          1104  A_MEM
000019C4  4EB9 00001B40           1105      JSR     RGHT_LFT
000019CA                          1106      
000019CA  143C 0001               1107      MOVE.B  #1,D2 * SET D2 TO 1 TO KNOW IS MEM
000019CE                          1108      
000019CE  4286                    1109      CLR.L   D6
000019D0  1C3C 0002               1110      MOVE.B  #02,D6
000019D4  B83C 0000               1111      CMP.B   #%0,D4
000019D8  6700 000A               1112      BEQ     IS_ASR
000019DC  B83C 0001               1113      CMP.B   #%1,D4
000019E0  6700 0024               1114      BEQ     IS_ASL    
000019E4                          1115  
000019E4                          1116  
000019E4                          1117      
000019E4                          1118      
000019E4                          1119  IS_ASR
000019E4  43F9 00002191           1120      LEA     PRNT_ASR,A1
000019EA  4EB9 00001EC6           1121      JSR     PRINT_BUFF
000019F0  BC3C 0001               1122      CMP.B   #01,D6
000019F4  67CA                    1123      BEQ     A_SIZE
000019F6                          1124      
000019F6  43F9 000020A2           1125      LEA     SPACE,A1
000019FC  4EB9 00001EC6           1126      JSR     PRINT_BUFF
00001A02                          1127  
00001A02  6000 01A6               1128      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001A06                          1129  
00001A06                          1130  
00001A06                          1131  IS_ASL
00001A06  43F9 0000218D           1132      LEA     PRNT_ASL,A1
00001A0C  4EB9 00001EC6           1133      JSR     PRINT_BUFF
00001A12  BC3C 0001               1134      CMP.B   #01,D6
00001A16  67A8                    1135      BEQ     A_SIZE
00001A18                          1136      
00001A18  43F9 000020A2           1137      LEA     SPACE,A1
00001A1E  4EB9 00001EC6           1138      JSR     PRINT_BUFF
00001A24                          1139  
00001A24  6000 0184               1140      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001A28                          1141  
00001A28                          1142  
00001A28                          1143      
00001A28                          1144  L_REG
00001A28  4EB9 00001B40           1145      JSR     RGHT_LFT
00001A2E                          1146      
00001A2E  143C 0000               1147      MOVE.B  #0,D2 * SET D2 TO 0 TO KNOW IS REG
00001A32                          1148      
00001A32  4286                    1149      CLR.L   D6
00001A34  1C3C 0001               1150      MOVE.B  #01,D6
00001A38  B83C 0000               1151      CMP.B   #%0,D4
00001A3C  6700 0032               1152      BEQ     IS_LSR
00001A40  B83C 0001               1153      CMP.B   #%1,D4
00001A44  6700 004C               1154      BEQ     IS_LSL
00001A48                          1155      
00001A48  6000 01C6               1156      BRA INVALID_OP
00001A4C                          1157  L_SIZE    
00001A4C  6000 00FE               1158      BRA     GET_SHFT_SIZE 
00001A50                          1159  
00001A50                          1160  L_MEM
00001A50  4EB9 00001B40           1161      JSR     RGHT_LFT
00001A56                          1162      
00001A56  143C 0001               1163      MOVE.B  #1,D2 * SET D2 TO 1 TO KNOW IS MEM
00001A5A                          1164      
00001A5A  4286                    1165      CLR.L   D6
00001A5C  1C3C 0002               1166      MOVE.B  #02,D6
00001A60  B83C 0000               1167      CMP.B   #%0,D4
00001A64  6700 000A               1168      BEQ     IS_LSR
00001A68  B83C 0001               1169      CMP.B   #%1,D4
00001A6C  6700 0024               1170      BEQ     IS_LSL    
00001A70                          1171  
00001A70                          1172      
00001A70                          1173  IS_LSR
00001A70  43F9 00002199           1174      LEA     PRNT_LSR,A1
00001A76  4EB9 00001EC6           1175      JSR     PRINT_BUFF
00001A7C  BC3C 0001               1176      CMP.B   #01,D6
00001A80  67CA                    1177      BEQ     L_SIZE
00001A82                          1178      
00001A82  43F9 000020A2           1179      LEA     SPACE,A1
00001A88  4EB9 00001EC6           1180      JSR     PRINT_BUFF
00001A8E                          1181      
00001A8E  6000 011A               1182      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001A92                          1183      
00001A92                          1184  
00001A92                          1185  IS_LSL
00001A92  43F9 00002195           1186      LEA     PRNT_LSL,A1
00001A98  4EB9 00001EC6           1187      JSR     PRINT_BUFF
00001A9E  BC3C 0001               1188      CMP.B   #01,D6
00001AA2  67A8                    1189      BEQ     L_SIZE 
00001AA4                          1190      
00001AA4  43F9 000020A2           1191      LEA     SPACE,A1
00001AAA  4EB9 00001EC6           1192      JSR     PRINT_BUFF
00001AB0                          1193      
00001AB0  6000 00F8               1194      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001AB4                          1195      
00001AB4                          1196  
00001AB4                          1197      
00001AB4                          1198      
00001AB4                          1199  R_REG
00001AB4  4EB9 00001B40           1200      JSR     RGHT_LFT
00001ABA                          1201      
00001ABA  143C 0000               1202      MOVE.B  #0,D2 * SET D2 TO 0 TO KNOW IS REG
00001ABE                          1203      
00001ABE  4286                    1204      CLR.L   D6
00001AC0  1C3C 0001               1205      MOVE.B  #01,D6
00001AC4  B83C 0000               1206      CMP.B   #%0,D4
00001AC8  6700 0032               1207      BEQ     IS_ROR
00001ACC  B83C 0001               1208      CMP.B   #%1,D4
00001AD0  6700 004C               1209      BEQ     IS_ROL
00001AD4                          1210      
00001AD4  6000 013A               1211      BRA INVALID_OP
00001AD8                          1212  R_SIZE    
00001AD8  6000 0072               1213      BRA     GET_SHFT_SIZE 
00001ADC                          1214  
00001ADC                          1215  R_MEM
00001ADC  4EB9 00001B40           1216      JSR     RGHT_LFT
00001AE2                          1217      
00001AE2  143C 0001               1218      MOVE.B  #1,D2 * SET D2 TO 1 TO KNOW IS MEM
00001AE6                          1219      
00001AE6  4286                    1220      CLR.L   D6
00001AE8  1C3C 0002               1221      MOVE.B  #02,D6
00001AEC  B83C 0000               1222      CMP.B   #%0,D4
00001AF0  6700 000A               1223      BEQ     IS_ROR
00001AF4  B83C 0001               1224      CMP.B   #%1,D4
00001AF8  6700 0024               1225      BEQ     IS_ROL    
00001AFC                          1226  
00001AFC                          1227      
00001AFC                          1228      
00001AFC                          1229  IS_ROR
00001AFC  43F9 000021A1           1230      LEA     PRNT_ROR,A1
00001B02  4EB9 00001EC6           1231      JSR     PRINT_BUFF
00001B08  BC3C 0001               1232      CMP.B   #01,D6
00001B0C  67CA                    1233      BEQ     R_SIZE
00001B0E                          1234      
00001B0E  43F9 000020A2           1235      LEA     SPACE,A1
00001B14  4EB9 00001EC6           1236      JSR     PRINT_BUFF
00001B1A                          1237  
00001B1A  6000 008E               1238      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001B1E                          1239    
00001B1E                          1240  
00001B1E                          1241  IS_ROL
00001B1E  43F9 0000219D           1242      LEA     PRNT_ROL,A1
00001B24  4EB9 00001EC6           1243      JSR     PRINT_BUFF
00001B2A  BC3C 0001               1244      CMP.B   #01,D6
00001B2E  67A8                    1245      BEQ     R_SIZE 
00001B30                          1246      
00001B30  43F9 000020A2           1247      LEA     SPACE,A1
00001B36  4EB9 00001EC6           1248      JSR     PRINT_BUFF
00001B3C                          1249  
00001B3C  6000 006C               1250      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001B40                          1251     
00001B40                          1252  
00001B40                          1253      
00001B40                          1254      
00001B40                          1255  
00001B40                          1256  *GET_IR
00001B40                          1257  *    MOVE.L  D3,D4
00001B40                          1258  *    MOVE.B  #10,D6
00001B40                          1259  *    LSL.W   D6,D4
00001B40                          1260  *    MOVE.B  #15,D6
00001B40                          1261  *    LSR.W   D6,D4
00001B40                          1262  *    
00001B40                          1263  *    MOVE.W  D4,D1
00001B40                          1264  *    MOVE.B  #3,D0
00001B40                          1265  *    TRAP    #15
00001B40                          1266  *    SIMHALT    
00001B40                          1267  
00001B40                          1268  RGHT_LFT    *0 = RIGHT 1 = LEFT
00001B40                          1269  *Determine if right/left shift
00001B40  2803                    1270      MOVE.L  D3,D4
00001B42  1C3C 000F               1271      MOVE.B  #15,D6
00001B46  EF4C                    1272      LSL.W   #7,D4
00001B48  EC6C                    1273      LSR.W   D6,D4
00001B4A  4E75                    1274      RTS
00001B4C                          1275      
00001B4C                          1276  GET_SHFT_SIZE
00001B4C  2803                    1277      MOVE.L  D3,D4
00001B4E  E14C                    1278      LSL.W   #8,D4
00001B50  1C3C 000E               1279      MOVE.B  #14,D6
00001B54  EC6C                    1280      LSR.W   D6,D4
00001B56                          1281      
00001B56  B83C 0000               1282      CMP.B   #%00,D4    *B
00001B5A  6700 0012               1283      BEQ     PRINT_B_SHIFT
00001B5E  B83C 0001               1284      CMP.B   #%01,D4    *W
00001B62  6700 001E               1285      BEQ     PRINT_W_SHIFT
00001B66  B83C 0002               1286      CMP.B   #%10,D4    *L
00001B6A  6700 002A               1287      BEQ     PRINT_L_SHIFT
00001B6E                          1288      
00001B6E                          1289  
00001B6E                          1290      
00001B6E                          1291  PRINT_B_SHIFT
00001B6E  1A3C 0001               1292      MOVE.B  #$1,D5 * For EA subroutine's size handling
00001B72  43F9 00002122           1293      LEA     PRNT_B,A1
00001B78  4EB9 00001EC6           1294      JSR     PRINT_BUFF
00001B7E  6000 002A               1295      BRA     DO_SHIFT_EA
00001B82                          1296  PRINT_W_SHIFT
00001B82  1A3C 0002               1297      MOVE.B  #$2,D5 * For EA subroutine's size handling
00001B86  43F9 00002126           1298      LEA     PRNT_W,A1
00001B8C  4EB9 00001EC6           1299      JSR     PRINT_BUFF
00001B92  6000 0016               1300      BRA     DO_SHIFT_EA
00001B96                          1301  PRINT_L_SHIFT
00001B96  1A3C 0003               1302      MOVE.B  #$3,D5 * For EA subroutine's size handling
00001B9A  43F9 0000212A           1303      LEA     PRNT_L,A1
00001BA0  4EB9 00001EC6           1304      JSR     PRINT_BUFF
00001BA6  6000 0002               1305      BRA     DO_SHIFT_EA
00001BAA                          1306  
00001BAA                          1307  DO_SHIFT_EA
00001BAA                          1308      
00001BAA                          1309      
00001BAA                          1310      *Proceed to EA Subroutine (ALL SHIFT OPS END UP HERE; USE TO GENERALIZE THE EA HANDLING FOR ALL)
00001BAA                          1311      * Check D2 for status on MEM/REG for these.
00001BAA  B43C 0000               1312      CMP.B   #0,D2
00001BAE  6700 000C               1313      BEQ     REG_EA
00001BB2                          1314  
00001BB2  4EB9 00001D20           1315      JSR     EA_SRC * MEM mode, so just need to print single EA field.
00001BB8  6000 001E               1316      BRA     SHIFT_EA_DONE
00001BBC                          1317  
00001BBC                          1318  REG_EA
00001BBC  4EB9 00001C16           1319      JSR     REGSHIFTFORMAT_EA
00001BC2                          1320      
00001BC2  3803                    1321      MOVE.W  D3,D4
00001BC4  C87C 0007               1322      AND.W   #%0000000000000111,D4
00001BC8  1C04                    1323      MOVE.B  D4,D6
00001BCA                          1324      
00001BCA  48E7 FE00               1325      MOVEM.L D0-D6,-(SP) * D0-D6
00001BCE  4EB9 00001D64           1326      JSR     EA_SUB
00001BD4  4CDF 007F               1327      MOVEM.L (SP)+,D0-D6 * D0-D6
00001BD8                          1328  
00001BD8                          1329  SHIFT_EA_DONE
00001BD8  4E75                    1330      RTS * GO TO IO; SHIFT INSTR DONE.    
00001BDA                          1331   
00001BDA                          1332  PRINT_B
00001BDA  1A3C 0001               1333      MOVE.B  #$1,D5 * For EA subroutine's size handling
00001BDE  43F9 00002122           1334      LEA     PRNT_B,A1
00001BE4  4EB9 00001EC6           1335      JSR     PRINT_BUFF
00001BEA  4E75                    1336      RTS
00001BEC                          1337  PRINT_W
00001BEC  1A3C 0002               1338      MOVE.B  #$2,D5 * For EA subroutine's size handling
00001BF0  43F9 00002126           1339      LEA     PRNT_W,A1
00001BF6  4EB9 00001EC6           1340      JSR     PRINT_BUFF
00001BFC  4E75                    1341      RTS
00001BFE                          1342  PRINT_L
00001BFE  1A3C 0003               1343      MOVE.B  #$3,D5 * For EA subroutine's size handling
00001C02  43F9 0000212A           1344      LEA     PRNT_L,A1
00001C08  4EB9 00001EC6           1345      JSR     PRINT_BUFF
00001C0E  4E75                    1346      RTS
00001C10                          1347  INVALID_OP
00001C10                          1348      * LEA     INVALID_MSG,A1
00001C10                          1349      * JSR       PRINT_BUFF
00001C10  1E3C 0001               1350      MOVE.B  #1,D7
00001C14  4E75                    1351      RTS
00001C16                          1352  *-----------HANDLE BIT SHIFTING EA SOURCE -------------------------
00001C16                          1353  REGSHIFTFORMAT_EA
00001C16  2803                    1354      MOVE.L  D3,D4 * Refresh D4 with our opcode word to analyze
00001C18                          1355       
00001C18  C8BC 00000E00           1356      AND.L   #%0000111000000000,D4 * Isolate the register number
00001C1E  E68C                    1357      LSR.L   #3,D4   * Shift reg/count to far right
00001C20  EC8C                    1358      LSR.L   #6,D4
00001C22  2C04                    1359      MOVE.L  D4,D6   * D6 now contains either our register number or amount to shift by
00001C24                          1360      
00001C24  2206                    1361      MOVE.L  D6,D1
00001C26                          1362      
00001C26  3803                    1363      MOVE.W  D3,D4
00001C28  0804 0005               1364      BTST    #5,D4 * Test bit 5 to tell if specified as a register or immediate value (Doesn't modify D4)
00001C2C  6700 001E               1365      BEQ     S_IMM   * Bit was 0, need to do immediate value process.
00001C30                          1366      * If here, do data register contains count process (D6 already prepared)
00001C30                          1367      
00001C30  48E7 FE00               1368      MOVEM.L D0-D6,-(SP) * D0-D6
00001C34                          1369      
00001C34  4EB9 00001D64           1370      JSR     EA_SUB * Print the source operand
00001C3A                          1371      
00001C3A  4CDF 007F               1372      MOVEM.L (SP)+,D0-D6 * D0-D6
00001C3E                          1373  
00001C3E  43F9 000020A6           1374      LEA     COMMA,A1
00001C44  4EB9 00001EC6           1375      JSR     PRINT_BUFF
00001C4A                          1376      
00001C4A  4E75                    1377      RTS * Go back to process the destination
00001C4C                          1378      
00001C4C                          1379  S_IMM
00001C4C  43F9 000021B5           1380      LEA     PRNT_Q,A1 * To print hash for immediate data.
00001C52  4EB9 00001EC6           1381      JSR     PRINT_BUFF
00001C58                          1382      
00001C58  BC3C 0000               1383      CMP.B   #0,D6 * Test to see if D6 is equal to zero.
00001C5C  6700 0018               1384      BEQ     S_EIGHT * Convert value to 8.
00001C60                          1385      
00001C60                          1386      
00001C60  1206                    1387      MOVE.B  D6,D1 * Print the value.
00001C62  4EB9 00001ED2           1388      JSR     PRINT_HEXBUFF
00001C68                          1389      
00001C68  43F9 000020A6           1390      LEA     COMMA,A1
00001C6E  4EB9 00001EC6           1391      JSR     PRINT_BUFF
00001C74                          1392      
00001C74  4E75                    1393      RTS
00001C76                          1394  
00001C76                          1395  S_EIGHT
00001C76  1C3C 0008               1396      MOVE.B  #8,D6
00001C7A                          1397      
00001C7A  1206                    1398      MOVE.B  D6,D1 * Print the value.
00001C7C  4EB9 00001ED2           1399      JSR     PRINT_HEXBUFF
00001C82                          1400  
00001C82  43F9 000020A6           1401      LEA     COMMA,A1
00001C88  4EB9 00001EC6           1402      JSR     PRINT_BUFF
00001C8E                          1403  
00001C8E  4E75                    1404      RTS
00001C90                          1405      
00001C90                          1406  *------------------------------------------------------------
00001C90                          1407  *-----------HANDLE ADDA FORMAT EA ---------------------------
00001C90                          1408  ADDAFORMAT_EA
00001C90                          1409      
00001C90  4EB9 00001D20           1410      JSR     EA_SRC * Handle source EA
00001C96                          1411      
00001C96  43F9 000020A6           1412      LEA     COMMA,A1
00001C9C  4EB9 00001EC6           1413      JSR     PRINT_BUFF
00001CA2                          1414      
00001CA2  3803                    1415      MOVE.W  D3,D4
00001CA4  C87C 0E00               1416      AND.W   #%0000111000000000,D4 * Isolate Register #
00001CA8  E64C                    1417      LSR.W   #3,D4
00001CAA  EC4C                    1418      LSR.W   #6,D4
00001CAC  883C 0008               1419      OR.B    #%00001000,D4 * set as address reg
00001CB0  1C04                    1420      MOVE.B  D4,D6   * Prime D6 register
00001CB2                          1421      
00001CB2                          1422      * D0-D6
00001CB2  48E7 FE00               1423      MOVEM.L D0-D6,-(SP) * Move register contents to stack
00001CB6                          1424      
00001CB6  4EB9 00001D64           1425      JSR     EA_SUB * Handle the destination EA (last 6 bits of D6)
00001CBC                          1426      
00001CBC                          1427      * MOVEM RETURN
00001CBC  4CDF 007F               1428      MOVEM.L (SP)+,D0-D6 * D0-D6
00001CC0                          1429      
00001CC0                          1430  
00001CC0                          1431  
00001CC0  4E75                    1432      RTS
00001CC2                          1433  *------------------------------------------------------------
00001CC2                          1434  *-----------HANDLE ADD FORMAT DATA DESTINATION EA -----------
00001CC2                          1435  ADDFORMAT_DATA_DEST_EA
00001CC2  4EB9 00001D20           1436      JSR     EA_SRC * Handle source EA
00001CC8                          1437      
00001CC8                          1438      
00001CC8                          1439      
00001CC8  3803                    1440      MOVE.W  D3,D4
00001CCA  C87C 0E00               1441      AND.W   #%0000111000000000,D4 * Isolate Register #
00001CCE  E64C                    1442      LSR.W   #3,D4
00001CD0  EC4C                    1443      LSR.W   #6,D4
00001CD2  1C04                    1444      MOVE.B  D4,D6   * Prime D6 register
00001CD4                          1445      
00001CD4                          1446      * D0-D6
00001CD4  48E7 FE00               1447      MOVEM.L D0-D6,-(SP) * Move register contents to stack
00001CD8                          1448  
00001CD8  43F9 000020A6           1449      LEA     COMMA,A1
00001CDE  4EB9 00001EC6           1450      JSR     PRINT_BUFF
00001CE4                          1451      
00001CE4  4EB9 00001D64           1452      JSR     EA_SUB * Handle the destination EA (last 6 bits of D6)
00001CEA                          1453      
00001CEA                          1454      * MOVEM RETURN
00001CEA  4CDF 007F               1455      MOVEM.L (SP)+,D0-D6 * D0-D6
00001CEE                          1456  
00001CEE                          1457      
00001CEE  4E75                    1458      RTS
00001CF0                          1459  *------------------------------------------------------------
00001CF0                          1460  *-----------HANDLE ADD FORMAT EA DESTINATION EA -------------
00001CF0                          1461  ADDFORMAT_EA_DEST_EA
00001CF0                          1462      
00001CF0  3803                    1463      MOVE.W  D3,D4
00001CF2  C87C 0E00               1464      AND.W   #%0000111000000000,D4 * Isolate Register #
00001CF6  E64C                    1465      LSR.W   #3,D4
00001CF8  EC4C                    1466      LSR.W   #6,D4
00001CFA  1C04                    1467      MOVE.B  D4,D6   * Prime D6 register
00001CFC                          1468      
00001CFC                          1469      * D0-D6
00001CFC                          1470  
00001CFC  48E7 FE00               1471      MOVEM.L D0-D6,-(SP) * Move register contents to stack
00001D00                          1472      
00001D00  4EB9 00001D64           1473      JSR     EA_SUB * Handle the source EA
00001D06                          1474      
00001D06                          1475      * MOVEM RETURN
00001D06  4CDF 007F               1476      MOVEM.L (SP)+,D0-D6 * D0-D6
00001D0A                          1477  
00001D0A                          1478      
00001D0A  3803                    1479      MOVE.W  D3,D4  * Refresh opcode
00001D0C                          1480  
00001D0C  43F9 000020A6           1481      LEA     COMMA,A1
00001D12  4EB9 00001EC6           1482      JSR     PRINT_BUFF
00001D18                          1483      
00001D18  4EB9 00001D20           1484      JSR     EA_SRC * Handle destination EA
00001D1E                          1485  
00001D1E  4E75                    1486      RTS
00001D20                          1487  
00001D20                          1488  *------------------------------------------------------------
00001D20                          1489  *-------------------HANDLE SOURCE EA (last 6 bits)-----------
00001D20                          1490  EA_SRC
00001D20                          1491      
00001D20  48E7 FE00               1492      MOVEM.L D0-D6,-(SP) * D0-D6
00001D24                          1493  
00001D24  3803                    1494      MOVE.W  D3,D4
00001D26  C87C 003F               1495      AND.W   #%0000000000111111,D4
00001D2A  1C04                    1496      MOVE.B  D4,D6
00001D2C                          1497      
00001D2C  4EB9 00001D64           1498      JSR EA_SUB ** Print source EA bits from bits in D6
00001D32                          1499      
00001D32                          1500      * MOVEM RETURN
00001D32  4CDF 007F               1501      MOVEM.L (SP)+,D0-D6 * D0-D6
00001D36  4E75                    1502      RTS
00001D38                          1503  *------------------------------------------------------------
00001D38                          1504  *------HANDLE DESTINATION EA(6 bits before last 6 bits)------
00001D38                          1505  EA_DEST
00001D38                          1506      * D0-D6
00001D38  48E7 FE00               1507      MOVEM.L D0-D6,-(SP) * Move register contents to stack
00001D3C                          1508  
00001D3C  3803                    1509      MOVE.W  D3,D4
00001D3E  C87C 0FC0               1510      AND.W #%0000111111000000,D4
00001D42  EC4C                    1511      LSR.W #6,D4
00001D44  1004                    1512      MOVE.B  D4,D0
00001D46  C07C 0007               1513      AND.W #%0000000000000111,D0 * D0 contains mode bits
00001D4A  1200                    1514      MOVE.B  D0,D1   *MODE (D1) (Curr state: 000 001 in D1)
00001D4C  2004                    1515      MOVE.L  D4,D0 * D0 contains 6 bit field out of order
00001D4E  E648                    1516      LSR.W   #3,D0 * D0 contains reg bits (Curr State: 000 010 in D0)
00001D50  1400                    1517      MOVE.B  D0,D2   *REG (D2) (Curr State: 000 010 in D2 and D0)
00001D52                          1518      
00001D52  E709                    1519      LSL.B   #3,D1 * Shift mode into position
00001D54                          1520      
00001D54  8401                    1521      OR.B    D1,D2   
00001D56  1C02                    1522      MOVE.B  D2,D6 *
00001D58                          1523      
00001D58  4EB9 00001D64           1524      JSR     EA_SUB
00001D5E                          1525      
00001D5E                          1526      * D0-D6
00001D5E  4CDF 007F               1527      MOVEM.L (SP)+,D0-D6
00001D62                          1528      
00001D62  4E75                    1529      RTS
00001D64                          1530  *------------------------------------------------------------ 
00001D64                          1531      
00001D64                          1532  *-------------------EA Subroutine----------------------------
00001D64                          1533  
00001D64                          1534  EA_SUB
00001D64                          1535  
00001D64                          1536              * 1: Process the 6-bit field into D3 (Register bits) and D4 (Mode bits)
00001D64  4284                    1537              CLR.L   D4
00001D66  1806                    1538              MOVE.B  D6,D4 * Prime D4 with the full 6-bit field
00001D68  C83C 0007               1539              AND.B   #%00000111,D4 * Clear everything but the register bits (BITS READY)
00001D6C                          1540              
00001D6C  1606                    1541              MOVE.B  D6,D3 * Prime D3 with the full 6-bit field
00001D6E  E60B                    1542              LSR.B   #3,D3 * Shift out the register bits to isolate the mode bits (BITS READY)
00001D70                          1543                  
00001D70                          1544              * 2: Process the MODE BITS:
00001D70  B63C 0000               1545  MODE_P      CMP.B   #%00000000,D3   * TEST FOR 000: Dn
00001D74  6700 002E               1546              BEQ     DN_MODE
00001D78                          1547              
00001D78  B63C 0001               1548              CMP.B   #%00000001,D3   * TEST FOR 001: An
00001D7C  6700 0036               1549              BEQ     AN_MODE
00001D80                          1550              
00001D80  B63C 0002               1551              CMP.B   #%00000010,D3   * TEST FOR 010: (An)
00001D84  6700 003E               1552              BEQ     ANIND_MODE
00001D88                          1553              
00001D88  B63C 0003               1554              CMP.B   #%00000011,D3   * TEST FOR 011: (An)+
00001D8C  6700 0046               1555              BEQ     ANINC_MODE
00001D90                          1556              
00001D90  B63C 0004               1557              CMP.B   #%00000100,D3   * TEST FOR 100: -(An)
00001D94  6700 004E               1558              BEQ     ANDEC_MODE
00001D98                          1559              
00001D98  B63C 0007               1560              CMP.B   #%00000111,D3   * TEST FOR 111: #<data>, (xxx).W, or (xxx).L (or unsupported!)
00001D9C  6700 0056               1561              BEQ     ABSDAT_MODE
00001DA0                          1562              
00001DA0  6000 011E               1563              BRA     UNSUPP_MODE     * If we made it here, assume an unsupported mode!
00001DA4                          1564              
00001DA4                          1565              
00001DA4  43F9 000021A5           1566  DN_MODE     LEA     PRNT_D,A1
00001DAA  4EB9 00001EC6           1567              JSR     PRINT_BUFF
00001DB0                          1568              
00001DB0  6000 005E               1569              BRA     REG_P
00001DB4                          1570              
00001DB4  43F9 000021A7           1571  AN_MODE     LEA     PRNT_A,A1
00001DBA  4EB9 00001EC6           1572              JSR     PRINT_BUFF
00001DC0                          1573              
00001DC0  6000 004E               1574              BRA     REG_P
00001DC4                          1575  
00001DC4  43F9 000021A9           1576  ANIND_MODE  LEA     PRNT_AI,A1
00001DCA  4EB9 00001EC6           1577              JSR     PRINT_BUFF
00001DD0                          1578              
00001DD0  6000 003E               1579              BRA     REG_P
00001DD4                          1580  
00001DD4  43F9 000021A9           1581  ANINC_MODE  LEA     PRNT_AI,A1  * As of now this is the same as indirect, postdec added after register
00001DDA  4EB9 00001EC6           1582              JSR     PRINT_BUFF
00001DE0                          1583              
00001DE0  6000 002E               1584              BRA     REG_P
00001DE4                          1585  
00001DE4  43F9 000021B1           1586  ANDEC_MODE  LEA     PRNT_DC,A1
00001DEA  4EB9 00001EC6           1587              JSR     PRINT_BUFF
00001DF0                          1588              
00001DF0  6000 001E               1589              BRA     REG_P
00001DF4                          1590              
00001DF4                          1591  
00001DF4                          1592  * DATA / ABSOLUTE ADDRESSING HANDLING (Mode was 111 in D3; need to chk. D4 reg bits for behavior)
00001DF4  B83C 0004               1593  ABSDAT_MODE CMP.B   #%00000100,D4 * TEST FOR 100: #<data>
00001DF8  6700 005A               1594              BEQ     DATA_MODE
00001DFC                          1595              
00001DFC  B83C 0000               1596              CMP.B   #%00000000,D4 * TEST FOR 000: (xxx).W
00001E00  6700 0076               1597              BEQ     ABSW_MODE
00001E04                          1598              
00001E04  B83C 0001               1599              CMP.B   #%00000001,D4 * TEST FOR 001: (xxx).L
00001E08  6700 007E               1600              BEQ     ABSL_MODE
00001E0C                          1601              
00001E0C  6000 00B2               1602              BRA     UNSUPP_MODE   * If the register is some other val, unsupported!
00001E10                          1603              
00001E10                          1604              * 3: Process the REGISTER BITS: (IN D4)
00001E10  2204                    1605  REG_P       MOVE.L  D4,D1   * Load the register value into D1 for display.
00001E12  4EB9 00001ED2           1606              JSR     PRINT_HEXBUFF
00001E18                          1607              
00001E18  B63C 0002               1608              CMP.B   #%00000010,D3
00001E1C  6700 0016               1609              BEQ     END_ONE
00001E20                          1610              
00001E20  B63C 0004               1611              CMP.B   #%00000100,D3
00001E24  6700 000E               1612              BEQ     END_ONE
00001E28                          1613              
00001E28  B63C 0003               1614              CMP.B   #%00000011,D3
00001E2C  6700 0016               1615              BEQ     END_TWO
00001E30                          1616              
00001E30  6000 0092               1617              BRA     FINISH  * Additional char after register unnecessary, branch to finish
00001E34                          1618              
00001E34  43F9 000021AC           1619  END_ONE     LEA     PRNT_CL,A1
00001E3A  4EB9 00001EC6           1620              JSR     PRINT_BUFF
00001E40                          1621              
00001E40  6000 0082               1622              BRA     FINISH
00001E44                          1623  
00001E44  43F9 000021AE           1624  END_TWO     LEA     PRNT_IN,A1
00001E4A  4EB9 00001EC6           1625              JSR     PRINT_BUFF
00001E50                          1626              
00001E50  6000 0072               1627              BRA     FINISH
00001E54                          1628  
00001E54                          1629  * #<DATA>; RELIES ON D5 CONTAINING SIZE VALUE OF THE INSTRUCTION! (So we know how much data to grab, then what to increment A5 by! (word or long))
00001E54                          1630      * If this contains 0, this will not work in this state. D5 MUST have val 1-3 at this point!
00001E54  43F9 000021B7           1631  DATA_MODE   LEA     PRNT_DT,A1 * Print '#$'
00001E5A  4EB9 00001EC6           1632              JSR     PRINT_BUFF
00001E60                          1633              
00001E60  BA3C 0001               1634              CMP.B   #1,D5
00001E64  6700 0032               1635              BEQ     BYTE
00001E68                          1636              
00001E68  BA3C 0002               1637              CMP.B   #2,D5
00001E6C  6700 003A               1638              BEQ     WORD
00001E70                          1639              
00001E70  BA3C 0003               1640              CMP.B   #3,D5
00001E74  6700 003E               1641              BEQ     LONG
00001E78                          1642              
00001E78                          1643  * (xxx).W;            
00001E78  43F9 000021BA           1644  ABSW_MODE   LEA     PRNT_HX,A1 * Print '$'
00001E7E  4EB9 00001EC6           1645              JSR     PRINT_BUFF
00001E84                          1646              
00001E84  6000 0022               1647              BRA     WORD
00001E88                          1648              
00001E88                          1649  * (xxx).L; Assembler uses this when it sign extends automatically over (xxx).W           
00001E88  43F9 000021BA           1650  ABSL_MODE   LEA     PRNT_HX,A1 * Print '$'
00001E8E  4EB9 00001EC6           1651              JSR     PRINT_BUFF
00001E94                          1652              
00001E94  6000 001E               1653              BRA     LONG
00001E98                          1654  
00001E98                          1655  * Expects format created by assembled machine code, NOT how it is just pushed to memory by (An)!            
00001E98  321B                    1656  BYTE        MOVE.W  (A3)+,D1    * Move word of data from curr opcode word pointer to D1, then increment pointer a word.
00001E9A                          1657              *=MOVE.B  #16,D2      * Prepare to display a hex value
00001E9A  C27C 00FF               1658              AND.W   #%0000000011111111,D1   * Discard potential word part from byte
00001E9E                          1659              *=MOVE.B  #15,D0      * Set the task to 15
00001E9E                          1660              *=TRAP    #15         * Print the value.
00001E9E  4EB9 00001ED2           1661              JSR     PRINT_HEXBUFF
00001EA4                          1662  
00001EA4  6000 001E               1663              BRA     FINISH
00001EA8                          1664  
00001EA8  321B                    1665  WORD        MOVE.W  (A3)+,D1    * Move word of data from curr opcode word pointer to D1, then increment pointer a word.
00001EAA                          1666              *=MOVE.B  #16,D2      * Prepare to display a hex value
00001EAA                          1667              *=MOVE.B  #15,D0      * Set the task to 15
00001EAA                          1668              *=TRAP    #15         * Print the value.
00001EAA  4EB9 00001ED2           1669              JSR     PRINT_HEXBUFF
00001EB0                          1670  
00001EB0  6000 0012               1671              BRA     FINISH
00001EB4                          1672  
00001EB4  221B                    1673  LONG        MOVE.L  (A3)+,D1    * Move longword of data from curr opcode word pointer to D1, then increment pointer a longword.
00001EB6                          1674              *=MOVE.B  #16,D2      * Prepare to display a hex value
00001EB6                          1675              *=MOVE.B  #15,D0      * Set the task to 15
00001EB6                          1676              *=TRAP    #15         * Print the value.
00001EB6  4EB9 00001ED2           1677              JSR     PRINT_HEXBUFF
00001EBC                          1678  
00001EBC  6000 0006               1679              BRA     FINISH
00001EC0                          1680        
00001EC0                          1681              * 4: UNSUPPORTED BRANCH:
00001EC0                          1682  UNSUPP_MODE *LEA     PRNT_ER,A1
00001EC0                          1683              *JSR        PRINT_BUFF * Continue directly onto finishing up from here
00001EC0                          1684              
00001EC0  1E3C 0001               1685              MOVE.B  #1,D7   * Set Good/Bad flag to Bad state (1 bit)
00001EC4                          1686              
00001EC4                          1687              * 5: Finishing up:
00001EC4                          1688  FINISH      
00001EC4                          1689              * Return values stored in stack prior to moving into here into registers.
00001EC4                          1690                  * (Will put here on integration...)
00001EC4                          1691              * A5 currently points to the next needed opcode to process, which could be the following:
00001EC4                          1692                  * Next opcode word instruction
00001EC4                          1693                  * More data corresponding to the next <ea> field for current instruction
00001EC4                          1694              
00001EC4  4E75                    1695              RTS
00001EC6                          1696  
00001EC6                          1697  * POTENTIAL PRINT LOGIC ERROR: HANDLES LSL/R-LIKE INSTRUCTIONS WITH DIRECT NUMBER INCORRECTLY (prints first byte of mem location addr, then the number desired) *********************************
00001EC6                          1698  
00001EC6                          1699  PRINT_BUFF
00001EC6  0C11 0000               1700              CMP.B #0,(A1)
00001ECA  6700 0056               1701              BEQ RET_PBUFF           * Done copying? Jump back
00001ECE                          1702  
00001ECE  1CD9                    1703              MOVE.B (A1)+,(A6)+      * Copy character to print buffer
00001ED0  60F4                    1704              BRA PRINT_BUFF          * Repeat
00001ED2                          1705  
00001ED2                          1706  PRINT_HEXBUFF
00001ED2  143C 0000               1707              MOVE.B #0,D2
00001ED6  B2BC 00000000           1708              CMP.L #0,D1
00001EDC  6600 0006               1709              BNE PRINT_HEXBUFF_LP
00001EE0  1CFC 0030               1710              MOVE.B #$30,(A6)+       * Value was 0, print 0
00001EE4                          1711  
00001EE4                          1712  PRINT_HEXBUFF_LP
00001EE4  B2BC 00000000           1713              CMP.L #0,D1
00001EEA  6700 0036               1714              BEQ RET_PBUFF
00001EEE                          1715              
00001EEE  E999                    1716              ROL.L #4,D1             *Rotate 1 nibble to the left
00001EF0  2001                    1717              MOVE.L D1,D0    
00001EF2  C0BC 0000000F           1718              AND.L #$F,D0            *Isolate the hex value
00001EF8                          1719              
00001EF8  0600 0037               1720              ADD.B #$37,D0
00001EFC  B03C 0040               1721              CMP.B #$40,D0
00001F00  6E00 0004               1722              BGT   PRINT_HEXBUFF_SKIP
00001F04  5F00                    1723              SUB.B #$7,D0
00001F06                          1724      
00001F06                          1725  PRINT_HEXBUFF_SKIP
00001F06  B03C 0030               1726              CMP.B #$30,D0           * Going to print a zero
00001F0A  6600 000A               1727              BNE PRINT_HEXBUFF_YESZERO
00001F0E                          1728  
00001F0E  B43C 0000               1729              CMP.B #0,D2             * Actually, don't
00001F12  6700 0008               1730              BEQ PRINT_HEXBUFF_NOZERO
00001F16                          1731  
00001F16                          1732  PRINT_HEXBUFF_YESZERO
00001F16  1CC0                    1733              MOVE.B D0,(A6)+
00001F18  143C 0001               1734              MOVE.B #1,D2
00001F1C                          1735  
00001F1C                          1736  PRINT_HEXBUFF_NOZERO
00001F1C  C23C 00F0               1737              AND.B #$F0,D1   Clear last nibble
00001F20  60C2                    1738              BRA PRINT_HEXBUFF_LP
00001F22                          1739  
00001F22  4E75                    1740  RET_PBUFF   RTS
00001F24                          1741  * Put variables and constants here
00001F24= 50 6C 65 61 73 65 ...   1742  PROMPT_START DC.B 'Please enter starting address in hexadecimal (must be even): ' ,0
00001F62= 50 6C 65 61 73 65 ...   1743  PROMPT_END DC.B 'Please enter ending address in hexadecimal (must be after starting): ' ,0
00001FA8= 4572 726F 723A 2...     1744  INVALID_HEX DC.W 'Error: Address must be in valid hexadecimal' ,CR,LF,0
00001FDA= 44 6F 6E 65 20 72 ...   1745  DONE_MESSAGE DC.B 'Done reading instructions' ,CR,LF,0
00001FF6= 506C 6561 7365 2...     1746  ENTER_MESSAGE DC.W 'Please press enter to display new screen ' ,CR,LF,0
00002026= 4572 726F 723A 2...     1747  INVALID_ORDER DC.W 'Error: ending address must come after starting',CR,LF,0
0000205A= 4469 7361 7373 6...     1748  ASK_REPEAT DC.W 'Disassemble another mem range? (Yes = 0, No = 1) ' ,0 
0000208E                          1749  INVALID_MEM_ADDR DS.W 1
00002090= 4441 5441 2000 0...     1750  DATA DC.W 'DATA ',CR,LF,0
0000209C                          1751  INVALID_HEX_VAL DS.W 1 
0000209E= 20 0D 0A 00             1752  LINE_BREAK DC.B ' ',CR,LF,0
000020A2= 2000 0000               1753  SPACE DC.W ' ',0
000020A6= 2C00 0000               1754  COMMA DC.W ',',0
000020AA                          1755  INSTRUCTION_ADDR DS.B 1
000020AC= 494E 5354 5255 4...     1756  INSTRUCTION_ADDR_MESSAGE DC.W 'INSTRUCTION ADDR',0
000020BE                          1757  OPCODE DS.W 1
000020C0= 4F50 434F 4445 0000     1758  OPCODE_MESSAGE DC.W 'OPCODE',0
000020C8                          1759  OPERAND1 DS.W 1
000020CA= 4F50 4552 414E 4...     1760  OPERAND1_MESSAGE DC.W 'OPERAND1',0
000020D4                          1761  OPERAND2 DS.W 1
000020D6= 4F50 4552 414E 4...     1762  OPERAND2_MESSAGE DC.W 'OPERAND2',0
000020E0                          1763  
000020E0                          1764  GOOD_BAD_FLAG DS.B 1
000020E1                          1765  
000020E2                          1766  START_ADDR DS.W 4
000020EA                          1767  END_ADDR DS.W 4
000020F2                          1768  
000020F2= 45 6E 74 65 72 20 ...   1769  INPUT_MSG   DC.B    'Enter machine code: ',0
00002108                          1770  INPUT       DS.L    1
0000210C= 49 6E 76 61 6C 69 ...   1771  INVALID_MSG DC.B    'Invalid Instruction',CR,LF,0
00002122                          1772  
00002122= 2E 42 20 00             1773  PRNT_B      DC.B    '.B ',0
00002126= 2E 57 20 00             1774  PRNT_W      DC.B    '.W ',0
0000212A= 2E 4C 20 00             1775  PRNT_L      DC.B    '.L ',0
0000212E                          1776  
0000212E= 4E 4F 50 00             1777  PRNT_NOP    DC.B    'NOP',0
00002132= 52 54 53 00             1778  PRNT_RTS    DC.B    'RTS',0
00002136= 4D 4F 56 45 00          1779  PRNT_MOVE   DC.B    'MOVE',0
0000213B= 4D 4F 56 45 41 00       1780  PRNT_MOVEA  DC.B    'MOVEA',0
00002141= 4D 4F 56 45 4D 00       1781  PRNT_MOVEM  DC.B    'MOVEM',0
00002147= 4D 4F 56 45 51 20 00    1782  PRNT_MOVEQ  DC.B    'MOVEQ ',0
0000214E= 4A 53 52 20 00          1783  PRNT_JSR    DC.B    'JSR ',0
00002153= 42 47 54 20 24 00       1784  PRNT_BGT    DC.B    'BGT $',0
00002159= 42 4C 45 20 24 00       1785  PRNT_BLE    DC.B    'BLE $',0
0000215F= 42 45 51 20 24 00       1786  PRNT_BEQ    DC.B    'BEQ $',0
00002165= 42 52 41 20 24 00       1787  PRNT_BRA    DC.B    'BRA $',0
0000216B= 4E 4F 54 00             1788  PRNT_NOT    DC.B    'NOT',0
0000216F= 4F 52 00                1789  PRNT_OR     DC.B    'OR',0
00002172= 4C 45 41 20 00          1790  PRNT_LEA    DC.B    'LEA ',0
00002177= 41 44 44 51 00          1791  PRNT_ADDQ   DC.B    'ADDQ',0
0000217C= 41 44 44 00             1792  PRNT_ADD    DC.B    'ADD',0
00002180= 41 44 44 41 00          1793  PRNT_ADDA   DC.B    'ADDA',0
00002185= 41 4E 44 00             1794  PRNT_AND    DC.B    'AND',0
00002189= 53 55 42 00             1795  PRNT_SUB    DC.B    'SUB',0
0000218D= 41 53 4C 00             1796  PRNT_ASL    DC.B    'ASL',0
00002191= 41 53 52 00             1797  PRNT_ASR    DC.B    'ASR',0
00002195= 4C 53 4C 00             1798  PRNT_LSL    DC.B    'LSL',0
00002199= 4C 53 52 00             1799  PRNT_LSR    DC.B    'LSR',0
0000219D= 52 4F 4C 00             1800  PRNT_ROL    DC.B    'ROL',0
000021A1= 52 4F 52 00             1801  PRNT_ROR    DC.B    'ROR',0
000021A5                          1802  
000021A5= 44 00                   1803  PRNT_D  DC.B    'D',0
000021A7= 41 00                   1804  PRNT_A  DC.B    'A',0
000021A9= 28 41 00                1805  PRNT_AI DC.B    '(A',0
000021AC= 29 00                   1806  PRNT_CL DC.B    ')',0
000021AE= 29 2B 00                1807  PRNT_IN DC.B    ')+',0
000021B1= 2D 28 41 00             1808  PRNT_DC DC.B    '-(A',0
000021B5                          1809  
000021B5= 23 00                   1810  PRNT_Q  DC.B    '#',0
000021B7= 23 24 00                1811  PRNT_DT DC.B    '#$',0
000021BA= 24 00                   1812  PRNT_HX DC.B    '$',0
000021BC                          1813  
000021BC= 45 52 52 4F 52 3A ...   1814  PRNT_ER DC.B    'ERROR: Unsupported EA Mode',0
000021D7                          1815  
000021D7                          1816  *D3 = original instruction
000021D7                          1817  *D4 = copy of instruction
000021D7                          1818  *D6 = num of bits to shift
000021D7                          1819  
000021D7                          1820      
000021D7                          1821  
000021D7                          1822  DONE
000021D8  43F8 1FDA               1823      LEA DONE_MESSAGE, A1
000021DC  4EB8 1EC6               1824      JSR     PRINT_BUFF
000021E0                          1825      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSDAT_MODE         1DF4
ABSL_MODE           1E88
ABSW_MODE           1E78
ADDAFORMAT_EA       1C90
ADDA_L              192E
ADDA_W              191C
ADDFORMAT_DATA_DEST_EA  1CC2
ADDFORMAT_EA_DEST_EA  1CF0
ADDQ_B              1506
ADDQ_DATA           1524
ADDQ_L              151A
ADDQ_W              1510
ADD_B               18E6
ADD_B_D             18B0
ADD_L               190A
ADD_L_D             18D4
ADD_W               18F8
ADD_W_D             18C2
ANDEC_MODE          1DE4
AND_B               181C
AND_B_D             17F2
AND_L               1838
AND_L_D             180E
AND_W               182A
AND_W_D             1800
ANINC_MODE          1DD4
ANIND_MODE          1DC4
AN_MODE             1DB4
ASK_REPEAT          205A
A_MEM               19C4
A_REG               199C
A_SIZE              19C0
BYTE                1E98
CLEAR_REG           11F6
COMMA               20A6
CONV_NUM            107E
CONV_STRING         103A
CR                  D
DATA                2090
DATA_MODE           1E54
DISP                15D4
DISPLAY_INVALID_HEX  1060
DISPLAY_INVALID_INSTRUCTION  1156
DISPLAY_INVALID_ORDER  10C2
DISP_16             1602
DISP_32             1618
DN_MODE             1DA4
DONE                21D7
DONE_END_CONV       10B0
DONE_MESSAGE        1FDA
DONE_START_CONV     109E
DO_SHIFT_EA         1BAA
EA_DEST             1D38
EA_SRC              1D20
EA_SUB              1D64
END_ADDR            20EA
END_ONE             1E34
END_TWO             1E44
ENTER_MESSAGE       1FF6
FIND_OP             125A
FINISH              1EC4
GET_SHFT_SIZE       1B4C
GOOD_BAD_FLAG       20E0
INPUT               2108
INPUT_MSG           20F2
INSTRUCTION_ADDR    20AA
INSTRUCTION_ADDR_MESSAGE  20AC
INVALID_HEX         1FA8
INVALID_HEX_VAL     209C
INVALID_MEM_ADDR    208E
INVALID_MSG         210C
INVALID_OP          1C10
INVALID_ORDER       2026
IS_ADD              1894
IS_ADDA             18A2
IS_ASL              1A06
IS_ASR              19E4
IS_BEQ              15C0
IS_BGT              1598
IS_BLE              15AC
IS_BRA              1584
IS_LEA              13D8
IS_LSL              1A92
IS_LSR              1A70
IS_MOVE             1294
IS_MOVEA            12A4
IS_MOVEM            149A
IS_NOT              141A
IS_OR               164C
IS_ROL              1B1E
IS_ROR              1AFC
IS_SUB              16EA
LF                  A
LINE_BREAK          209E
LONG                1EB4
L_MEM               1A50
L_REG               1A28
L_SIZE              1A4C
MODE_P              1D70
MOVEM_L             14C0
MOVEM_W             14BA
MOVE_B              12D6
MOVE_L              1316
MOVE_SIZE           12B0
MOVE_W              12F6
NEEDS_NEW_SCREEN    1182
NOP                 122A
NOT_B               1458
NOT_EA              1472
NOT_L               146C
NOT_W               1462
OPCODE              20BE
OPCODE_MESSAGE      20C0
OPERAND1            20C8
OPERAND1_MESSAGE    20CA
OPERAND2            20D4
OPERAND2_MESSAGE    20D6
OP_00               1282
OP_01               1336
OP_0100             13B2
OP_01001            147A
OP_0101             14C6
OP_0110             1556
OP_0111             135E
OP_10               162E
OP_11               1784
OP_1100             17A8
OP_1101             1846
OP_1110             1940
OR_B                16C0
OR_B_D              1696
OR_L                16DC
OR_L_D              16B2
OR_W                16CE
OR_W_D              16A4
PBUFF               900
PRINT_B             1BDA
PRINT_BUFF          1EC6
PRINT_B_SHIFT       1B6E
PRINT_HEXBUFF       1ED2
PRINT_HEXBUFF_LP    1EE4
PRINT_HEXBUFF_NOZERO  1F1C
PRINT_HEXBUFF_SKIP  1F06
PRINT_HEXBUFF_YESZERO  1F16
PRINT_INSTRUCTIONS  10E6
PRINT_L             1BFE
PRINT_L_SHIFT       1B96
PRINT_W             1BEC
PRINT_W_SHIFT       1B82
PRNT_A              21A7
PRNT_ADD            217C
PRNT_ADDA           2180
PRNT_ADDQ           2177
PRNT_AI             21A9
PRNT_AND            2185
PRNT_ASL            218D
PRNT_ASR            2191
PRNT_B              2122
PRNT_BEQ            215F
PRNT_BGT            2153
PRNT_BLE            2159
PRNT_BRA            2165
PRNT_CL             21AC
PRNT_D              21A5
PRNT_DC             21B1
PRNT_DT             21B7
PRNT_ER             21BC
PRNT_HX             21BA
PRNT_IN             21AE
PRNT_JSR            214E
PRNT_L              212A
PRNT_LEA            2172
PRNT_LSL            2195
PRNT_LSR            2199
PRNT_MOVE           2136
PRNT_MOVEA          213B
PRNT_MOVEM          2141
PRNT_MOVEQ          2147
PRNT_NOP            212E
PRNT_NOT            216B
PRNT_OR             216F
PRNT_Q              21B5
PRNT_ROL            219D
PRNT_ROR            21A1
PRNT_RTS            2132
PRNT_SUB            2189
PRNT_W              2126
PROMPT_END          1F62
PROMPT_FOR_END      101E
PROMPT_FOR_START    1002
PROMPT_START        1F24
PROMPT_USER_FOR_ENTER  119A
REACHED_END         11C8
REG                 1972
REGSHIFTFORMAT_EA   1C16
REG_EA              1BBC
REG_P               1E10
RET_PBUFF           1F22
RGHT_LFT            1B40
RTS                 1242
R_MEM               1ADC
R_REG               1AB4
R_SIZE              1AD8
SHIFT_EA_DONE       1BD8
SPACE               20A2
START               1000
START_ADDR          20E2
START_OP            122A
SUB_B               175A
SUB_B_D             1730
SUB_L               1776
SUB_L_D             174C
SUB_W               1768
SUB_W_D             173E
S_EIGHT             1C76
S_IMM               1C4C
UNSUPP_MODE         1EC0
WORD                1EA8
