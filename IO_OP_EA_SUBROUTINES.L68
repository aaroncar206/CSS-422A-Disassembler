00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/7/2021 22:47:25

00000000                             1  *-----------------------------------------------------------
00000000  =0000000D                  2  CR EQU $0D
00000000  =0000000A                  3  LF EQU $0A
00000000  =00000900                  4  PBUFF EQU $900
00000000                             5  
00000000                             6  
00000000                             7  *----- PRECONDITIONS ------*
00000000                             8  * - Instruction addresses must be properly formatted hex values
00000000                             9  * - Opcode must be properly formatted hex values ready to be read in memory, else outputted as DATA.
00000000                            10  * - Operands/EA fields must be be properly formatted within opcode and supported, else outputted as DATA.
00000000                            11  * - D7: Established as general good/bad flag to know if we should print a line (0 = good, 1 = bad)
00000000                            12  
00000000                            13  *---- POSTCONDITIONS -----*
00000000                            14  * - Output memory words to console in format (MEM LOCATION | OPCODE / DATA | OPERANDS / HEX VALUE OF WORD)
00000000                            15  * - Outputs 25 lines at a time, using ENTER key to continue until given range is read.
00000000                            16  * - Prompts the user to either decode another memory range, or terminate the program.
00000000                            17  
00001000                            18      ORG    $1000
00001000                            19  START:                  ; first instruction of program
00001000                            20  
00001000                            21  
00001000                            22  * --Prompt user for starting address--
00001000                            23  PROMPT_FOR_START
00001000  43F9 00001E86             24      LEA PROMPT_START,A1 
00001006  103C 000E                 25      MOVE.B #14,D0 
0000100A  4E4F                      26      TRAP #15 
0000100C  227C 00000000             27      MOVEA.L #0,A1
00001012                            28      
00001012  303C 0002                 29      MOVE.W #2,D0 
00001016  4E4F                      30      TRAP #15 Read a string from the keyboard into D1.L
00001018  6000 001E                 31      BRA CONV_STRING
0000101C                            32  
0000101C                            33  
0000101C                            34  * --Prompt user for ending address--
0000101C                            35  PROMPT_FOR_END
0000101C  43F9 00001EB5             36      LEA PROMPT_END,A1 
00001022  103C 000E                 37      MOVE.B #14,D0 
00001026  4E4F                      38      TRAP #15 
00001028  227C 00000000             39      MOVEA.L #0,A1
0000102E                            40      
0000102E  303C 0002                 41      MOVE.W #2,D0 
00001032  4E4F                      42      TRAP #15 Read a string from the keyboard into D1.L
00001034  6000 0002                 43      BRA CONV_STRING
00001038                            44       
00001038                            45      
00001038                            46  *-- Converts ASCII string to Hex equivalent --  
00001038                            47  CONV_STRING
00001038  1019                      48      MOVE.B (A1)+,D0 Get individual char in input string
0000103A  B03C 0046                 49      CMP.B #$46,D0 Check if char is more than F, the last valid hex value
0000103E  6E00 001E                 50      BGT DISPLAY_INVALID_HEX 
00001042  B03C 0041                 51      CMP.B #$41,D0 Check if char is a number or letter
00001046  6D00 0034                 52      BLT CONV_NUM
0000104A                            53      
0000104A                            54      **--Convert ASCII char to hex equivalent --
0000104A  0400 0037                 55      SUB.B #$37, D0 
0000104E  D680                      56      ADD.L D0,D3
00001050  5341                      57      SUBI #1,D1 
00001052  B23C 0000                 58      CMP.B #0,D1
00001056  6700 0044                 59      BEQ DONE_START_CONV
0000105A  E98B                      60      LSL.L #4,D3
0000105C  60DA                      61      BRA CONV_STRING
0000105E                            62  
0000105E                            63  
0000105E                            64  * --Display invalid hex error upon invalid input--
0000105E                            65  DISPLAY_INVALID_HEX
0000105E  43F9 00001EFC             66      LEA INVALID_HEX,A1
00001064  103C 000E                 67      MOVE.B #14,D0 
00001068  4E4F                      68      TRAP #15 
0000106A                            69      
0000106A  43F9 00001FF2             70      LEA LINE_BREAK,A1
00001070  103C 000E                 71      MOVE.B #14,D0 
00001074  4E4F                      72      TRAP #15 
00001076  4243                      73      CLR D3
00001078  4244                      74      CLR D4
0000107A                            75  
0000107A  6084                      76      BRA PROMPT_FOR_START
0000107C                            77  
0000107C                            78  
0000107C                            79  * --Converts ASCII num char into hex equivalent--   
0000107C                            80  CONV_NUM 
0000107C  B03C 0030                 81      CMP.B #$30,D0 
00001080  6DDC                      82      BLT DISPLAY_INVALID_HEX *check if char is less than 30, first valid hex num
00001082  B03C 0039                 83      CMP.B #$39,D0
00001086  6ED6                      84      BGT DISPLAY_INVALID_HEX *check if char is less than 30, last valid hex num
00001088  0400 0030                 85      SUB.B #$30,D0
0000108C  D680                      86      ADD.L D0,D3
0000108E  5341                      87      SUBI #1,D1
00001090  B23C 0000                 88      CMP.B #0,D1 
00001094  6700 0006                 89      BEQ DONE_START_CONV
00001098  E98B                      90      LSL.L #4,D3
0000109A  609C                      91      BRA CONV_STRING
0000109C                            92      
0000109C                            93  
0000109C                            94  * --Move converted starting address into A3--
0000109C                            95  DONE_START_CONV
0000109C  B87C 0001                 96     CMP #1,D4
000010A0  6700 000C                 97     BEQ DONE_END_CONV
000010A4  5244                      98     ADDI #1,D4
000010A6                            99     
000010A6  2643                     100     MOVEA.L D3,A3
000010A8  4243                     101     CLR D3
000010AA                           102     
000010AA  6000 FF70                103     BRA PROMPT_FOR_END
000010AE                           104    
000010AE                           105  * --Move converted ending address into A4 and prepare for opcodes--
000010AE                           106  DONE_END_CONV
000010AE  4244                     107      CLR.W D4
000010B0  2843                     108      MOVEA.L D3,A4
000010B2  4243                     109      CLR D3
000010B4  4244                     110      CLR D4
000010B6                           111      
000010B6  B9CB                     112      CMPA.L A3,A4 check if starting address is less than ending 
000010B8  6B00 0006                113      BMI DISPLAY_INVALID_ORDER
000010BC                           114      
000010BC  6000 0026                115      BRA PRINT_INSTRUCTIONS
000010C0                           116      *-- op code person takes over from here--
000010C0                           117      *-- derive opcodes starting from start address --*
000010C0                           118      
000010C0                           119  DISPLAY_INVALID_ORDER
000010C0  43F9 00001F7A            120      LEA INVALID_ORDER, A1
000010C6  103C 000E                121      MOVE.B #14,D0 
000010CA  4E4F                     122      TRAP #15 
000010CC                           123      
000010CC  43F9 00001FF2            124      LEA LINE_BREAK,A1
000010D2  103C 000E                125      MOVE.B #14,D0 
000010D6  4E4F                     126      TRAP #15 
000010D8  4243                     127      CLR D3
000010DA  5244                     128      ADDI #1,D4 force to jump straight to DONE_END_CONV when back in DONE_START_CONV
000010DC  387C 0000                129      MOVE.W #$0000,A4 clear A4 for reprocessing
000010E0                           130      
000010E0  6000 FF3A                131      BRA PROMPT_FOR_END
000010E4                           132         
000010E4                           133  *-- Use print buffer pointer to print out instructions. Set good/bad flag (D7) upon 
000010E4                           134  *-- invalid instruction and report back to here. A3 is opcode pointer. 
000010E4                           135  PRINT_INSTRUCTIONS  
000010E4  4EB9 00001180            136      JSR NEEDS_NEW_SCREEN
000010EA                           137      
000010EA  B9CB                     138      CMPA.L A3,A4 *-- check if at end address 
000010EC  6F00 00CC                139      BLE REACHED_END
000010F0                           140   
000010F0  320B                     141      MOVE.W A3, D1 *-- print instruction address
000010F2  143C 0010                142      MOVE.B #16,D2
000010F6  103C 000F                143      MOVE.B #15,D0 
000010FA  4E4F                     144      TRAP #15 
000010FC                           145      
000010FC  43F9 00001FF6            146      LEA SPACE, A1
00001102  103C 000E                147      MOVE.B #14,D0 
00001106  4E4F                     148      TRAP #15 
00001108                           149          
00001108  1E3C 0000                150      MOVE.B #0,D7        * Invalid flag is set to zero
0000110C  2C7C 00000900            151      MOVEA.L #PBUFF,A6   * Printbuff is A6
00001112                           152  
00001112  361B                     153      MOVE.W (A3)+, D3
00001114                           154      
00001114                           155      ** SAVE DATA REGISTERS (Except D7)
00001114  48E7 FE00                156      MOVEM.L D0-D6,-(SP)
00001118                           157      
00001118  4EB9 0000121C            158      JSR START_OP
0000111E                           159      
0000111E  4CDF 007F                160      MOVEM.L (SP)+,D0-D6
00001122                           161      ** LOAD DATA REGISTERS (Except D7)
00001122                           162  
00001122  BE7C 0001                163      CMP #1,D7
00001126  6700 002C                164      BEQ DISPLAY_INVALID_INSTRUCTION
0000112A                           165  
0000112A  1CBC 0000                166      MOVE.B #0, (A6)     * Add terminator to print buffer
0000112E  227C 00000900            167      MOVEA.L #PBUFF,A1
00001134  103C 000E                168      MOVE.B #14, D0
00001138  4E4F                     169      TRAP #15            * Print print buffer
0000113A                           170      
0000113A                           171      * Need space after print buffer? **********************************************
0000113A  43F9 00001FF6            172      LEA SPACE, A1
00001140  103C 000E                173      MOVE.B #14,D0 
00001144  4E4F                     174      TRAP #15 
00001146                           175      
00001146  43F9 00001FF2            176      LEA LINE_BREAK,A1
0000114C  103C 000E                177      MOVE.B #14,D0 
00001150  4E4F                     178      TRAP #15
00001152                           179      
00001152  6090                     180      BRA PRINT_INSTRUCTIONS
00001154                           181      
00001154                           182  *Display XXXXXXXX DATA YYYY if memory cannot be decoded to legitimate instruction   
00001154                           183  DISPLAY_INVALID_INSTRUCTION 
00001154                           184  
00001154  43F9 00001FE4            185      LEA DATA, A1
0000115A  103C 000E                186      MOVE.B #14,D0 
0000115E  4E4F                     187      TRAP #15 
00001160                           188  
00001160  143C 0010                189      MOVE.B #16, D2
00001164                           190      
00001164  554B                     191      SUBA.W  #$0002,A3 * Offset to go back to bad data opcode word
00001166  3213                     192      MOVE.W (A3),D1 * FIX: Needs to print CURRENT opcode word, not next.
00001168  544B                     193      ADDA.W  #$0002,A3 * Go back to correct current position
0000116A                           194      
0000116A                           195      
0000116A  103C 000F                196      MOVE.B #15, D0
0000116E  4E4F                     197      TRAP #15            * Print print buffer
00001170                           198      
00001170  43F9 00001FF2            199      LEA LINE_BREAK,A1
00001176  103C 000E                200      MOVE.B #14,D0 
0000117A  4E4F                     201      TRAP #15
0000117C                           202  
0000117C  6000 FF66                203      BRA PRINT_INSTRUCTIONS
00001180                           204           
00001180                           205  *--Check if output reaches the end of screen 
00001180                           206  NEEDS_NEW_SCREEN
00001180  5244                     207      ADD      #1,D4                   
00001182  B87C 001A                208      CMP      #26,D4 check if output reaches 25 lines                                                                                                
00001186  6700 0010                209      BEQ      PROMPT_USER_FOR_ENTER
0000118A  43F9 00001FF6            210      LEA      SPACE,A1           
00001190  303C 000E                211      MOVE     #14,D0                 
00001194  4E4F                     212      TRAP     #15                        
00001196  4E75                     213      RTS 
00001198                           214      
00001198                           215  *--Prompt user to press enter when display reaches line limit    
00001198                           216  PROMPT_USER_FOR_ENTER
00001198  43F9 00001FF6            217      LEA    SPACE,A1 
0000119E  103C 000D                218      MOVE.B #13,D0   
000011A2  4E4F                     219      TRAP   #15
000011A4                           220  
000011A4  43F9 00001F4A            221      LEA ENTER_MESSAGE, A1 *Prompt user to press enter to display new screen
000011AA  103C 000E                222      MOVE.B #14, D0
000011AE  4E4F                     223      TRAP #15
000011B0                           224      
000011B0  4244                     225      CLR      D4 
000011B2  103C 0005                226      MOVE.B   #5,D0          
000011B6  4E4F                     227      TRAP     #15            
000011B8  4E75                     228      RTS 
000011BA                           229  
000011BA                           230  *--Ask if user wants to disassemble more memory--*
000011BA                           231  REACHED_END
000011BA  43F9 00001FF6            232      LEA SPACE, A1
000011C0  103C 000E                233      MOVE.B #14,D0 
000011C4  4E4F                     234      TRAP #15 
000011C6                           235      
000011C6  43F9 00001FAE            236      LEA ASK_REPEAT,A1 
000011CC  103C 000E                237      MOVE.B #14,D0 
000011D0  4E4F                     238      TRAP #15 
000011D2                           239      
000011D2  103C 0004                240      MOVE.B #4,D0 
000011D6  4E4F                     241      TRAP #15 Read num from the keyboard into D1.L
000011D8                           242      
000011D8  0C01 0000                243      CMPI.B #0, D1 0 = yes
000011DC  6700 000A                244      BEQ CLEAR_REG
000011E0                           245      
000011E0  0C01 0001                246      CMPI.B #1,D1 1 = no
000011E4  6700 0F3A                247      BEQ DONE
000011E8                           248      
000011E8                           249  *--Clear all registers for reprocessing--*
000011E8                           250  CLEAR_REG 
000011E8  4241                     251      CLR D1
000011EA  4242                     252      CLR D2
000011EC  4243                     253      CLR D3
000011EE  4244                     254      CLR D4
000011F0  4245                     255      CLR D5
000011F2  4246                     256      CLR D6
000011F4                           257      
000011F4  207C 00000000            258      MOVE.L #00000000,A0
000011FA  227C 00000000            259      MOVE.L #00000000,A1
00001200  267C 00000000            260      MOVE.L #00000000,A3
00001206  287C 00000000            261      MOVE.L #00000000,A4
0000120C  2A7C 00000000            262      MOVE.L #00000000,A5
00001212  2C7C 00000000            263      MOVE.L #00000000,A6
00001218                           264      
00001218  6000 FDE6                265      BRA PROMPT_FOR_START
0000121C                           266  
0000121C                           267  START_OP
0000121C                           268  
0000121C                           269  NOP
0000121C  383C 4E71                270      MOVE.W  #$4E71,D4
00001220  B644                     271      CMP.W   D4,D3
00001222  6600 0010                272      BNE     RTS
00001226                           273      *Print instruction to output
00001226  43F9 00002082            274      LEA     PRNT_NOP,A1
0000122C  4EB9 00001E28            275      JSR PRINT_BUFF
00001232  4E75                     276      RTS *Return to I/O subroutine to find next instruction
00001234                           277  RTS
00001234  383C 4E75                278      MOVE.W  #$4E75,D4
00001238  B644                     279      CMP.W   D4,D3
0000123A  6600 0010                280      BNE     FIND_OP
0000123E                           281      *Print instruction
0000123E  43F9 00002086            282      LEA     PRNT_RTS,A1
00001244  4EB9 00001E28            283      JSR PRINT_BUFF
0000124A  4E75                     284      RTS
0000124C                           285  
0000124C                           286  FIND_OP *determine op code based on first 2 bits
0000124C  1C3C 000E                287      MOVE.B  #14,D6
00001250  3803                     288      MOVE.W  D3,D4
00001252  EC6C                     289      LSR.W   D6,D4
00001254                           290      
00001254  B83C 0000                291      CMP.B   #%00,D4 *MOVE,MOVEA
00001258  6700 001A                292      BEQ     OP_00
0000125C                           293      
0000125C  B83C 0001                294      CMP.B   #%01,D4 *MOVEQ, MOVEM, ADDQ, LEA, NOT, BGT/BLE/BEQ, JSR, BRA
00001260  6700 00C6                295      BEQ     OP_01
00001264                           296      
00001264  B83C 0002                297      CMP.B   #%10,D4 *OR,SUB
00001268  6700 03CA                298      BEQ     OP_10
0000126C                           299      
0000126C  B83C 0003                300      CMP.B   #%11,D4 *ADD,AND,LSL,LSR,ROL,ROR,ASL,ASR
00001270  6700 0518                301      BEQ     OP_11
00001274                           302      
00001274                           303  OP_00 *Determine if MOVE or MOVEA op code
00001274                           304  *Isolate bits 6,7,8
00001274  3803                     305      MOVE.W  D3,D4
00001276  EF4C                     306      LSL.W   #7,D4   *Remove first 7 bits
00001278  1C3C 000D                307      MOVE.B  #13,D6
0000127C  EC6C                     308      LSR.W   D6,D4   *Remove last 6 bits
0000127E  B87C 0001                309      CMP.W   #%001,D4
00001282  6700 0012                310      BEQ     IS_MOVEA
00001286                           311  IS_MOVE
00001286                           312      *Print MOVE
00001286  43F9 0000208A            313      LEA     PRNT_MOVE,A1
0000128C  4EB9 00001E28            314      JSR PRINT_BUFF
00001292                           315  
00001292  6000 000E                316      BRA     MOVE_SIZE
00001296                           317  
00001296                           318  IS_MOVEA
00001296                           319      *Print MOVEA
00001296  43F9 0000208F            320      LEA     PRNT_MOVEA,A1
0000129C  4EB9 00001E28            321      JSR PRINT_BUFF
000012A2                           322  MOVE_SIZE
000012A2  3803                     323      MOVE.W  D3,D4
000012A4  1C3C 000E                324      MOVE.B  #14,D6
000012A8  E54C                     325      LSL.W   #2,D4   *Remove first 2 bits
000012AA  EC6C                     326      LSR.W   D6,D4   *Remove last 12 bits to find size code
000012AC                           327      
000012AC  B83C 0001                328      CMP.B   #%01,D4
000012B0  6700 0016                329      BEQ     MOVE_B
000012B4                           330      
000012B4  B83C 0003                331      CMP.B   #%11,D4
000012B8  6700 002E                332      BEQ     MOVE_W
000012BC                           333      
000012BC  B83C 0002                334      CMP.B   #%10,D4
000012C0  6700 0046                335      BEQ     MOVE_L
000012C4  6000 0908                336      BRA     INVALID_OP   
000012C8                           337  MOVE_B    
000012C8                           338      *Print .B (byte)
000012C8  4EB9 00001B98            339      JSR PRINT_B
000012CE                           340      *Proceed to EA Subroutine
000012CE  4EB9 00001C84            341      JSR EA_SRC
000012D4  43F9 00001FFA            342      LEA COMMA,A1
000012DA  4EB9 00001E28            343      JSR PRINT_BUFF
000012E0                           344  
000012E0  4EB9 00001C9C            345      JSR EA_DEST
000012E6                           346      
000012E6  4E75                     347      RTS * Done printing move
000012E8                           348  MOVE_W    
000012E8                           349      *Print .W (word)
000012E8  4EB9 00001BAA            350      JSR PRINT_W
000012EE                           351      *Proceed to EA Subroutine
000012EE  4EB9 00001C84            352      JSR EA_SRC 
000012F4  43F9 00001FFA            353      LEA COMMA,A1
000012FA  4EB9 00001E28            354      JSR PRINT_BUFF
00001300  4EB9 00001C9C            355      JSR EA_DEST
00001306                           356  
00001306  4E75                     357      RTS
00001308                           358  MOVE_L
00001308                           359      *Print .L (long)
00001308  4EB9 00001BBC            360      JSR PRINT_L
0000130E                           361      *Proceed to EA Subroutine
0000130E  4EB9 00001C84            362      JSR EA_SRC
00001314  43F9 00001FFA            363      LEA COMMA,A1
0000131A  4EB9 00001E28            364      JSR PRINT_BUFF
00001320  4EB9 00001C9C            365      JSR EA_DEST
00001326                           366  
00001326  4E75                     367      RTS
00001328                           368  
00001328                           369  OP_01 *MOVEQ, MOVEM, ADDQ, LEA, NOT, BGT/BLE/BEQ, JSR, BRA
00001328  3803                     370      MOVE.W  D3,D4
0000132A  1C3C 000C                371      MOVE.B  #12,D6
0000132E  EC6C                     372      LSR.W   D6,D4   *get first 4 bits
00001330                           373      
00001330  B83C 0007                374      CMP.B   #%0111,D4   *MOVEQ
00001334  6700 001A                375      BEQ     OP_0111
00001338  B83C 0004                376      CMP.B   #%0100,D4   *MOVEM, LEA, NOT, JSR
0000133C  6700 0066                377      BEQ     OP_0100
00001340  B83C 0005                378      CMP.B   #%0101,D4   *ADDQ
00001344  6700 0192                379      BEQ     OP_0101
00001348  B83C 0006                380      CMP.B   #%0110,D4   *Bcc, BRA
0000134C  6700 020E                381      BEQ     OP_0110
00001350                           382      
00001350                           383  OP_0111 *MOVEQ
00001350                           384      *Check bit 8 to validate
00001350  2803                     385      MOVE.L  D3,D4
00001352  EF4C                     386      LSL.W   #7,D4
00001354  1C3C 000F                387      MOVE.B  #15,D6
00001358  EC6C                     388      LSR.W   D6,D4
0000135A  B83C 0000                389      CMP.B   #%0,D4
0000135E  6600 086E                390      BNE     INVALID_OP
00001362                           391  
00001362                           392      *Print MOVEQ
00001362  43F9 0000209B            393      LEA     PRNT_MOVEQ,A1
00001368  4EB9 00001E28            394      JSR PRINT_BUFF
0000136E                           395      
0000136E  2803                     396      MOVE.L  D3,D4
00001370  E14C                     397      LSL.W   #8,D4
00001372  E04C                     398      LSR.W   #8,D4
00001374                           399      *Print data
00001374                           400      
00001374                           401      ** Print # in front
00001374                           402      
00001374  43F9 000020FE            403      LEA     PRNT_Q,A1
0000137A  4EB9 00001E28            404      JSR PRINT_BUFF
00001380                           405      
00001380  2204                     406      MOVE.L  D4,D1
00001382  4EB9 00001E34            407      JSR     PRINT_HEXBUFF
00001388                           408      
00001388                           409      *** Move reg. bits into a bitfield for EA
00001388  3803                     410      MOVE.W  D3,D4
0000138A  C87C 0E00                411      AND.W   #%0000111000000000,D4
0000138E  E64C                     412      LSR.W   #3,D4
00001390  EC4C                     413      LSR.W   #6,D4
00001392  1C04                     414      MOVE.B  D4,D6
00001394                           415      
00001394  48E7 FF00                416      MOVEM.L D0-D7,-(SP)
00001398                           417      
00001398  4EB9 00001CC8            418      JSR     EA_SUB
0000139E                           419      
0000139E  4CDF 00FF                420      MOVEM.L (SP)+,D0-D7
000013A2                           421     
000013A2  4E75                     422      RTS
000013A4                           423      
000013A4                           424  * HAD TO REORDER INSTRUCTIONS HERE;
000013A4                           425      * Before, MOVEM or JSR check was first, which needed 5 bits.
000013A4                           426      * The ones with fewer bits need to be done first, as this was causing the following:
000013A4                           427          * LEA would have first 4 bits as 0100, and the following 3 bits were address register specifier bits
000013A4                           428          * If that register happened to be anything that toggled the first bit to 1, LEA first five bits matches that of MOVEM and JSR!
000013A4                           429          * Would cause LEA to not be read correctly with certain register values. 
000013A4                           430     
000013A4                           431  OP_0100 *MOVEM, LEA, NOT, JSR
000013A4                           432      *Check if LEA (Now before MOVEM/JSR Check)
000013A4  2803                     433      MOVE.L  D3,D4
000013A6  EF4C                     434      LSL.W   #7,D4
000013A8  1C3C 000D                435      MOVE.B  #13,D6
000013AC  EC6C                     436      LSR.W   D6,D4
000013AE  B83C 0007                437      CMP.B   #%111,D4    *Check bits 8,7,6
000013B2  6700 0016                438      BEQ     IS_LEA
000013B6                           439  
000013B6  2803                     440      MOVE.L  D3,D4
000013B8  1C3C 000B                441      MOVE.B  #11,D6
000013BC  EC6C                     442      LSR.W   D6,D4
000013BE  B83C 0009                443      CMP.B   #%01001,D4  *MOVEM or JSR
000013C2  6700 00A8                444      BEQ     OP_01001
000013C6                           445      
000013C6  6000 0044                446      BRA     IS_NOT *** CHECK THIS, THINK THIS WORKS, BUT HAVEN'T TESTED ****************
000013CA                           447      
000013CA                           448      
000013CA                           449  IS_LEA
000013CA  43F9 000020BC            450      LEA     PRNT_LEA,A1
000013D0  4EB9 00001E28            451      JSR     PRINT_BUFF
000013D6                           452      * HANDLE OPERANDS
000013D6  1A3C 0003                453      MOVE.B  #3,D5 * Size operation is always longword for LEA, so set here.
000013DA                           454      
000013DA  4EB9 00001C84            455      JSR EA_SRC * Handle the source EA
000013E0                           456      
000013E0  2803                     457      MOVE.L  D3,D4 **** CHANGED TO LONGWORD TO POTENTIALLY DEAL WITH BAD DATA AT FRONT WORD. *******************
000013E2  C87C 0E00                458      AND.W   #%0000111000000000,D4 * Isolate Register #
000013E6  E64C                     459      LSR.W   #3,D4
000013E8  EC4C                     460      LSR.W   #6,D4
000013EA  1C04                     461      MOVE.B  D4,D6   * Prime D6 register
000013EC  8C3C 0008                462      OR.B    #%00001000,D6 * Add the An mode to D6
000013F0                           463      
000013F0  48E7 FF00                464      MOVEM.L D0-D7,-(SP) * Move register contents to stack (NOT SAVING D7 ANYMORE*******************)
000013F4                           465      
000013F4  43F9 00001FFA            466      LEA COMMA,A1
000013FA  4EB9 00001E28            467      JSR PRINT_BUFF
00001400                           468  
00001400  4EB9 00001CC8            469      JSR     EA_SUB * Handle the destination EA (last 6 bits of D6)
00001406                           470      
00001406                           471      * MOVEM RETURN (NOT SAVING D7 ANYMORE*******************)
00001406  4CDF 00FF                472      MOVEM.L (SP)+,D0-D7
0000140A                           473          
0000140A  4E75                     474      RTS * Return to IO
0000140C                           475  
0000140C                           476  
0000140C                           477  
0000140C                           478  IS_NOT    
0000140C  2803                     479      MOVE.L  D3,D4
0000140E  E04C                     480      LSR.W   #8,D4
00001410  B87C 0046                481      CMP.W   #%01000110,D4
00001414  6600 07B8                482      BNE     INVALID_OP
00001418                           483      
00001418  43F9 000020B5            484      LEA     PRNT_NOT,A1
0000141E  4EB9 00001E28            485      JSR PRINT_BUFF
00001424                           486      
00001424  2803                     487      MOVE.L  D3,D4
00001426  E14C                     488      LSL.W   #8,D4
00001428  1C3C 000E                489      MOVE.B  #14,D6
0000142C  EC6C                     490      LSR.W   D6,D4 
0000142E  B83C 0000                491      CMP.B   #%00,D4
00001432  6700 0016                492      BEQ     NOT_B
00001436  B83C 0001                493      CMP.B   #%01,D4
0000143A  6700 0018                494      BEQ     NOT_W
0000143E  B83C 0002                495      CMP.B   #%10,D4
00001442  6700 001A                496      BEQ     NOT_L
00001446                           497  
00001446  6000 0786                498      BRA     INVALID_OP    
0000144A                           499  NOT_B
0000144A  4EB9 00001B98            500      JSR PRINT_B
00001450                           501      *Proceed to EA Subroutine  
00001450  6000 0012                502      BRA NOT_EA  
00001454                           503  NOT_W
00001454  4EB9 00001BAA            504      JSR PRINT_W
0000145A                           505      *Proceed to EA Subroutine
0000145A  6000 0008                506      BRA NOT_EA    
0000145E                           507  NOT_L
0000145E  4EB9 00001BBC            508      JSR PRINT_L 
00001464                           509      *Proceed to EA Subroutine
00001464                           510      
00001464                           511  NOT_EA * DEALING W/ NOT EA HERE (May need to save registers...) *************
00001464                           512      
00001464  4EB9 00001C84            513      JSR EA_SRC
0000146A  4E75                     514      RTS *** Return to IO ***
0000146C                           515      
0000146C                           516      
0000146C                           517  OP_01001    
0000146C  2803                     518      MOVE.L  D3,D4
0000146E  EC4C                     519      LSR.W   #6,D4
00001470  B87C 013A                520      CMP.W   #%0100111010,D4 *Check if JSR
00001474  6600 0016                521      BNE     IS_MOVEM
00001478  43F9 000020A1            522      LEA     PRNT_JSR,A1
0000147E  4EB9 00001E28            523      JSR     PRINT_BUFF
00001484  4EB9 00001C84            524      JSR     EA_SRC
0000148A  4E75                     525      RTS     *Proceed to EA Subroutine    
0000148C                           526  IS_MOVEM
0000148C                           527      *Check bits 9,8,7 to validate   
0000148C  2803                     528      MOVE.L  D3,D4
0000148E  ED4C                     529      LSL.W   #6,D4
00001490  1C3C 000D                530      MOVE.B  #13,D6
00001494  EC6C                     531      LSR.W   D6,D4
00001496  B83C 0001                532      CMP.B   #%001,D4
0000149A  6600 0732                533      BNE     INVALID_OP
0000149E                           534      
0000149E  43F9 00002095            535      LEA     PRNT_MOVEM,A1
000014A4  4EB9 00001E28            536      JSR PRINT_BUFF
000014AA                           537      
000014AA  2803                     538      MOVE.L  D3,D4
000014AC  1C3C 0009                539      MOVE.B  #9,D6
000014B0  ED6C                     540      LSL.W   D6,D4
000014B2  1C3C 000F                541      MOVE.B  #15,D6
000014B6  EC6C                     542      LSR.W   D6,D4
000014B8                           543      
000014B8  B83C 0000                544      CMP.B   #0,D4
000014BC  6700 000E                545      BEQ     MOVEM_W
000014C0  B83C 0001                546      CMP.B   #1,D4
000014C4  6700 000C                547      BEQ     MOVEM_L    
000014C8  6000 0704                548      BRA     INVALID_OP   
000014CC                           549  MOVEM_W
000014CC  4EB9 00001BAA            550      JSR PRINT_W
000014D2                           551      *Proceed to EA Subroutine    
000014D2                           552  MOVEM_L
000014D2  4EB9 00001BBC            553      JSR PRINT_L
000014D8                           554      *Proceed to EA Subroutine    
000014D8                           555  OP_0101 *ADDQ
000014D8                           556      *Check bit 8 to validate
000014D8  2803                     557      MOVE.L  D3,D4
000014DA  EF4C                     558      LSL.W   #7,D4
000014DC  1C3C 000F                559      MOVE.B  #15,D6
000014E0  EC6C                     560      LSR.W   D6,D4
000014E2  B83C 0000                561      CMP.B   #%0,D4
000014E6  6600 06E6                562      BNE     INVALID_OP
000014EA                           563  
000014EA                           564      *Print ADDQ
000014EA  43F9 000020C0            565      LEA     PRNT_ADDQ,A1
000014F0  4EB9 00001E28            566      JSR     PRINT_BUFF
000014F6                           567      
000014F6  2803                     568      MOVE.L  D3,D4
000014F8  E14C                     569      LSL.W   #8,D4   *Remove first 8 bits
000014FA  1C3C 000E                570      MOVE.B  #14,D6
000014FE  EC6C                     571      LSR.W   D6,D4   *and last 6 bits to get size
00001500                           572      
00001500  B83C 0000                573      CMP.B   #%00,D4
00001504  6700 0012                574      BEQ     ADDQ_B
00001508  B83C 0001                575      CMP.B   #%01,D4
0000150C  6700 0014                576      BEQ     ADDQ_W
00001510  B83C 0002                577      CMP.B   #%10,D4
00001514  6700 0016                578      BEQ     ADDQ_L
00001518                           579      
00001518                           580  ADDQ_B    
00001518                           581      *Print .B
00001518  4EB9 00001B98            582      JSR PRINT_B
0000151E  6000 0016                583      BRA     ADDQ_DATA
00001522                           584      
00001522                           585  ADDQ_W     
00001522                           586      *Print .W
00001522  4EB9 00001BAA            587      JSR PRINT_W
00001528  6000 000C                588      BRA     ADDQ_DATA
0000152C                           589      
0000152C                           590  ADDQ_L     
0000152C                           591      *Print .L
0000152C  4EB9 00001BBC            592      JSR PRINT_L
00001532  6000 0002                593      BRA     ADDQ_DATA
00001536                           594  ADDQ_DATA    
00001536  2803                     595      MOVE.L  D3,D4
00001538  E94C                     596      LSL.W   #4,D4   *Remove first 4 bits
0000153A  1C3C 000D                597      MOVE.B  #13,D6
0000153E  EC6C                     598      LSR.W   D6,D4
00001540                           599      
00001540                           600      *Print data
00001540  43F9 000020FE            601      LEA     PRNT_Q,A1
00001546  4EB9 00001E28            602      JSR     PRINT_BUFF
0000154C                           603      
0000154C  3204                     604      MOVE.W  D4,D1
0000154E  4EB9 00001E34            605      JSR     PRINT_HEXBUFF
00001554                           606      
00001554                           607      * Handle EA
00001554  4EB9 00001C84            608      JSR     EA_SRC
0000155A                           609      
0000155A  4E75                     610      RTS * Return to IO
0000155C                           611      
0000155C                           612      *Proceed to EA Subroutine
0000155C                           613  OP_0110    
0000155C  2803                     614      MOVE.L  D3,D4
0000155E  1C3C 000C                615      MOVE.B  #12,D6
00001562  E94C                     616      LSL.W   #4,D4
00001564  EC6C                     617      LSR.W   D6,D4
00001566                           618      
00001566  B87C 0000                619      CMP.W   #%0000,D4
0000156A  6700 001E                620      BEQ     IS_BRA
0000156E                           621      
0000156E  B87C 000E                622      CMP.W   #%1110,D4
00001572  6700 002A                623      BEQ     IS_BGT
00001576                           624      
00001576  B87C 000F                625      CMP.W   #%1111,D4
0000157A  6700 0036                626      BEQ     IS_BLE
0000157E                           627      
0000157E  B87C 0007                628      CMP.W   #%0111,D4
00001582  6700 0042                629      BEQ     IS_BEQ
00001586                           630      
00001586  6000 0646                631      BRA     INVALID_OP
0000158A                           632  IS_BRA
0000158A  43F9 000020B1            633      LEA     PRNT_BRA,A1
00001590  4EB9 00001E28            634      JSR     PRINT_BUFF
00001596  4EB9 000015DA            635      JSR DISP
0000159C  4E75                     636      RTS
0000159E                           637      
0000159E                           638  IS_BGT
0000159E  43F9 000020A5            639      LEA     PRNT_BGT,A1
000015A4  4EB9 00001E28            640      JSR     PRINT_BUFF
000015AA  4EB9 000015DA            641      JSR DISP
000015B0  4E75                     642      RTS
000015B2                           643  IS_BLE
000015B2  43F9 000020A9            644      LEA     PRNT_BLE,A1
000015B8  4EB9 00001E28            645      JSR     PRINT_BUFF
000015BE  4EB9 000015DA            646      JSR DISP
000015C4  4E75                     647      RTS
000015C6                           648  IS_BEQ  
000015C6  43F9 000020AD            649      LEA     PRNT_BEQ,A1
000015CC  4EB9 00001E28            650      JSR     PRINT_BUFF
000015D2  4EB9 000015DA            651      JSR DISP
000015D8  4E75                     652      RTS  
000015DA                           653  *------------SIZE AFFECT DISP VALUE?---------------
000015DA                           654  DISP *8 bit displacement field
000015DA  2803                     655      MOVE.L  D3,D4
000015DC  E14C                     656      LSL.W   #8,D4
000015DE  E04C                     657      LSR.W   #8,D4   *Holds displacement value
000015E0  C87C 00FF                658      AND.W   #$00FF,D4
000015E4                           659      
000015E4  B87C 0000                660      CMP.W   #$00,D4
000015E8  6700 001E                661      BEQ     DISP_16
000015EC  B87C 00FF                662      CMP.W   #$FF,D4
000015F0  6700 002C                663      BEQ     DISP_32
000015F4                           664  
000015F4  2A4B                     665      MOVEA.L A3,A5
000015F6  2C0D                     666      MOVE.L  A5,D6 *Holds next instruction address
000015F8  4604                     667      NOT.B   D4  *flip bits
000015FA  5284                     668      ADD.L   #%01,D4
000015FC                           669      
000015FC  9C44                     670      SUB.W   D4,D6 
000015FE  2206                     671      MOVE.L  D6,D1
00001600                           672      *=MOVE.B  #16,D2
00001600                           673      *=MOVE.B  #15,D0
00001600                           674      *TRAP    #15
00001600  4EB9 00001E34            675      JSR     PRINT_HEXBUFF
00001606  4E75                     676      RTS    
00001608                           677  DISP_16
00001608  381B                     678      MOVE.W  (A3)+,D4
0000160A  2A4B                     679      MOVEA.L A3,A5
0000160C  2C0D                     680      MOVE.L A5,D6 *Holds next instruction address
0000160E  4604                     681      NOT.B   D4
00001610  5284                     682      ADD.L   #%01,D4
00001612                           683      
00001612  9C44                     684      SUB.W   D4,D6
00001614  2206                     685      MOVE.L  D6,D1
00001616                           686      *=MOVE.B  #16,D2
00001616                           687      *=MOVE.B  #15,D0
00001616                           688      *TRAP    #15
00001616  4EB9 00001E34            689      JSR     PRINT_HEXBUFF
0000161C  4E75                     690      RTS
0000161E                           691  DISP_32    
0000161E  281B                     692      MOVE.L  (A3)+,D4
00001620  2A4B                     693      MOVEA.L A3,A5
00001622  2C0D                     694      MOVE.L  A5,D6 *Holds next instruction address
00001624  4604                     695      NOT.B   D4
00001626  5284                     696      ADD.L   #%01,D4
00001628                           697      
00001628  9C44                     698      SUB.W   D4,D6
0000162A  2206                     699      MOVE.L  D6,D1
0000162C  4EB9 00001E34            700      JSR     PRINT_HEXBUFF
00001632                           701      * MOVE.B  #16,D2
00001632                           702      * MOVE.B  #15,D0
00001632                           703      * TRAP    #15
00001632  4E75                     704      RTS
00001634                           705  OP_10   *OR,SUB
00001634  2803                     706      MOVE.L  D3,D4
00001636  E54C                     707      LSL.W   #2,D4
00001638  1C3C 000E                708      MOVE.B  #14,D6
0000163C  EC6C                     709      LSR.W   D6,D4
0000163E  B83C 0000                710      CMP.B   #%00,D4 *Check bits 13 and 12
00001642  6700 000E                711      BEQ     IS_OR
00001646                           712      
00001646  B83C 0001                713      CMP.B   #%01,D4
0000164A  6700 00A4                714      BEQ     IS_SUB
0000164E                           715      
0000164E  6000 057E                716      BRA     INVALID_OP
00001652                           717  IS_OR
00001652  43F9 000020B9            718      LEA     PRNT_OR,A1
00001658  4EB9 00001E28            719      JSR     PRINT_BUFF
0000165E                           720      
0000165E  2803                     721      MOVE.L  D3,D4
00001660  EF4C                     722      LSL.W   #7,D4
00001662  1C3C 000D                723      MOVE.B  #13,D6
00001666  EC6C                     724      LSR.W   D6,D4
00001668                           725      
00001668                           726      * Destination is Dn
00001668  B83C 0000                727      CMP.B   #%000,D4
0000166C  6700 002E                728      BEQ     OR_B_D
00001670  B83C 0001                729      CMP.B   #%001,D4
00001674  6700 0034                730      BEQ     OR_W_D
00001678  B83C 0002                731      CMP.B   #%010,D4
0000167C  6700 003A                732      BEQ     OR_L_D
00001680                           733      
00001680  B83C 0004                734      CMP.B   #%100,D4
00001684  6700 0040                735      BEQ     OR_B
00001688  B83C 0005                736      CMP.B   #%101,D4
0000168C  6700 0046                737      BEQ     OR_W
00001690  B83C 0006                738      CMP.B   #%110,D4
00001694  6700 004C                739      BEQ     OR_L
00001698                           740      
00001698  6000 0534                741      BRA     INVALID_OP
0000169C                           742  
0000169C                           743  
0000169C                           744  
0000169C                           745  
0000169C                           746  * For these, handle EA first, then Data reg.
0000169C                           747  OR_B_D
0000169C  4EB9 00001B98            748      JSR PRINT_B
000016A2                           749      *Proceed to EA Subroutine
000016A2  4EB9 00001C26            750      JSR     ADDFORMAT_DATA_DEST_EA
000016A8                           751      
000016A8  4E75                     752      RTS * Return to IO
000016AA                           753      
000016AA                           754  OR_W_D
000016AA  4EB9 00001BAA            755      JSR PRINT_W
000016B0                           756      *Proceed to EA Subroutine
000016B0  4EB9 00001C26            757      JSR     ADDFORMAT_DATA_DEST_EA
000016B6                           758      
000016B6  4E75                     759      RTS * Return to IO    
000016B8                           760  OR_L_D
000016B8  4EB9 00001BBC            761      JSR PRINT_L
000016BE                           762      *Proceed to EA Subroutine
000016BE  4EB9 00001C26            763      JSR     ADDFORMAT_DATA_DEST_EA
000016C4                           764      
000016C4  4E75                     765      RTS * Return to IO
000016C6                           766  
000016C6                           767  
000016C6                           768  * For these, handle Data reg first, then EA    
000016C6                           769  OR_B
000016C6  4EB9 00001B98            770      JSR PRINT_B
000016CC                           771      *Proceed to EA Subroutine
000016CC  4EB9 00001C54            772      JSR     ADDFORMAT_EA_DEST_EA
000016D2  4E75                     773      RTS * Return to IO 
000016D4                           774      
000016D4                           775  OR_W
000016D4  4EB9 00001BAA            776      JSR PRINT_W
000016DA                           777      *Proceed to EA Subroutine
000016DA  4EB9 00001C54            778      JSR     ADDFORMAT_EA_DEST_EA
000016E0  4E75                     779      RTS * Return to IO 
000016E2                           780      
000016E2                           781  OR_L
000016E2  4EB9 00001BBC            782      JSR PRINT_L
000016E8                           783      *Proceed to EA Subroutine
000016E8  4EB9 00001C54            784      JSR     ADDFORMAT_EA_DEST_EA
000016EE  4E75                     785      RTS * Return to IO 
000016F0                           786      
000016F0                           787  IS_SUB
000016F0  43F9 000020D2            788      LEA     PRNT_SUB,A1
000016F6  4EB9 00001E28            789      JSR     PRINT_BUFF
000016FC                           790  
000016FC  2803                     791      MOVE.L  D3,D4
000016FE  EF4C                     792      LSL.W   #7,D4
00001700  1C3C 000D                793      MOVE.B  #13,D6
00001704  EC6C                     794      LSR.W   D6,D4
00001706                           795      
00001706                           796      * Data register as destination;
00001706  B83C 0000                797      CMP.B   #%000,D4
0000170A  6700 002A                798      BEQ     SUB_B_D
0000170E  B83C 0001                799      CMP.B   #%001,D4
00001712  6700 0030                800      BEQ     SUB_W_D
00001716  B83C 0002                801      CMP.B   #%010,D4
0000171A  6700 0036                802      BEQ     SUB_L_D
0000171E                           803  
0000171E                           804      * EA as destination;
0000171E  B83C 0004                805      CMP.B   #%100,D4
00001722  6700 003C                806      BEQ     SUB_B
00001726  B83C 0005                807      CMP.B   #%101,D4
0000172A  6700 0042                808      BEQ     SUB_W
0000172E  B83C 0006                809      CMP.B   #%110,D4
00001732  6700 0048                810      BEQ     SUB_L
00001736                           811  
00001736                           812  
00001736                           813  * Handle EA, then Data Reg.
00001736                           814  SUB_B_D
00001736  4EB9 00001B98            815      JSR PRINT_B
0000173C                           816      *Proceed to EA Subroutine
0000173C  4EB9 00001C26            817      JSR     ADDFORMAT_DATA_DEST_EA
00001742                           818      
00001742  4E75                     819      RTS * Return to IO    
00001744                           820  SUB_W_D
00001744  4EB9 00001BAA            821      JSR PRINT_W
0000174A                           822      *Proceed to EA Subroutine
0000174A  4EB9 00001C26            823      JSR     ADDFORMAT_DATA_DEST_EA
00001750                           824      
00001750  4E75                     825      RTS * Return to IO    
00001752                           826  SUB_L_D
00001752  4EB9 00001BBC            827      JSR PRINT_L
00001758                           828      *Proceed to EA Subroutine 
00001758  4EB9 00001C26            829      JSR     ADDFORMAT_DATA_DEST_EA
0000175E                           830      
0000175E  4E75                     831      RTS * Return to IO
00001760                           832  
00001760                           833  
00001760                           834  * Handle Data reg, then EA    
00001760                           835  SUB_B
00001760  4EB9 00001B98            836      JSR PRINT_B
00001766                           837      *Proceed to EA Subroutine
00001766  4EB9 00001C54            838      JSR     ADDFORMAT_EA_DEST_EA
0000176C  4E75                     839      RTS * Return to IO     
0000176E                           840  SUB_W
0000176E  4EB9 00001BAA            841      JSR PRINT_W
00001774                           842      *Proceed to EA Subroutine    
00001774  4EB9 00001C54            843      JSR     ADDFORMAT_EA_DEST_EA
0000177A  4E75                     844      RTS * Return to IO 
0000177C                           845  SUB_L
0000177C  4EB9 00001BBC            846      JSR PRINT_L
00001782                           847      *Proceed to EA Subroutine 
00001782  4EB9 00001C54            848      JSR     ADDFORMAT_EA_DEST_EA
00001788  4E75                     849      RTS * Return to IO     
0000178A                           850  
0000178A                           851     
0000178A                           852  OP_11
0000178A  2803                     853      MOVE.L  D3,D4
0000178C  1C3C 000C                854      MOVE.B  #12,D6
00001790  EC6C                     855      LSR.W   D6,D4
00001792                           856      
00001792  B83C 000C                857      CMP.B   #%1100,D4   *AND
00001796  6700 0016                858      BEQ     OP_1100
0000179A                           859      
0000179A  B83C 000D                860      CMP.B   #%1101,D4   *ADD,ADDA
0000179E  6700 00AC                861      BEQ     OP_1101
000017A2                           862      
000017A2  B83C 000E                863      CMP.B   #%1110,D4   *LSL/LSR,ASL/ASR,ROL/ROR
000017A6  6700 019E                864      BEQ     OP_1110
000017AA                           865      
000017AA  6000 0422                866      BRA     INVALID_OP
000017AE                           867  OP_1100 *AND
000017AE  43F9 000020CE            868      LEA     PRNT_AND,A1
000017B4  4EB9 00001E28            869      JSR     PRINT_BUFF
000017BA                           870  
000017BA  2803                     871      MOVE.L  D3,D4
000017BC  EF4C                     872      LSL.W   #7,D4
000017BE  1C3C 000D                873      MOVE.B  #13,D6
000017C2  EC6C                     874      LSR.W   D6,D4 *Get Opmode
000017C4                           875      *< ea > Dn -> Dn (Data reg destination)
000017C4  B83C 0000                876      CMP.B   #%000,D4
000017C8  6700 002E                877      BEQ     AND_B_D
000017CC  B83C 0001                878      CMP.B   #%001,D4
000017D0  6700 0034                879      BEQ     AND_W_D
000017D4  B83C 0002                880      CMP.B   #%010,D4
000017D8  6700 003A                881      BEQ     AND_L_D
000017DC                           882      *Dn < ea > -> < ea > (EA destination)
000017DC  B83C 0004                883      CMP.B   #%100,D4
000017E0  6700 0040                884      BEQ     AND_B
000017E4  B83C 0005                885      CMP.B   #%101,D4
000017E8  6700 0046                886      BEQ     AND_W
000017EC  B83C 0006                887      CMP.B   #%110,D4
000017F0  6700 004C                888      BEQ     AND_L
000017F4                           889      
000017F4  6000 03D8                890      BRA     INVALID_OP
000017F8                           891     
000017F8                           892  * Handle EA, then Data Reg.
000017F8                           893  AND_B_D
000017F8  4EB9 00001B98            894      JSR PRINT_B
000017FE                           895      *Proceed to EA Subroutine
000017FE  4EB9 00001C26            896      JSR     ADDFORMAT_DATA_DEST_EA
00001804                           897      
00001804  4E75                     898      RTS * Return to IO
00001806                           899      
00001806                           900  AND_W_D
00001806  4EB9 00001BAA            901      JSR PRINT_W
0000180C                           902      *Proceed to EA Subroutine    
0000180C  4EB9 00001C26            903      JSR     ADDFORMAT_DATA_DEST_EA
00001812                           904      
00001812  4E75                     905      RTS * Return to IO
00001814                           906  
00001814                           907  AND_L_D  
00001814  4EB9 00001BBC            908      JSR PRINT_L
0000181A                           909      *Proceed to EA Subroutine    
0000181A  4EB9 00001C26            910      JSR     ADDFORMAT_DATA_DEST_EA
00001820                           911      
00001820  4E75                     912      RTS * Return to IO
00001822                           913  
00001822                           914      
00001822                           915  * Handle data reg, then EA     
00001822                           916  AND_B
00001822  4EB9 00001B98            917      JSR PRINT_B
00001828                           918      *Proceed to EA Subroutine
00001828  4EB9 00001C54            919      JSR     ADDFORMAT_EA_DEST_EA
0000182E  4E75                     920      RTS * Return to IO 
00001830                           921      
00001830                           922  AND_W
00001830  4EB9 00001BAA            923      JSR PRINT_W
00001836                           924      *Proceed to EA Subroutine    
00001836  4EB9 00001C54            925      JSR     ADDFORMAT_EA_DEST_EA
0000183C  4E75                     926      RTS * Return to IO 
0000183E                           927  
0000183E                           928  AND_L    
0000183E  4EB9 00001BBC            929      JSR PRINT_L
00001844                           930      *Proceed to EA Subroutine  
00001844  4EB9 00001C54            931      JSR     ADDFORMAT_EA_DEST_EA
0000184A  4E75                     932      RTS * Return to IO 
0000184C                           933  
0000184C                           934      
0000184C                           935      
0000184C                           936  OP_1101 *ADD,ADDA
0000184C  2803                     937      MOVE.L  D3,D4
0000184E  EF4C                     938      LSL.W   #7,D4
00001850  1C3C 000D                939      MOVE.B  #13,D6
00001854  EC6C                     940      LSR.W   D6,D4 *Get Opmode
00001856                           941      
00001856                           942      *ADD Opmodes
00001856                           943      *< ea > Dn -> Dn (Dn is the destination; Print <ea> first, then data register)
00001856                           944          * Added new branches to differentiate between orders.
00001856  B83C 0000                945      CMP.B   #%000,D4
0000185A  6700 005A                946      BEQ     ADD_B_D
0000185E  B83C 0001                947      CMP.B   #%001,D4
00001862  6700 0064                948      BEQ     ADD_W_D
00001866  B83C 0002                949      CMP.B   #%010,D4
0000186A  6700 006E                950      BEQ     ADD_L_D
0000186E                           951      
0000186E                           952      
0000186E                           953      *Dn < ea > -> < ea > (EA is the destination; Print data reg first, then <ea>)
0000186E  B83C 0004                954      CMP.B   #%100,D4
00001872  6700 0078                955      BEQ     ADD_B
00001876  B83C 0005                956      CMP.B   #%101,D4
0000187A  6700 0082                957      BEQ     ADD_W
0000187E  B83C 0006                958      CMP.B   #%110,D4
00001882  6700 008C                959      BEQ     ADD_L
00001886                           960      
00001886                           961      
00001886                           962      *ADDA Opmodes
00001886  B83C 0003                963      CMP.B   #%011,D4
0000188A  6700 0096                964      BEQ     ADDA_W
0000188E  B83C 0007                965      CMP.B   #%111,D4
00001892  6700 00A0                966      BEQ     ADDA_L
00001896                           967       
00001896                           968      
00001896  6000 0336                969      BRA     INVALID_OP
0000189A                           970  
0000189A                           971  IS_ADD
0000189A  43F9 000020C5            972      LEA     PRNT_ADD,A1
000018A0  4EB9 00001E28            973      JSR     PRINT_BUFF
000018A6  4E75                     974      RTS
000018A8                           975  IS_ADDA
000018A8  43F9 000020C9            976      LEA     PRNT_ADDA,A1
000018AE  4EB9 00001E28            977      JSR     PRINT_BUFF
000018B4  4E75                     978      RTS   
000018B6                           979  
000018B6                           980  * For these, handle EA first, then Data reg.
000018B6                           981  ADD_B_D
000018B6  4EB8 189A                982      JSR     IS_ADD
000018BA  4EB9 00001B98            983      JSR     PRINT_B
000018C0                           984      * Handle operands
000018C0  4EB9 00001C26            985      JSR     ADDFORMAT_DATA_DEST_EA
000018C6                           986      
000018C6  4E75                     987      RTS * Return to IO
000018C8                           988      
000018C8                           989  ADD_W_D
000018C8  4EB8 189A                990      JSR     IS_ADD
000018CC  4EB9 00001BAA            991      JSR     PRINT_W
000018D2                           992      * Handle operands
000018D2  4EB9 00001C26            993      JSR     ADDFORMAT_DATA_DEST_EA
000018D8                           994      
000018D8  4E75                     995      RTS * Return to IO    
000018DA                           996  ADD_L_D
000018DA  4EB8 189A                997      JSR     IS_ADD
000018DE  4EB9 00001BBC            998      JSR     PRINT_L
000018E4                           999      * Handle operands
000018E4  4EB9 00001C26           1000      JSR     ADDFORMAT_DATA_DEST_EA
000018EA                          1001      
000018EA  4E75                    1002      RTS * Return to IO
000018EC                          1003  
000018EC                          1004  
000018EC                          1005  * For these, handle data reg first, then EA.
000018EC                          1006  ADD_B
000018EC  4EB8 189A               1007      JSR     IS_ADD
000018F0  4EB9 00001B98           1008      JSR     PRINT_B
000018F6                          1009      *Proceed to EA Subroutine
000018F6  4EB9 00001C54           1010      JSR     ADDFORMAT_EA_DEST_EA
000018FC  4E75                    1011      RTS * Return to IO 
000018FE                          1012      
000018FE                          1013  ADD_W
000018FE  4EB8 189A               1014      JSR     IS_ADD
00001902  4EB9 00001BAA           1015      JSR     PRINT_W
00001908                          1016      *Proceed to EA Subroutine    
00001908  4EB9 00001C54           1017      JSR     ADDFORMAT_EA_DEST_EA
0000190E  4E75                    1018      RTS * Return to IO 
00001910                          1019      
00001910                          1020  ADD_L
00001910  4EB8 189A               1021      JSR     IS_ADD
00001914  4EB9 00001BBC           1022      JSR     PRINT_L
0000191A                          1023      *Proceed to EA Subroutine
0000191A  4EB9 00001C54           1024      JSR     ADDFORMAT_EA_DEST_EA
00001920  4E75                    1025      RTS * Return to IO 
00001922                          1026  
00001922                          1027  
00001922                          1028  * Destination must be An, so do data reg first, then EA (POTENTIAL BUG, CHECK ********************)
00001922                          1029  ADDA_W
00001922  4EB8 18A8               1030      JSR     IS_ADDA
00001926  4EB9 00001BAA           1031      JSR     PRINT_W
0000192C                          1032      *Proceed to EA Subroutine
0000192C  4EB9 00001C54           1033      JSR     ADDFORMAT_EA_DEST_EA
00001932  4E75                    1034      RTS * Return to IO 
00001934                          1035      
00001934                          1036  ADDA_L  
00001934  4EB8 18A8               1037      JSR     IS_ADDA  
00001938  4EB9 00001BBC           1038      JSR     PRINT_L
0000193E                          1039      *Proceed to EA Subroutine
0000193E  4EB9 00001C54           1040      JSR     ADDFORMAT_EA_DEST_EA
00001944  4E75                    1041      RTS * Return to IO 
00001946                          1042  
00001946                          1043      
00001946                          1044      
00001946                          1045  OP_1110 *LSL/LSR,ASL/ASR,ROL/ROR (ADDED: Using D2 to track Mem/Reg state (0 = Reg, 1 = Mem) (D2 only used in hex input tester, so good to use))
00001946                          1046  
00001946                          1047      *Memory Shift Check bits 6,7
00001946  2803                    1048      MOVE.L  D3,D4
00001948  E14C                    1049      LSL.W   #8,D4
0000194A  7C0E                    1050      MOVE.L  #14,D6
0000194C  EC6C                    1051      LSR.W   D6,D4
0000194E                          1052      
0000194E  B83C 0003               1053      CMP.B   #%11,D4
00001952  6600 0024               1054      BNE     REG
00001956                          1055      *Memory Shift check bits 11,10,9
00001956  2803                    1056      MOVE.L  D3,D4
00001958  E94C                    1057      LSL.W   #4,D4
0000195A  1C3C 000D               1058      MOVE.B  #13,D6
0000195E  EC6C                    1059      LSR.W   D6,D4
00001960                          1060      
00001960  B83C 0000               1061      CMP.B   #%000,D4 *ASL/ASR
00001964  6700 0064               1062      BEQ     A_MEM
00001968  B83C 0001               1063      CMP.B   #%001,D4 *LSL,LSR
0000196C  6700 00D0               1064      BEQ     L_MEM
00001970  B83C 0003               1065      CMP.B   #%011,D4 *ROL/ROR
00001974  6700 013C               1066      BEQ     R_MEM
00001978                          1067      
00001978                          1068      *Register Shift check bits 4,3
00001978  2803                    1069  REG MOVE.L  D3,D4
0000197A  1C3C 000B               1070      MOVE.B  #11,D6
0000197E  ED6C                    1071      LSL.W   D6,D4
00001980  1C3C 000E               1072      MOVE.B  #14,D6
00001984  EC6C                    1073      LSR.W   D6,D4
00001986                          1074      
00001986  B83C 0000               1075      CMP.B   #%00,D4 *ASL/ASR
0000198A  6700 0016               1076      BEQ     A_REG
0000198E  B83C 0001               1077      CMP.B   #%01,D4 *LSL/LSR
00001992  6700 0082               1078      BEQ     L_REG
00001996  B83C 0003               1079      CMP.B   #%11,D4 *ROL/ROR
0000199A  6700 00EE               1080      BEQ     R_REG
0000199E                          1081      
0000199E                          1082      
0000199E  6000 022E               1083      BRA     INVALID_OP
000019A2                          1084      
000019A2                          1085      *Check bit 8 to determine L/R shift
000019A2                          1086  A_REG
000019A2  4EB9 00001AFE           1087      JSR     RGHT_LFT
000019A8                          1088      
000019A8  143C 0000               1089      MOVE.B  #0,D2 * SET D2 TO 0 TO KNOW IS REG
000019AC                          1090      
000019AC  4286                    1091      CLR.L   D6
000019AE  1C3C 0001               1092      MOVE.B  #01,D6
000019B2  B83C 0000               1093      CMP.B   #%0,D4
000019B6  6700 0032               1094      BEQ     IS_ASR
000019BA  B83C 0001               1095      CMP.B   #%1,D4
000019BE  6700 0040               1096      BEQ     IS_ASL
000019C2                          1097      
000019C2  6000 020A               1098      BRA INVALID_OP
000019C6                          1099  A_SIZE    
000019C6  6000 0142               1100      BRA     GET_SHFT_SIZE 
000019CA                          1101  
000019CA                          1102  A_MEM
000019CA  4EB9 00001AFE           1103      JSR     RGHT_LFT
000019D0                          1104      
000019D0  143C 0001               1105      MOVE.B  #1,D2 * SET D2 TO 1 TO KNOW IS MEM
000019D4                          1106      
000019D4  4286                    1107      CLR.L   D6
000019D6  1C3C 0002               1108      MOVE.B  #02,D6
000019DA  B83C 0000               1109      CMP.B   #%0,D4
000019DE  6700 000A               1110      BEQ     IS_ASR
000019E2  B83C 0001               1111      CMP.B   #%1,D4
000019E6  6700 0018               1112      BEQ     IS_ASL    
000019EA                          1113  
000019EA                          1114  
000019EA                          1115      
000019EA                          1116      
000019EA                          1117  IS_ASR
000019EA  43F9 000020DA           1118      LEA     PRNT_ASR,A1
000019F0  4EB9 00001E28           1119      JSR     PRINT_BUFF
000019F6  BC3C 0001               1120      CMP.B   #01,D6
000019FA  67CA                    1121      BEQ     A_SIZE
000019FC                          1122  
000019FC  6000 016A               1123      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001A00                          1124  
00001A00                          1125  
00001A00                          1126  IS_ASL
00001A00  43F9 000020D6           1127      LEA     PRNT_ASL,A1
00001A06  4EB9 00001E28           1128      JSR     PRINT_BUFF
00001A0C  BC3C 0001               1129      CMP.B   #01,D6
00001A10  67B4                    1130      BEQ     A_SIZE
00001A12                          1131  
00001A12  6000 0154               1132      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001A16                          1133  
00001A16                          1134  
00001A16                          1135      
00001A16                          1136  L_REG
00001A16  4EB9 00001AFE           1137      JSR     RGHT_LFT
00001A1C                          1138      
00001A1C  143C 0000               1139      MOVE.B  #0,D2 * SET D2 TO 0 TO KNOW IS REG
00001A20                          1140      
00001A20  4286                    1141      CLR.L   D6
00001A22  1C3C 0001               1142      MOVE.B  #01,D6
00001A26  B83C 0000               1143      CMP.B   #%0,D4
00001A2A  6700 0032               1144      BEQ     IS_LSR
00001A2E  B83C 0001               1145      CMP.B   #%1,D4
00001A32  6700 0040               1146      BEQ     IS_LSL
00001A36                          1147      
00001A36  6000 0196               1148      BRA INVALID_OP
00001A3A                          1149  L_SIZE    
00001A3A  6000 00CE               1150      BRA     GET_SHFT_SIZE 
00001A3E                          1151  
00001A3E                          1152  L_MEM
00001A3E  4EB9 00001AFE           1153      JSR     RGHT_LFT
00001A44                          1154      
00001A44  143C 0001               1155      MOVE.B  #1,D2 * SET D2 TO 1 TO KNOW IS MEM
00001A48                          1156      
00001A48  4286                    1157      CLR.L   D6
00001A4A  1C3C 0002               1158      MOVE.B  #02,D6
00001A4E  B83C 0000               1159      CMP.B   #%0,D4
00001A52  6700 000A               1160      BEQ     IS_LSR
00001A56  B83C 0001               1161      CMP.B   #%1,D4
00001A5A  6700 0018               1162      BEQ     IS_LSL    
00001A5E                          1163  
00001A5E                          1164      
00001A5E                          1165  IS_LSR
00001A5E  43F9 000020E2           1166      LEA     PRNT_LSR,A1
00001A64  4EB9 00001E28           1167      JSR     PRINT_BUFF
00001A6A  BC3C 0001               1168      CMP.B   #01,D6
00001A6E  67CA                    1169      BEQ     L_SIZE
00001A70                          1170      
00001A70  6000 00F6               1171      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001A74                          1172      
00001A74                          1173  
00001A74                          1174  IS_LSL
00001A74  43F9 000020DE           1175      LEA     PRNT_LSL,A1
00001A7A  4EB9 00001E28           1176      JSR     PRINT_BUFF
00001A80  BC3C 0001               1177      CMP.B   #01,D6
00001A84  67B4                    1178      BEQ     L_SIZE 
00001A86                          1179      
00001A86  6000 00E0               1180      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001A8A                          1181      
00001A8A                          1182  
00001A8A                          1183      
00001A8A                          1184      
00001A8A                          1185  R_REG
00001A8A  4EB9 00001AFE           1186      JSR     RGHT_LFT
00001A90                          1187      
00001A90  143C 0000               1188      MOVE.B  #0,D2 * SET D2 TO 0 TO KNOW IS REG
00001A94                          1189      
00001A94  4286                    1190      CLR.L   D6
00001A96  1C3C 0001               1191      MOVE.B  #01,D6
00001A9A  B83C 0000               1192      CMP.B   #%0,D4
00001A9E  6700 0032               1193      BEQ     IS_ROR
00001AA2  B83C 0001               1194      CMP.B   #%1,D4
00001AA6  6700 0040               1195      BEQ     IS_ROL
00001AAA                          1196      
00001AAA  6000 0122               1197      BRA INVALID_OP
00001AAE                          1198  R_SIZE    
00001AAE  6000 005A               1199      BRA     GET_SHFT_SIZE 
00001AB2                          1200  
00001AB2                          1201  R_MEM
00001AB2  4EB9 00001AFE           1202      JSR     RGHT_LFT
00001AB8                          1203      
00001AB8  143C 0001               1204      MOVE.B  #1,D2 * SET D2 TO 1 TO KNOW IS MEM
00001ABC                          1205      
00001ABC  4286                    1206      CLR.L   D6
00001ABE  1C3C 0002               1207      MOVE.B  #02,D6
00001AC2  B83C 0000               1208      CMP.B   #%0,D4
00001AC6  6700 000A               1209      BEQ     IS_ROR
00001ACA  B83C 0001               1210      CMP.B   #%1,D4
00001ACE  6700 0018               1211      BEQ     IS_ROL    
00001AD2                          1212  
00001AD2                          1213      
00001AD2                          1214      
00001AD2                          1215  IS_ROR
00001AD2  43F9 000020EA           1216      LEA     PRNT_ROR,A1
00001AD8  4EB9 00001E28           1217      JSR     PRINT_BUFF
00001ADE  BC3C 0001               1218      CMP.B   #01,D6
00001AE2  67CA                    1219      BEQ     R_SIZE  
00001AE4                          1220  
00001AE4  6000 0082               1221      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001AE8                          1222    
00001AE8                          1223  
00001AE8                          1224  IS_ROL
00001AE8  43F9 000020E6           1225      LEA     PRNT_ROL,A1
00001AEE  4EB9 00001E28           1226      JSR     PRINT_BUFF
00001AF4  BC3C 0001               1227      CMP.B   #01,D6
00001AF8  67B4                    1228      BEQ     R_SIZE 
00001AFA                          1229  
00001AFA  6000 006C               1230      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001AFE                          1231     
00001AFE                          1232  
00001AFE                          1233      
00001AFE                          1234      
00001AFE                          1235  
00001AFE                          1236  *GET_IR
00001AFE                          1237  *    MOVE.L  D3,D4
00001AFE                          1238  *    MOVE.B  #10,D6
00001AFE                          1239  *    LSL.W   D6,D4
00001AFE                          1240  *    MOVE.B  #15,D6
00001AFE                          1241  *    LSR.W   D6,D4
00001AFE                          1242  *    
00001AFE                          1243  *    MOVE.W  D4,D1
00001AFE                          1244  *    MOVE.B  #3,D0
00001AFE                          1245  *    TRAP    #15
00001AFE                          1246  *    SIMHALT    
00001AFE                          1247  
00001AFE                          1248  RGHT_LFT    *0 = RIGHT 1 = LEFT
00001AFE                          1249  *Determine if right/left shift
00001AFE  2803                    1250      MOVE.L  D3,D4
00001B00  1C3C 000F               1251      MOVE.B  #15,D6
00001B04  EF4C                    1252      LSL.W   #7,D4
00001B06  EC6C                    1253      LSR.W   D6,D4
00001B08  4E75                    1254      RTS
00001B0A                          1255      
00001B0A                          1256  GET_SHFT_SIZE
00001B0A  2803                    1257      MOVE.L  D3,D4
00001B0C  E14C                    1258      LSL.W   #8,D4
00001B0E  1C3C 000E               1259      MOVE.B  #14,D6
00001B12  EC6C                    1260      LSR.W   D6,D4
00001B14                          1261      
00001B14  B83C 0000               1262      CMP.B   #%00,D4    *B
00001B18  6700 0012               1263      BEQ     PRINT_B_SHIFT
00001B1C  B83C 0001               1264      CMP.B   #%01,D4    *W
00001B20  6700 001E               1265      BEQ     PRINT_W_SHIFT
00001B24  B83C 0002               1266      CMP.B   #%10,D4    *L
00001B28  6700 002A               1267      BEQ     PRINT_L_SHIFT
00001B2C                          1268      
00001B2C                          1269  
00001B2C                          1270      
00001B2C                          1271  PRINT_B_SHIFT
00001B2C  1A3C 0001               1272      MOVE.B  #$1,D5 * For EA subroutine's size handling
00001B30  43F9 00002076           1273      LEA     PRNT_B,A1
00001B36  4EB9 00001E28           1274      JSR     PRINT_BUFF
00001B3C  6000 002A               1275      BRA     DO_SHIFT_EA
00001B40                          1276  PRINT_W_SHIFT
00001B40  1A3C 0002               1277      MOVE.B  #$2,D5 * For EA subroutine's size handling
00001B44  43F9 0000207A           1278      LEA     PRNT_W,A1
00001B4A  4EB9 00001E28           1279      JSR     PRINT_BUFF
00001B50  6000 0016               1280      BRA     DO_SHIFT_EA
00001B54                          1281  PRINT_L_SHIFT
00001B54  1A3C 0003               1282      MOVE.B  #$3,D5 * For EA subroutine's size handling
00001B58  43F9 0000207E           1283      LEA     PRNT_L,A1
00001B5E  4EB9 00001E28           1284      JSR     PRINT_BUFF
00001B64  6000 0002               1285      BRA     DO_SHIFT_EA
00001B68                          1286  
00001B68                          1287  DO_SHIFT_EA
00001B68                          1288      
00001B68                          1289      
00001B68                          1290      *Proceed to EA Subroutine (ALL SHIFT OPS END UP HERE; USE TO GENERALIZE THE EA HANDLING FOR ALL)
00001B68                          1291      * Check D2 for status on MEM/REG for these.
00001B68  B43C 0000               1292      CMP.B   #0,D2
00001B6C  6700 000C               1293      BEQ     REG_EA
00001B70                          1294  
00001B70  4EB9 00001C84           1295      JSR     EA_SRC * MEM mode, so just need to print single EA field.
00001B76  6000 001E               1296      BRA     SHIFT_EA_DONE
00001B7A                          1297  
00001B7A                          1298  REG_EA
00001B7A  4EB9 00001BD4           1299      JSR     REGSHIFTFORMAT_EA
00001B80                          1300      
00001B80  3803                    1301      MOVE.W  D3,D4
00001B82  C87C 0007               1302      AND.W   #%0000000000000111,D4
00001B86  1C04                    1303      MOVE.B  D4,D6
00001B88                          1304      
00001B88  48E7 FF00               1305      MOVEM.L D0-D7,-(SP) * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001B8C  4EB9 00001CC8           1306      JSR     EA_SUB
00001B92  4CDF 00FF               1307      MOVEM.L (SP)+,D0-D7 * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001B96                          1308  
00001B96                          1309  SHIFT_EA_DONE
00001B96  4E75                    1310      RTS * GO TO IO; SHIFT INSTR DONE.    
00001B98                          1311   
00001B98                          1312  PRINT_B
00001B98  1A3C 0001               1313      MOVE.B  #$1,D5 * For EA subroutine's size handling
00001B9C  43F9 00002076           1314      LEA     PRNT_B,A1
00001BA2  4EB9 00001E28           1315      JSR     PRINT_BUFF
00001BA8  4E75                    1316      RTS
00001BAA                          1317  PRINT_W
00001BAA  1A3C 0002               1318      MOVE.B  #$2,D5 * For EA subroutine's size handling
00001BAE  43F9 0000207A           1319      LEA     PRNT_W,A1
00001BB4  4EB9 00001E28           1320      JSR     PRINT_BUFF
00001BBA  4E75                    1321      RTS
00001BBC                          1322  PRINT_L
00001BBC  1A3C 0003               1323      MOVE.B  #$3,D5 * For EA subroutine's size handling
00001BC0  43F9 0000207E           1324      LEA     PRNT_L,A1
00001BC6  4EB9 00001E28           1325      JSR     PRINT_BUFF
00001BCC  4E75                    1326      RTS
00001BCE                          1327  INVALID_OP
00001BCE                          1328      * LEA     INVALID_MSG,A1
00001BCE                          1329      * JSR       PRINT_BUFF
00001BCE  1E3C 0001               1330      MOVE.B  #1,D7
00001BD2  4E75                    1331      RTS
00001BD4                          1332  *-----------HANDLE BIT SHIFTING EA SOURCE -------------------------
00001BD4                          1333  REGSHIFTFORMAT_EA
00001BD4  3803                    1334      MOVE.W  D3,D4 * Refresh D4 with our opcode word to analyze
00001BD6                          1335       
00001BD6  C87C 0E00               1336      AND.W   #%0000111000000000,D4 * Isolate the register number
00001BDA  E64C                    1337      LSR.W   #3,D4   * Shift reg/count to far right
00001BDC  EC4C                    1338      LSR.W   #6,D4
00001BDE  1C04                    1339      MOVE.B  D4,D6   * D6 now contains either our register number or amount to shift by
00001BE0                          1340      
00001BE0  3803                    1341      MOVE.W  D3,D4
00001BE2  0804 0005               1342      BTST    #5,D4 * Test bit 5 to tell if specified as a register or immediate value (Doesn't modify D4)
00001BE6  6700 0012               1343      BEQ     S_IMM   * Bit was 0, need to do immediate value process.
00001BEA                          1344      * If here, do data register contains count process (D6 already prepared)
00001BEA                          1345      
00001BEA  48E7 FF00               1346      MOVEM.L D0-D7,-(SP) * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001BEE                          1347      
00001BEE  4EB9 00001CC8           1348      JSR     EA_SUB * Print the source operand
00001BF4                          1349      
00001BF4  4CDF 00FF               1350      MOVEM.L (SP)+,D0-D7 * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001BF8                          1351  
00001BF8                          1352      
00001BF8  4E75                    1353      RTS * Go back to process the destination
00001BFA                          1354      
00001BFA                          1355  S_IMM
00001BFA  43F9 000020FE           1356      LEA     PRNT_Q,A1 * To print hash for immediate data.
00001C00  4EB9 00001E28           1357      JSR     PRINT_BUFF
00001C06                          1358      
00001C06  BC3C 0000               1359      CMP.B   #0,D6 * Test to see if D6 is equal to zero.
00001C0A  6700 000C               1360      BEQ     S_EIGHT * Convert value to 8.
00001C0E                          1361      
00001C0E  1206                    1362      MOVE.B  D6,D1 * Print the value.
00001C10  4EB9 00001E34           1363      JSR     PRINT_HEXBUFF
00001C16                          1364      
00001C16  4E75                    1365      RTS
00001C18                          1366  
00001C18                          1367  S_EIGHT
00001C18  1C3C 0008               1368      MOVE.B  #8,D6
00001C1C                          1369      
00001C1C  1206                    1370      MOVE.B  D6,D1 * Print the value.
00001C1E  4EB9 00001E34           1371      JSR     PRINT_HEXBUFF
00001C24                          1372  
00001C24  4E75                    1373      RTS
00001C26                          1374      
00001C26                          1375  *------------------------------------------------------------
00001C26                          1376  *-----------HANDLE ADD FORMAT DATA DESTINATION EA -----------
00001C26                          1377  ADDFORMAT_DATA_DEST_EA
00001C26  4EB9 00001C84           1378      JSR     EA_SRC * Handle source EA
00001C2C                          1379      
00001C2C                          1380      
00001C2C                          1381      
00001C2C  3803                    1382      MOVE.W  D3,D4
00001C2E  C87C 0E00               1383      AND.W   #%0000111000000000,D4 * Isolate Register #
00001C32  E64C                    1384      LSR.W   #3,D4
00001C34  EC4C                    1385      LSR.W   #6,D4
00001C36  1C04                    1386      MOVE.B  D4,D6   * Prime D6 register
00001C38                          1387      
00001C38                          1388      * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001C38  48E7 FF00               1389      MOVEM.L D0-D7,-(SP) * Move register contents to stack
00001C3C                          1390  
00001C3C  43F9 00001FFA           1391      LEA     COMMA,A1
00001C42  4EB9 00001E28           1392      JSR     PRINT_BUFF
00001C48                          1393      
00001C48  4EB9 00001CC8           1394      JSR     EA_SUB * Handle the destination EA (last 6 bits of D6)
00001C4E                          1395      
00001C4E                          1396      * MOVEM RETURN
00001C4E  4CDF 00FF               1397      MOVEM.L (SP)+,D0-D7 * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001C52                          1398  
00001C52                          1399      
00001C52  4E75                    1400      RTS
00001C54                          1401  *------------------------------------------------------------
00001C54                          1402  *-----------HANDLE ADD FORMAT EA DESTINATION EA -------------
00001C54                          1403  ADDFORMAT_EA_DEST_EA
00001C54                          1404      
00001C54  3803                    1405      MOVE.W  D3,D4
00001C56  C87C 0E00               1406      AND.W   #%0000111000000000,D4 * Isolate Register #
00001C5A  E64C                    1407      LSR.W   #3,D4
00001C5C  EC4C                    1408      LSR.W   #6,D4
00001C5E  1C04                    1409      MOVE.B  D4,D6   * Prime D6 register
00001C60                          1410      
00001C60                          1411      * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001C60                          1412  
00001C60  48E7 FF00               1413      MOVEM.L D0-D7,-(SP) * Move register contents to stack
00001C64                          1414      
00001C64  4EB9 00001CC8           1415      JSR     EA_SUB * Handle the source EA
00001C6A                          1416      
00001C6A                          1417      * MOVEM RETURN
00001C6A  4CDF 00FF               1418      MOVEM.L (SP)+,D0-D7 * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001C6E                          1419  
00001C6E                          1420      
00001C6E  3803                    1421      MOVE.W  D3,D4  * Refresh opcode
00001C70                          1422  
00001C70  43F9 00001FFA           1423      LEA     COMMA,A1
00001C76  4EB9 00001E28           1424      JSR     PRINT_BUFF
00001C7C                          1425      
00001C7C  4EB9 00001C84           1426      JSR     EA_SRC * Handle destination EA
00001C82                          1427  
00001C82  4E75                    1428      RTS
00001C84                          1429  
00001C84                          1430  *------------------------------------------------------------
00001C84                          1431  *-------------------HANDLE SOURCE EA (last 6 bits)-----------
00001C84                          1432  EA_SRC
00001C84                          1433      * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001C84  48E7 FF00               1434      MOVEM.L D0-D7,-(SP) * Move register contents to stack
00001C88                          1435  
00001C88  3803                    1436      MOVE.W  D3,D4
00001C8A  C87C 003F               1437      AND.W   #%0000000000111111,D4
00001C8E  1C04                    1438      MOVE.B  D4,D6
00001C90                          1439      
00001C90  4EB9 00001CC8           1440      JSR EA_SUB ** Print source EA bits from bits in D6
00001C96                          1441      
00001C96                          1442      * MOVEM RETURN
00001C96  4CDF 00FF               1443      MOVEM.L (SP)+,D0-D7 * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001C9A  4E75                    1444      RTS
00001C9C                          1445  *------------------------------------------------------------
00001C9C                          1446  *------HANDLE DESTINATION EA(6 bits before last 6 bits)------
00001C9C                          1447  EA_DEST
00001C9C                          1448      * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001C9C  48E7 FF00               1449      MOVEM.L D0-D7,-(SP) * Move register contents to stack
00001CA0                          1450  
00001CA0  3803                    1451      MOVE.W  D3,D4
00001CA2  C87C 0FC0               1452      AND.W #%0000111111000000,D4
00001CA6  EC4C                    1453      LSR.W #6,D4
00001CA8  1004                    1454      MOVE.B  D4,D0
00001CAA  C07C 0007               1455      AND.W #%0000000000000111,D0 * D0 contains mode bits
00001CAE  1200                    1456      MOVE.B  D0,D1   *MODE (D1) (Curr state: 000 001 in D1)
00001CB0  2004                    1457      MOVE.L  D4,D0 * D0 contains 6 bit field out of order
00001CB2  E648                    1458      LSR.W   #3,D0 * D0 contains reg bits (Curr State: 000 010 in D0)
00001CB4  1400                    1459      MOVE.B  D0,D2   *REG (D2) (Curr State: 000 010 in D2 and D0)
00001CB6                          1460      
00001CB6  E709                    1461      LSL.B   #3,D1 * Shift mode into position
00001CB8                          1462      
00001CB8  8401                    1463      OR.B    D1,D2   
00001CBA  1C02                    1464      MOVE.B  D2,D6 *
00001CBC                          1465      
00001CBC  4EB9 00001CC8           1466      JSR     EA_SUB
00001CC2                          1467      
00001CC2                          1468      * MOVEM RETURN
00001CC2  4CDF 00FF               1469      MOVEM.L (SP)+,D0-D7 * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001CC6                          1470      
00001CC6  4E75                    1471      RTS
00001CC8                          1472  *------------------------------------------------------------ 
00001CC8                          1473      
00001CC8                          1474  *-------------------EA Subroutine----------------------------
00001CC8                          1475  
00001CC8                          1476  EA_SUB
00001CC8                          1477  
00001CC8                          1478              * 1: Process the 6-bit field into D3 (Register bits) and D4 (Mode bits)
00001CC8  1806                    1479              MOVE.B  D6,D4 * Prime D4 with the full 6-bit field
00001CCA  C83C 0007               1480              AND.B   #%00000111,D4 * Clear everything but the register bits (BITS READY)
00001CCE                          1481              
00001CCE  1606                    1482              MOVE.B  D6,D3 * Prime D3 with the full 6-bit field
00001CD0  E60B                    1483              LSR.B   #3,D3 * Shift out the register bits to isolate the mode bits (BITS READY)
00001CD2                          1484                  
00001CD2                          1485              * 2: Process the MODE BITS:
00001CD2  B63C 0000               1486  MODE_P      CMP.B   #%00000000,D3   * TEST FOR 000: Dn
00001CD6  6700 002E               1487              BEQ     DN_MODE
00001CDA                          1488              
00001CDA  B63C 0001               1489              CMP.B   #%00000001,D3   * TEST FOR 001: An
00001CDE  6700 0036               1490              BEQ     AN_MODE
00001CE2                          1491              
00001CE2  B63C 0002               1492              CMP.B   #%00000010,D3   * TEST FOR 010: (An)
00001CE6  6700 003E               1493              BEQ     ANIND_MODE
00001CEA                          1494              
00001CEA  B63C 0003               1495              CMP.B   #%00000011,D3   * TEST FOR 011: (An)+
00001CEE  6700 0046               1496              BEQ     ANINC_MODE
00001CF2                          1497              
00001CF2  B63C 0004               1498              CMP.B   #%00000100,D3   * TEST FOR 100: -(An)
00001CF6  6700 004E               1499              BEQ     ANDEC_MODE
00001CFA                          1500              
00001CFA  B63C 0007               1501              CMP.B   #%00000111,D3   * TEST FOR 111: #<data>, (xxx).W, or (xxx).L (or unsupported!)
00001CFE  6700 0056               1502              BEQ     ABSDAT_MODE
00001D02                          1503              
00001D02  6000 011E               1504              BRA     UNSUPP_MODE     * If we made it here, assume an unsupported mode!
00001D06                          1505              
00001D06                          1506              
00001D06  43F9 000020EE           1507  DN_MODE     LEA     PRNT_D,A1
00001D0C  4EB9 00001E28           1508              JSR     PRINT_BUFF
00001D12                          1509              
00001D12  6000 005E               1510              BRA     REG_P
00001D16                          1511              
00001D16  43F9 000020F0           1512  AN_MODE     LEA     PRNT_A,A1
00001D1C  4EB9 00001E28           1513              JSR     PRINT_BUFF
00001D22                          1514              
00001D22  6000 004E               1515              BRA     REG_P
00001D26                          1516  
00001D26  43F9 000020F2           1517  ANIND_MODE  LEA     PRNT_AI,A1
00001D2C  4EB9 00001E28           1518              JSR     PRINT_BUFF
00001D32                          1519              
00001D32  6000 003E               1520              BRA     REG_P
00001D36                          1521  
00001D36  43F9 000020F2           1522  ANINC_MODE  LEA     PRNT_AI,A1  * As of now this is the same as indirect, postdec added after register
00001D3C  4EB9 00001E28           1523              JSR     PRINT_BUFF
00001D42                          1524              
00001D42  6000 002E               1525              BRA     REG_P
00001D46                          1526  
00001D46  43F9 000020FA           1527  ANDEC_MODE  LEA     PRNT_DC,A1
00001D4C  4EB9 00001E28           1528              JSR     PRINT_BUFF
00001D52                          1529              
00001D52  6000 001E               1530              BRA     REG_P
00001D56                          1531              
00001D56                          1532  
00001D56                          1533  * DATA / ABSOLUTE ADDRESSING HANDLING (Mode was 111 in D3; need to chk. D4 reg bits for behavior)
00001D56  B83C 0004               1534  ABSDAT_MODE CMP.B   #%00000100,D4 * TEST FOR 100: #<data>
00001D5A  6700 005A               1535              BEQ     DATA_MODE
00001D5E                          1536              
00001D5E  B83C 0000               1537              CMP.B   #%00000000,D4 * TEST FOR 000: (xxx).W
00001D62  6700 0076               1538              BEQ     ABSW_MODE
00001D66                          1539              
00001D66  B83C 0001               1540              CMP.B   #%00000001,D4 * TEST FOR 001: (xxx).L
00001D6A  6700 007E               1541              BEQ     ABSL_MODE
00001D6E                          1542              
00001D6E  6000 00B2               1543              BRA     UNSUPP_MODE   * If the register is some other val, unsupported!
00001D72                          1544              
00001D72                          1545              * 3: Process the REGISTER BITS: (IN D4)
00001D72  2204                    1546  REG_P       MOVE.L  D4,D1   * Load the register value into D1 for display.
00001D74  4EB9 00001E34           1547              JSR     PRINT_HEXBUFF
00001D7A                          1548              
00001D7A  B63C 0002               1549              CMP.B   #%00000010,D3
00001D7E  6700 0016               1550              BEQ     END_ONE
00001D82                          1551              
00001D82  B63C 0004               1552              CMP.B   #%00000100,D3
00001D86  6700 000E               1553              BEQ     END_ONE
00001D8A                          1554              
00001D8A  B63C 0003               1555              CMP.B   #%00000011,D3
00001D8E  6700 0016               1556              BEQ     END_TWO
00001D92                          1557              
00001D92  6000 0092               1558              BRA     FINISH  * Additional char after register unnecessary, branch to finish
00001D96                          1559              
00001D96  43F9 000020F5           1560  END_ONE     LEA     PRNT_CL,A1
00001D9C  4EB9 00001E28           1561              JSR     PRINT_BUFF
00001DA2                          1562              
00001DA2  6000 0082               1563              BRA     FINISH
00001DA6                          1564  
00001DA6  43F9 000020F7           1565  END_TWO     LEA     PRNT_IN,A1
00001DAC  4EB9 00001E28           1566              JSR     PRINT_BUFF
00001DB2                          1567              
00001DB2  6000 0072               1568              BRA     FINISH
00001DB6                          1569  
00001DB6                          1570  * #<DATA>; RELIES ON D5 CONTAINING SIZE VALUE OF THE INSTRUCTION! (So we know how much data to grab, then what to increment A5 by! (word or long))
00001DB6                          1571      * If this contains 0, this will not work in this state. D5 MUST have val 1-3 at this point!
00001DB6  43F9 00002100           1572  DATA_MODE   LEA     PRNT_DT,A1 * Print '#$'
00001DBC  4EB9 00001E28           1573              JSR     PRINT_BUFF
00001DC2                          1574              
00001DC2  BA3C 0001               1575              CMP.B   #1,D5
00001DC6  6700 0032               1576              BEQ     BYTE
00001DCA                          1577              
00001DCA  BA3C 0002               1578              CMP.B   #2,D5
00001DCE  6700 003A               1579              BEQ     WORD
00001DD2                          1580              
00001DD2  BA3C 0003               1581              CMP.B   #3,D5
00001DD6  6700 003E               1582              BEQ     LONG
00001DDA                          1583              
00001DDA                          1584  * (xxx).W;            
00001DDA  43F9 00002103           1585  ABSW_MODE   LEA     PRNT_HX,A1 * Print '$'
00001DE0  4EB9 00001E28           1586              JSR     PRINT_BUFF
00001DE6                          1587              
00001DE6  6000 0022               1588              BRA     WORD
00001DEA                          1589              
00001DEA                          1590  * (xxx).L; Assembler uses this when it sign extends automatically over (xxx).W           
00001DEA  43F9 00002103           1591  ABSL_MODE   LEA     PRNT_HX,A1 * Print '$'
00001DF0  4EB9 00001E28           1592              JSR     PRINT_BUFF
00001DF6                          1593              
00001DF6  6000 001E               1594              BRA     LONG
00001DFA                          1595  
00001DFA                          1596  * Expects format created by assembled machine code, NOT how it is just pushed to memory by (An)!            
00001DFA  321B                    1597  BYTE        MOVE.W  (A3)+,D1    * Move word of data from curr opcode word pointer to D1, then increment pointer a word.
00001DFC                          1598              *=MOVE.B  #16,D2      * Prepare to display a hex value
00001DFC  C27C 00FF               1599              AND.W   #%0000000011111111,D1   * Discard potential word part from byte
00001E00                          1600              *=MOVE.B  #15,D0      * Set the task to 15
00001E00                          1601              *=TRAP    #15         * Print the value.
00001E00  4EB9 00001E34           1602              JSR     PRINT_HEXBUFF
00001E06                          1603  
00001E06  6000 001E               1604              BRA     FINISH
00001E0A                          1605  
00001E0A  321B                    1606  WORD        MOVE.W  (A3)+,D1    * Move word of data from curr opcode word pointer to D1, then increment pointer a word.
00001E0C                          1607              *=MOVE.B  #16,D2      * Prepare to display a hex value
00001E0C                          1608              *=MOVE.B  #15,D0      * Set the task to 15
00001E0C                          1609              *=TRAP    #15         * Print the value.
00001E0C  4EB9 00001E34           1610              JSR     PRINT_HEXBUFF
00001E12                          1611  
00001E12  6000 0012               1612              BRA     FINISH
00001E16                          1613  
00001E16  221B                    1614  LONG        MOVE.L  (A3)+,D1    * Move longword of data from curr opcode word pointer to D1, then increment pointer a longword.
00001E18                          1615              *=MOVE.B  #16,D2      * Prepare to display a hex value
00001E18                          1616              *=MOVE.B  #15,D0      * Set the task to 15
00001E18                          1617              *=TRAP    #15         * Print the value.
00001E18  4EB9 00001E34           1618              JSR     PRINT_HEXBUFF
00001E1E                          1619  
00001E1E  6000 0006               1620              BRA     FINISH
00001E22                          1621        
00001E22                          1622              * 4: UNSUPPORTED BRANCH:
00001E22                          1623  UNSUPP_MODE *LEA     PRNT_ER,A1
00001E22                          1624              *JSR        PRINT_BUFF * Continue directly onto finishing up from here
00001E22                          1625              
00001E22  1E3C 0001               1626              MOVE.B  #1,D7   * Set Good/Bad flag to Bad state (1 bit)
00001E26                          1627              
00001E26                          1628              * 5: Finishing up:
00001E26                          1629  FINISH      
00001E26                          1630              * Return values stored in stack prior to moving into here into registers.
00001E26                          1631                  * (Will put here on integration...)
00001E26                          1632              * A5 currently points to the next needed opcode to process, which could be the following:
00001E26                          1633                  * Next opcode word instruction
00001E26                          1634                  * More data corresponding to the next <ea> field for current instruction
00001E26                          1635              
00001E26  4E75                    1636              RTS
00001E28                          1637  
00001E28                          1638  * POTENTIAL PRINT LOGIC ERROR: HANDLES LSL/R-LIKE INSTRUCTIONS WITH DIRECT NUMBER INCORRECTLY (prints first byte of mem location addr, then the number desired) *********************************
00001E28                          1639  
00001E28                          1640  PRINT_BUFF
00001E28  0C11 0000               1641              CMP.B #0,(A1)
00001E2C  6700 0056               1642              BEQ RET_PBUFF           * Done copying? Jump back
00001E30                          1643  
00001E30  1CD9                    1644              MOVE.B (A1)+,(A6)+      * Copy character to print buffer
00001E32  60F4                    1645              BRA PRINT_BUFF          * Repeat
00001E34                          1646  
00001E34                          1647  PRINT_HEXBUFF
00001E34  143C 0000               1648              MOVE.B #0,D2
00001E38  B2BC 00000000           1649              CMP.L #0,D1
00001E3E  6600 0006               1650              BNE PRINT_HEXBUFF_LP
00001E42  1CFC 0030               1651              MOVE.B #$30,(A6)+       * Value was 0, print 0
00001E46                          1652  
00001E46                          1653  PRINT_HEXBUFF_LP
00001E46  B2BC 00000000           1654              CMP.L #0,D1
00001E4C  6700 0036               1655              BEQ RET_PBUFF
00001E50                          1656              
00001E50  E999                    1657              ROL.L #4,D1             *Rotate 1 nibble to the left
00001E52  2001                    1658              MOVE.L D1,D0    
00001E54  C0BC 0000000F           1659              AND.L #$F,D0            *Isolate the hex value
00001E5A                          1660              
00001E5A  0600 0037               1661              ADD.B #$37,D0
00001E5E  B03C 0040               1662              CMP.B #$40,D0
00001E62  6E00 0004               1663              BGT   PRINT_HEXBUFF_SKIP
00001E66  5F00                    1664              SUB.B #$7,D0
00001E68                          1665      
00001E68                          1666  PRINT_HEXBUFF_SKIP
00001E68  B03C 0030               1667              CMP.B #$30,D0           * Going to print a zero
00001E6C  6600 000A               1668              BNE PRINT_HEXBUFF_YESZERO
00001E70                          1669  
00001E70  B43C 0000               1670              CMP.B #0,D2             * Actually, don't
00001E74  6700 0008               1671              BEQ PRINT_HEXBUFF_NOZERO
00001E78                          1672  
00001E78                          1673  PRINT_HEXBUFF_YESZERO
00001E78  1CC0                    1674              MOVE.B D0,(A6)+
00001E7A  143C 0001               1675              MOVE.B #1,D2
00001E7E                          1676  
00001E7E                          1677  PRINT_HEXBUFF_NOZERO
00001E7E  C23C 00F0               1678              AND.B #$F0,D1   Clear last nibble
00001E82  60C2                    1679              BRA PRINT_HEXBUFF_LP
00001E84                          1680  
00001E84  4E75                    1681  RET_PBUFF   RTS
00001E86                          1682  * Put variables and constants here
00001E86= 50 6C 65 61 73 65 ...   1683  PROMPT_START DC.B 'Please enter starting address in hexadecimal: ' ,0
00001EB5= 50 6C 65 61 73 65 ...   1684  PROMPT_END DC.B 'Please enter ending address in hexadecimal (must be after starting): ' ,0
00001EFC= 4572 726F 723A 2...     1685  INVALID_HEX DC.W 'Error: Address must be in valid hexadecimal' ,CR,LF,0
00001F2E= 44 6F 6E 65 20 72 ...   1686  DONE_MESSAGE DC.B 'Done reading instructions' ,CR,LF,0
00001F4A= 506C 6561 7365 2...     1687  ENTER_MESSAGE DC.W 'Please press enter to display new screen ' ,CR,LF,0
00001F7A= 4572 726F 723A 2...     1688  INVALID_ORDER DC.W 'Error: ending address must come after starting',CR,LF,0
00001FAE= 4469 7361 7373 6...     1689  ASK_REPEAT DC.W 'Disassemble another mem range? (Yes = 0, No = 1) ' ,0 
00001FE2                          1690  INVALID_MEM_ADDR DS.W 1
00001FE4= 4441 5441 2000 0...     1691  DATA DC.W 'DATA ',CR,LF,0
00001FF0                          1692  INVALID_HEX_VAL DS.W 1 
00001FF2= 20 0D 0A 00             1693  LINE_BREAK DC.B ' ',CR,LF,0
00001FF6= 2000 0000               1694  SPACE DC.W ' ',0
00001FFA= 2C00 0000               1695  COMMA DC.W ',',0
00001FFE                          1696  INSTRUCTION_ADDR DS.B 1
00002000= 494E 5354 5255 4...     1697  INSTRUCTION_ADDR_MESSAGE DC.W 'INSTRUCTION ADDR',0
00002012                          1698  OPCODE DS.W 1
00002014= 4F50 434F 4445 0000     1699  OPCODE_MESSAGE DC.W 'OPCODE',0
0000201C                          1700  OPERAND1 DS.W 1
0000201E= 4F50 4552 414E 4...     1701  OPERAND1_MESSAGE DC.W 'OPERAND1',0
00002028                          1702  OPERAND2 DS.W 1
0000202A= 4F50 4552 414E 4...     1703  OPERAND2_MESSAGE DC.W 'OPERAND2',0
00002034                          1704  
00002034                          1705  GOOD_BAD_FLAG DS.B 1
00002035                          1706  
00002036                          1707  START_ADDR DS.W 4
0000203E                          1708  END_ADDR DS.W 4
00002046                          1709  
00002046= 45 6E 74 65 72 20 ...   1710  INPUT_MSG   DC.B    'Enter machine code: ',0
0000205C                          1711  INPUT       DS.L    1
00002060= 49 6E 76 61 6C 69 ...   1712  INVALID_MSG DC.B    'Invalid Instruction',CR,LF,0
00002076                          1713  
00002076= 2E 42 20 00             1714  PRNT_B      DC.B    '.B ',0
0000207A= 2E 57 20 00             1715  PRNT_W      DC.B    '.W ',0
0000207E= 2E 4C 20 00             1716  PRNT_L      DC.B    '.L ',0
00002082                          1717  
00002082= 4E 4F 50 00             1718  PRNT_NOP    DC.B    'NOP',0
00002086= 52 54 53 00             1719  PRNT_RTS    DC.B    'RTS',0
0000208A= 4D 4F 56 45 00          1720  PRNT_MOVE   DC.B    'MOVE',0
0000208F= 4D 4F 56 45 41 00       1721  PRNT_MOVEA  DC.B    'MOVEA',0
00002095= 4D 4F 56 45 4D 00       1722  PRNT_MOVEM  DC.B    'MOVEM',0
0000209B= 4D 4F 56 45 51 00       1723  PRNT_MOVEQ  DC.B    'MOVEQ',0
000020A1= 4A 53 52 00             1724  PRNT_JSR    DC.B    'JSR',0
000020A5= 42 47 54 00             1725  PRNT_BGT    DC.B    'BGT',0
000020A9= 42 4C 45 00             1726  PRNT_BLE    DC.B    'BLE',0
000020AD= 42 45 51 00             1727  PRNT_BEQ    DC.B    'BEQ',0
000020B1= 42 52 41 00             1728  PRNT_BRA    DC.B    'BRA',0
000020B5= 4E 4F 54 00             1729  PRNT_NOT    DC.B    'NOT',0
000020B9= 4F 52 00                1730  PRNT_OR     DC.B    'OR',0
000020BC= 4C 45 41 00             1731  PRNT_LEA    DC.B    'LEA',0
000020C0= 41 44 44 51 00          1732  PRNT_ADDQ   DC.B    'ADDQ',0
000020C5= 41 44 44 00             1733  PRNT_ADD    DC.B    'ADD',0
000020C9= 41 44 44 41 00          1734  PRNT_ADDA   DC.B    'ADDA',0
000020CE= 41 4E 44 00             1735  PRNT_AND    DC.B    'AND',0
000020D2= 53 55 42 00             1736  PRNT_SUB    DC.B    'SUB',0
000020D6= 41 53 4C 00             1737  PRNT_ASL    DC.B    'ASL',0
000020DA= 41 53 52 00             1738  PRNT_ASR    DC.B    'ASR',0
000020DE= 4C 53 4C 00             1739  PRNT_LSL    DC.B    'LSL',0
000020E2= 4C 53 52 00             1740  PRNT_LSR    DC.B    'LSR',0
000020E6= 52 4F 4C 00             1741  PRNT_ROL    DC.B    'ROL',0
000020EA= 52 4F 52 00             1742  PRNT_ROR    DC.B    'ROR',0
000020EE                          1743  
000020EE= 44 00                   1744  PRNT_D  DC.B    'D',0
000020F0= 41 00                   1745  PRNT_A  DC.B    'A',0
000020F2= 28 41 00                1746  PRNT_AI DC.B    '(A',0
000020F5= 29 00                   1747  PRNT_CL DC.B    ')',0
000020F7= 29 2B 00                1748  PRNT_IN DC.B    ')+',0
000020FA= 2D 28 41 00             1749  PRNT_DC DC.B    '-(A',0
000020FE                          1750  
000020FE= 23 00                   1751  PRNT_Q  DC.B    '#',0
00002100= 23 24 00                1752  PRNT_DT DC.B    '#$',0
00002103= 24 00                   1753  PRNT_HX DC.B    '$',0
00002105                          1754  
00002105= 45 52 52 4F 52 3A ...   1755  PRNT_ER DC.B    'ERROR: Unsupported EA Mode',0
00002120                          1756  
00002120                          1757  *D3 = original instruction
00002120                          1758  *D4 = copy of instruction
00002120                          1759  *D6 = num of bits to shift
00002120                          1760  
00002120                          1761      
00002120                          1762  
00002120                          1763  DONE
00002120  43F8 1F2E               1764      LEA DONE_MESSAGE, A1
00002124  4EB8 1E28               1765      JSR     PRINT_BUFF
00002128                          1766      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSDAT_MODE         1D56
ABSL_MODE           1DEA
ABSW_MODE           1DDA
ADDA_L              1934
ADDA_W              1922
ADDFORMAT_DATA_DEST_EA  1C26
ADDFORMAT_EA_DEST_EA  1C54
ADDQ_B              1518
ADDQ_DATA           1536
ADDQ_L              152C
ADDQ_W              1522
ADD_B               18EC
ADD_B_D             18B6
ADD_L               1910
ADD_L_D             18DA
ADD_W               18FE
ADD_W_D             18C8
ANDEC_MODE          1D46
AND_B               1822
AND_B_D             17F8
AND_L               183E
AND_L_D             1814
AND_W               1830
AND_W_D             1806
ANINC_MODE          1D36
ANIND_MODE          1D26
AN_MODE             1D16
ASK_REPEAT          1FAE
A_MEM               19CA
A_REG               19A2
A_SIZE              19C6
BYTE                1DFA
CLEAR_REG           11E8
COMMA               1FFA
CONV_NUM            107C
CONV_STRING         1038
CR                  D
DATA                1FE4
DATA_MODE           1DB6
DISP                15DA
DISPLAY_INVALID_HEX  105E
DISPLAY_INVALID_INSTRUCTION  1154
DISPLAY_INVALID_ORDER  10C0
DISP_16             1608
DISP_32             161E
DN_MODE             1D06
DONE                2120
DONE_END_CONV       10AE
DONE_MESSAGE        1F2E
DONE_START_CONV     109C
DO_SHIFT_EA         1B68
EA_DEST             1C9C
EA_SRC              1C84
EA_SUB              1CC8
END_ADDR            203E
END_ONE             1D96
END_TWO             1DA6
ENTER_MESSAGE       1F4A
FIND_OP             124C
FINISH              1E26
GET_SHFT_SIZE       1B0A
GOOD_BAD_FLAG       2034
INPUT               205C
INPUT_MSG           2046
INSTRUCTION_ADDR    1FFE
INSTRUCTION_ADDR_MESSAGE  2000
INVALID_HEX         1EFC
INVALID_HEX_VAL     1FF0
INVALID_MEM_ADDR    1FE2
INVALID_MSG         2060
INVALID_OP          1BCE
INVALID_ORDER       1F7A
IS_ADD              189A
IS_ADDA             18A8
IS_ASL              1A00
IS_ASR              19EA
IS_BEQ              15C6
IS_BGT              159E
IS_BLE              15B2
IS_BRA              158A
IS_LEA              13CA
IS_LSL              1A74
IS_LSR              1A5E
IS_MOVE             1286
IS_MOVEA            1296
IS_MOVEM            148C
IS_NOT              140C
IS_OR               1652
IS_ROL              1AE8
IS_ROR              1AD2
IS_SUB              16F0
LF                  A
LINE_BREAK          1FF2
LONG                1E16
L_MEM               1A3E
L_REG               1A16
L_SIZE              1A3A
MODE_P              1CD2
MOVEM_L             14D2
MOVEM_W             14CC
MOVE_B              12C8
MOVE_L              1308
MOVE_SIZE           12A2
MOVE_W              12E8
NEEDS_NEW_SCREEN    1180
NOP                 121C
NOT_B               144A
NOT_EA              1464
NOT_L               145E
NOT_W               1454
OPCODE              2012
OPCODE_MESSAGE      2014
OPERAND1            201C
OPERAND1_MESSAGE    201E
OPERAND2            2028
OPERAND2_MESSAGE    202A
OP_00               1274
OP_01               1328
OP_0100             13A4
OP_01001            146C
OP_0101             14D8
OP_0110             155C
OP_0111             1350
OP_10               1634
OP_11               178A
OP_1100             17AE
OP_1101             184C
OP_1110             1946
OR_B                16C6
OR_B_D              169C
OR_L                16E2
OR_L_D              16B8
OR_W                16D4
OR_W_D              16AA
PBUFF               900
PRINT_B             1B98
PRINT_BUFF          1E28
PRINT_B_SHIFT       1B2C
PRINT_HEXBUFF       1E34
PRINT_HEXBUFF_LP    1E46
PRINT_HEXBUFF_NOZERO  1E7E
PRINT_HEXBUFF_SKIP  1E68
PRINT_HEXBUFF_YESZERO  1E78
PRINT_INSTRUCTIONS  10E4
PRINT_L             1BBC
PRINT_L_SHIFT       1B54
PRINT_W             1BAA
PRINT_W_SHIFT       1B40
PRNT_A              20F0
PRNT_ADD            20C5
PRNT_ADDA           20C9
PRNT_ADDQ           20C0
PRNT_AI             20F2
PRNT_AND            20CE
PRNT_ASL            20D6
PRNT_ASR            20DA
PRNT_B              2076
PRNT_BEQ            20AD
PRNT_BGT            20A5
PRNT_BLE            20A9
PRNT_BRA            20B1
PRNT_CL             20F5
PRNT_D              20EE
PRNT_DC             20FA
PRNT_DT             2100
PRNT_ER             2105
PRNT_HX             2103
PRNT_IN             20F7
PRNT_JSR            20A1
PRNT_L              207E
PRNT_LEA            20BC
PRNT_LSL            20DE
PRNT_LSR            20E2
PRNT_MOVE           208A
PRNT_MOVEA          208F
PRNT_MOVEM          2095
PRNT_MOVEQ          209B
PRNT_NOP            2082
PRNT_NOT            20B5
PRNT_OR             20B9
PRNT_Q              20FE
PRNT_ROL            20E6
PRNT_ROR            20EA
PRNT_RTS            2086
PRNT_SUB            20D2
PRNT_W              207A
PROMPT_END          1EB5
PROMPT_FOR_END      101C
PROMPT_FOR_START    1000
PROMPT_START        1E86
PROMPT_USER_FOR_ENTER  1198
REACHED_END         11BA
REG                 1978
REGSHIFTFORMAT_EA   1BD4
REG_EA              1B7A
REG_P               1D72
RET_PBUFF           1E84
RGHT_LFT            1AFE
RTS                 1234
R_MEM               1AB2
R_REG               1A8A
R_SIZE              1AAE
SHIFT_EA_DONE       1B96
SPACE               1FF6
START               1000
START_ADDR          2036
START_OP            121C
SUB_B               1760
SUB_B_D             1736
SUB_L               177C
SUB_L_D             1752
SUB_W               176E
SUB_W_D             1744
S_EIGHT             1C18
S_IMM               1BFA
UNSUPP_MODE         1E22
WORD                1E0A
