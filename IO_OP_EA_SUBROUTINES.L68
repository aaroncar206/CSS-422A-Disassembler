00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/8/2021 12:22:35 PM

00000000                             1  *-----------------------------------------------------------
00000000  =0000000D                  2  CR EQU $0D
00000000  =0000000A                  3  LF EQU $0A
00000000  =00000900                  4  PBUFF EQU $900
00000000                             5  
00000000                             6  
00000000                             7  *----- PRECONDITIONS ------*
00000000                             8  * - Instruction addresses must be properly formatted hex values
00000000                             9  * - Opcode must be properly formatted hex values ready to be read in memory, else outputted as DATA.
00000000                            10  * - Operands/EA fields must be be properly formatted within opcode and supported, else outputted as DATA.
00000000                            11  * - D7: Established as general good/bad flag to know if we should print a line (0 = good, 1 = bad)
00000000                            12  
00000000                            13  *---- POSTCONDITIONS -----*
00000000                            14  * - Output memory words to console in format (MEM LOCATION | OPCODE / DATA | OPERANDS / HEX VALUE OF WORD)
00000000                            15  * - Outputs 25 lines at a time, using ENTER key to continue until given range is read.
00000000                            16  * - Prompts the user to either decode another memory range, or terminate the program.
00000000                            17  
00001000                            18      ORG    $1000
00001000                            19  START:                  ; first instruction of program
00001000                            20  
00001000                            21  
00001000                            22  * --Prompt user for starting address--
00001000                            23  PROMPT_FOR_START
00001000  43F9 00001EC4             24      LEA PROMPT_START,A1 
00001006  103C 000E                 25      MOVE.B #14,D0 
0000100A  4E4F                      26      TRAP #15 
0000100C  227C 00000000             27      MOVEA.L #0,A1
00001012                            28      
00001012  303C 0002                 29      MOVE.W #2,D0 
00001016  4E4F                      30      TRAP #15 Read a string from the keyboard into D1.L
00001018  6000 001E                 31      BRA CONV_STRING
0000101C                            32  
0000101C                            33  
0000101C                            34  * --Prompt user for ending address--
0000101C                            35  PROMPT_FOR_END
0000101C  43F9 00001EF3             36      LEA PROMPT_END,A1 
00001022  103C 000E                 37      MOVE.B #14,D0 
00001026  4E4F                      38      TRAP #15 
00001028  227C 00000000             39      MOVEA.L #0,A1
0000102E                            40      
0000102E  303C 0002                 41      MOVE.W #2,D0 
00001032  4E4F                      42      TRAP #15 Read a string from the keyboard into D1.L
00001034  6000 0002                 43      BRA CONV_STRING
00001038                            44       
00001038                            45      
00001038                            46  *-- Converts ASCII string to Hex equivalent --  
00001038                            47  CONV_STRING
00001038  1019                      48      MOVE.B (A1)+,D0 Get individual char in input string
0000103A  B03C 0046                 49      CMP.B #$46,D0 Check if char is more than F, the last valid hex value
0000103E  6E00 001E                 50      BGT DISPLAY_INVALID_HEX 
00001042  B03C 0041                 51      CMP.B #$41,D0 Check if char is a number or letter
00001046  6D00 0034                 52      BLT CONV_NUM
0000104A                            53      
0000104A                            54      **--Convert ASCII char to hex equivalent --
0000104A  0400 0037                 55      SUB.B #$37, D0 
0000104E  D680                      56      ADD.L D0,D3
00001050  5341                      57      SUBI #1,D1 
00001052  B23C 0000                 58      CMP.B #0,D1
00001056  6700 0044                 59      BEQ DONE_START_CONV
0000105A  E98B                      60      LSL.L #4,D3
0000105C  60DA                      61      BRA CONV_STRING
0000105E                            62  
0000105E                            63  
0000105E                            64  * --Display invalid hex error upon invalid input--
0000105E                            65  DISPLAY_INVALID_HEX
0000105E  43F9 00001F3A             66      LEA INVALID_HEX,A1
00001064  103C 000E                 67      MOVE.B #14,D0 
00001068  4E4F                      68      TRAP #15 
0000106A                            69      
0000106A  43F9 00002030             70      LEA LINE_BREAK,A1
00001070  103C 000E                 71      MOVE.B #14,D0 
00001074  4E4F                      72      TRAP #15 
00001076  4243                      73      CLR D3
00001078  4244                      74      CLR D4
0000107A                            75  
0000107A  6084                      76      BRA PROMPT_FOR_START
0000107C                            77  
0000107C                            78  
0000107C                            79  * --Converts ASCII num char into hex equivalent--   
0000107C                            80  CONV_NUM 
0000107C  B03C 0030                 81      CMP.B #$30,D0 
00001080  6DDC                      82      BLT DISPLAY_INVALID_HEX *check if char is less than 30, first valid hex num
00001082  B03C 0039                 83      CMP.B #$39,D0
00001086  6ED6                      84      BGT DISPLAY_INVALID_HEX *check if char is less than 30, last valid hex num
00001088  0400 0030                 85      SUB.B #$30,D0
0000108C  D680                      86      ADD.L D0,D3
0000108E  5341                      87      SUBI #1,D1
00001090  B23C 0000                 88      CMP.B #0,D1 
00001094  6700 0006                 89      BEQ DONE_START_CONV
00001098  E98B                      90      LSL.L #4,D3
0000109A  609C                      91      BRA CONV_STRING
0000109C                            92      
0000109C                            93  
0000109C                            94  * --Move converted starting address into A3--
0000109C                            95  DONE_START_CONV
0000109C  B87C 0001                 96     CMP #1,D4
000010A0  6700 000C                 97     BEQ DONE_END_CONV
000010A4  5244                      98     ADDI #1,D4
000010A6                            99     
000010A6  2643                     100     MOVEA.L D3,A3
000010A8  4243                     101     CLR D3
000010AA                           102     
000010AA  6000 FF70                103     BRA PROMPT_FOR_END
000010AE                           104    
000010AE                           105  * --Move converted ending address into A4 and prepare for opcodes--
000010AE                           106  DONE_END_CONV
000010AE  4244                     107      CLR.W D4
000010B0  2843                     108      MOVEA.L D3,A4
000010B2  4243                     109      CLR D3
000010B4  4244                     110      CLR D4
000010B6                           111      
000010B6  B9CB                     112      CMPA.L A3,A4 check if starting address is less than ending 
000010B8  6B00 0006                113      BMI DISPLAY_INVALID_ORDER
000010BC                           114      
000010BC  6000 0026                115      BRA PRINT_INSTRUCTIONS
000010C0                           116      *-- op code person takes over from here--
000010C0                           117      *-- derive opcodes starting from start address --*
000010C0                           118      
000010C0                           119  DISPLAY_INVALID_ORDER
000010C0  43F9 00001FB8            120      LEA INVALID_ORDER, A1
000010C6  103C 000E                121      MOVE.B #14,D0 
000010CA  4E4F                     122      TRAP #15 
000010CC                           123      
000010CC  43F9 00002030            124      LEA LINE_BREAK,A1
000010D2  103C 000E                125      MOVE.B #14,D0 
000010D6  4E4F                     126      TRAP #15 
000010D8  4243                     127      CLR D3
000010DA  5244                     128      ADDI #1,D4 force to jump straight to DONE_END_CONV when back in DONE_START_CONV
000010DC  387C 0000                129      MOVE.W #$0000,A4 clear A4 for reprocessing
000010E0                           130      
000010E0  6000 FF3A                131      BRA PROMPT_FOR_END
000010E4                           132         
000010E4                           133  *-- Use print buffer pointer to print out instructions. Set good/bad flag (D7) upon 
000010E4                           134  *-- invalid instruction and report back to here. A3 is opcode pointer. 
000010E4                           135  PRINT_INSTRUCTIONS  
000010E4  4EB9 00001180            136      JSR NEEDS_NEW_SCREEN
000010EA                           137      
000010EA  B9CB                     138      CMPA.L A3,A4 *-- check if at end address 
000010EC  6F00 00D8                139      BLE REACHED_END
000010F0                           140   
000010F0  320B                     141      MOVE.W A3, D1 *-- print instruction address
000010F2  143C 0010                142      MOVE.B #16,D2
000010F6  103C 000F                143      MOVE.B #15,D0 
000010FA  4E4F                     144      TRAP #15 
000010FC                           145      
000010FC  43F9 00002034            146      LEA SPACE, A1
00001102  103C 000E                147      MOVE.B #14,D0 
00001106  4E4F                     148      TRAP #15 
00001108                           149          
00001108  1E3C 0000                150      MOVE.B #0,D7        * Invalid flag is set to zero
0000110C  2C7C 00000900            151      MOVEA.L #PBUFF,A6   * Printbuff is A6
00001112                           152  
00001112  361B                     153      MOVE.W (A3)+, D3
00001114                           154      
00001114                           155      ** SAVE DATA REGISTERS (Except D7)
00001114  48E7 FE00                156      MOVEM.L D0-D6,-(SP)
00001118                           157      
00001118  4EB9 00001228            158      JSR START_OP
0000111E                           159      
0000111E  4CDF 007F                160      MOVEM.L (SP)+,D0-D6
00001122                           161      ** LOAD DATA REGISTERS (Except D7)
00001122                           162  
00001122  BE7C 0001                163      CMP #1,D7
00001126  6700 002C                164      BEQ DISPLAY_INVALID_INSTRUCTION
0000112A                           165  
0000112A  1CBC 0000                166      MOVE.B #0, (A6)     * Add terminator to print buffer
0000112E  227C 00000900            167      MOVEA.L #PBUFF,A1
00001134  103C 000E                168      MOVE.B #14, D0
00001138  4E4F                     169      TRAP #15            * Print print buffer
0000113A                           170      
0000113A                           171      * Need space after print buffer? **********************************************
0000113A  43F9 00002034            172      LEA SPACE, A1
00001140  103C 000E                173      MOVE.B #14,D0 
00001144  4E4F                     174      TRAP #15 
00001146                           175      
00001146  43F9 00002030            176      LEA LINE_BREAK,A1
0000114C  103C 000E                177      MOVE.B #14,D0 
00001150  4E4F                     178      TRAP #15
00001152                           179      
00001152  6090                     180      BRA PRINT_INSTRUCTIONS
00001154                           181      
00001154                           182  *Display XXXXXXXX DATA YYYY if memory cannot be decoded to legitimate instruction   
00001154                           183  DISPLAY_INVALID_INSTRUCTION 
00001154                           184  
00001154  43F9 00002022            185      LEA DATA, A1
0000115A  103C 000E                186      MOVE.B #14,D0 
0000115E  4E4F                     187      TRAP #15 
00001160                           188  
00001160  143C 0010                189      MOVE.B #16, D2
00001164                           190      
00001164  554B                     191      SUBA.W  #$0002,A3 * Offset to go back to bad data opcode word
00001166  3213                     192      MOVE.W (A3),D1 * FIX: Needs to print CURRENT opcode word, not next.
00001168  544B                     193      ADDA.W  #$0002,A3 * Go back to correct current position
0000116A                           194      
0000116A                           195      
0000116A  103C 000F                196      MOVE.B #15, D0
0000116E  4E4F                     197      TRAP #15            * Print print buffer
00001170                           198      
00001170  43F9 00002030            199      LEA LINE_BREAK,A1
00001176  103C 000E                200      MOVE.B #14,D0 
0000117A  4E4F                     201      TRAP #15
0000117C                           202  
0000117C  6000 FF66                203      BRA PRINT_INSTRUCTIONS
00001180                           204           
00001180                           205  *--Check if output reaches the end of screen 
00001180                           206  NEEDS_NEW_SCREEN
00001180  5244                     207      ADD      #1,D4                   
00001182  B87C 0019                208      CMP      #25,D4 check if output reaches 25 lines                                                                                                
00001186  6700 0010                209      BEQ      PROMPT_USER_FOR_ENTER
0000118A  43F9 00002034            210      LEA      SPACE,A1           
00001190  303C 000E                211      MOVE     #14,D0                 
00001194  4E4F                     212      TRAP     #15                        
00001196  4E75                     213      RTS 
00001198                           214      
00001198                           215  *--Prompt user to press enter when display reaches line limit    
00001198                           216  PROMPT_USER_FOR_ENTER
00001198  43F9 00002034            217      LEA    SPACE,A1 
0000119E  103C 000D                218      MOVE.B #13,D0   
000011A2  4E4F                     219      TRAP   #15
000011A4                           220  
000011A4  43F9 00001F88            221      LEA ENTER_MESSAGE, A1 *Prompt user to press enter to display new screen
000011AA  103C 000E                222      MOVE.B #14, D0
000011AE  4E4F                     223      TRAP #15
000011B0                           224      
000011B0  4244                     225      CLR      D4 
000011B2  103C 0005                226      MOVE.B   #5,D0 read enter from keyboard         
000011B6  4E4F                     227      TRAP     #15        
000011B8                           228  
000011B8  43F9 00002034            229      LEA SPACE, A1 fixed alignment issues
000011BE  103C 000E                230      MOVE.B #14,D0 
000011C2  4E4F                     231      TRAP #15    
000011C4  4E75                     232      RTS 
000011C6                           233  
000011C6                           234  
000011C6                           235  *--Ask if user wants to disassemble more memory--*
000011C6                           236  REACHED_END
000011C6  43F9 00002034            237      LEA SPACE, A1
000011CC  103C 000E                238      MOVE.B #14,D0 
000011D0  4E4F                     239      TRAP #15 
000011D2                           240      
000011D2  43F9 00001FEC            241      LEA ASK_REPEAT,A1 
000011D8  103C 000E                242      MOVE.B #14,D0 
000011DC  4E4F                     243      TRAP #15 
000011DE                           244      
000011DE  103C 0004                245      MOVE.B #4,D0 
000011E2  4E4F                     246      TRAP #15 Read num from the keyboard into D1.L
000011E4                           247      
000011E4  0C01 0000                248      CMPI.B #0, D1 0 = yes
000011E8  6700 000A                249      BEQ CLEAR_REG
000011EC                           250      
000011EC  0C01 0001                251      CMPI.B #1,D1 1 = no
000011F0  6700 0F6C                252      BEQ DONE
000011F4                           253      
000011F4                           254  *--Clear all registers for reprocessing--*
000011F4                           255  CLEAR_REG 
000011F4  4241                     256      CLR D1
000011F6  4242                     257      CLR D2
000011F8  4243                     258      CLR D3
000011FA  4244                     259      CLR D4
000011FC  4245                     260      CLR D5
000011FE  4246                     261      CLR D6
00001200                           262      
00001200  207C 00000000            263      MOVE.L #00000000,A0
00001206  227C 00000000            264      MOVE.L #00000000,A1
0000120C  267C 00000000            265      MOVE.L #00000000,A3
00001212  287C 00000000            266      MOVE.L #00000000,A4
00001218  2A7C 00000000            267      MOVE.L #00000000,A5
0000121E  2C7C 00000000            268      MOVE.L #00000000,A6
00001224                           269      
00001224  6000 FDDA                270      BRA PROMPT_FOR_START
00001228                           271  
00001228                           272  START_OP
00001228                           273  
00001228                           274  NOP
00001228  383C 4E71                275      MOVE.W  #$4E71,D4
0000122C  B644                     276      CMP.W   D4,D3
0000122E  6600 0010                277      BNE     RTS
00001232                           278      *Print instruction to output
00001232  43F9 000020C0            279      LEA     PRNT_NOP,A1
00001238  4EB9 00001E66            280      JSR PRINT_BUFF
0000123E  4E75                     281      RTS *Return to I/O subroutine to find next instruction
00001240                           282  RTS
00001240  383C 4E75                283      MOVE.W  #$4E75,D4
00001244  B644                     284      CMP.W   D4,D3
00001246  6600 0010                285      BNE     FIND_OP
0000124A                           286      *Print instruction
0000124A  43F9 000020C4            287      LEA     PRNT_RTS,A1
00001250  4EB9 00001E66            288      JSR PRINT_BUFF
00001256  4E75                     289      RTS
00001258                           290  
00001258                           291  FIND_OP *determine op code based on first 2 bits
00001258  1C3C 000E                292      MOVE.B  #14,D6
0000125C  3803                     293      MOVE.W  D3,D4
0000125E  EC6C                     294      LSR.W   D6,D4
00001260                           295      
00001260  B83C 0000                296      CMP.B   #%00,D4 *MOVE,MOVEA
00001264  6700 001A                297      BEQ     OP_00
00001268                           298      
00001268  B83C 0001                299      CMP.B   #%01,D4 *MOVEQ, MOVEM, ADDQ, LEA, NOT, BGT/BLE/BEQ, JSR, BRA
0000126C  6700 00C6                300      BEQ     OP_01
00001270                           301      
00001270  B83C 0002                302      CMP.B   #%10,D4 *OR,SUB
00001274  6700 03CA                303      BEQ     OP_10
00001278                           304      
00001278  B83C 0003                305      CMP.B   #%11,D4 *ADD,AND,LSL,LSR,ROL,ROR,ASL,ASR
0000127C  6700 0518                306      BEQ     OP_11
00001280                           307      
00001280                           308  OP_00 *Determine if MOVE or MOVEA op code
00001280                           309  *Isolate bits 6,7,8
00001280  3803                     310      MOVE.W  D3,D4
00001282  EF4C                     311      LSL.W   #7,D4   *Remove first 7 bits
00001284  1C3C 000D                312      MOVE.B  #13,D6
00001288  EC6C                     313      LSR.W   D6,D4   *Remove last 6 bits
0000128A  B87C 0001                314      CMP.W   #%001,D4
0000128E  6700 0012                315      BEQ     IS_MOVEA
00001292                           316  IS_MOVE
00001292                           317      *Print MOVE
00001292  43F9 000020C8            318      LEA     PRNT_MOVE,A1
00001298  4EB9 00001E66            319      JSR PRINT_BUFF
0000129E                           320  
0000129E  6000 000E                321      BRA     MOVE_SIZE
000012A2                           322  
000012A2                           323  IS_MOVEA
000012A2                           324      *Print MOVEA
000012A2  43F9 000020CD            325      LEA     PRNT_MOVEA,A1
000012A8  4EB9 00001E66            326      JSR PRINT_BUFF
000012AE                           327  MOVE_SIZE
000012AE  3803                     328      MOVE.W  D3,D4
000012B0  1C3C 000E                329      MOVE.B  #14,D6
000012B4  E54C                     330      LSL.W   #2,D4   *Remove first 2 bits
000012B6  EC6C                     331      LSR.W   D6,D4   *Remove last 12 bits to find size code
000012B8                           332      
000012B8  B83C 0001                333      CMP.B   #%01,D4
000012BC  6700 0016                334      BEQ     MOVE_B
000012C0                           335      
000012C0  B83C 0003                336      CMP.B   #%11,D4
000012C4  6700 002E                337      BEQ     MOVE_W
000012C8                           338      
000012C8  B83C 0002                339      CMP.B   #%10,D4
000012CC  6700 0046                340      BEQ     MOVE_L
000012D0  6000 0908                341      BRA     INVALID_OP   
000012D4                           342  MOVE_B    
000012D4                           343      *Print .B (byte)
000012D4  4EB9 00001BA4            344      JSR PRINT_B
000012DA                           345      *Proceed to EA Subroutine
000012DA  4EB9 00001CC2            346      JSR EA_SRC
000012E0  43F9 00002038            347      LEA COMMA,A1
000012E6  4EB9 00001E66            348      JSR PRINT_BUFF
000012EC                           349  
000012EC  4EB9 00001CDA            350      JSR EA_DEST
000012F2                           351      
000012F2  4E75                     352      RTS * Done printing move
000012F4                           353  MOVE_W    
000012F4                           354      *Print .W (word)
000012F4  4EB9 00001BB6            355      JSR PRINT_W
000012FA                           356      *Proceed to EA Subroutine
000012FA  4EB9 00001CC2            357      JSR EA_SRC 
00001300  43F9 00002038            358      LEA COMMA,A1
00001306  4EB9 00001E66            359      JSR PRINT_BUFF
0000130C  4EB9 00001CDA            360      JSR EA_DEST
00001312                           361  
00001312  4E75                     362      RTS
00001314                           363  MOVE_L
00001314                           364      *Print .L (long)
00001314  4EB9 00001BC8            365      JSR PRINT_L
0000131A                           366      *Proceed to EA Subroutine
0000131A  4EB9 00001CC2            367      JSR EA_SRC
00001320  43F9 00002038            368      LEA COMMA,A1
00001326  4EB9 00001E66            369      JSR PRINT_BUFF
0000132C  4EB9 00001CDA            370      JSR EA_DEST
00001332                           371  
00001332  4E75                     372      RTS
00001334                           373  
00001334                           374  OP_01 *MOVEQ, MOVEM, ADDQ, LEA, NOT, BGT/BLE/BEQ, JSR, BRA
00001334  3803                     375      MOVE.W  D3,D4
00001336  1C3C 000C                376      MOVE.B  #12,D6
0000133A  EC6C                     377      LSR.W   D6,D4   *get first 4 bits
0000133C                           378      
0000133C  B83C 0007                379      CMP.B   #%0111,D4   *MOVEQ
00001340  6700 001A                380      BEQ     OP_0111
00001344  B83C 0004                381      CMP.B   #%0100,D4   *MOVEM, LEA, NOT, JSR
00001348  6700 0066                382      BEQ     OP_0100
0000134C  B83C 0005                383      CMP.B   #%0101,D4   *ADDQ
00001350  6700 0192                384      BEQ     OP_0101
00001354  B83C 0006                385      CMP.B   #%0110,D4   *Bcc, BRA
00001358  6700 020E                386      BEQ     OP_0110
0000135C                           387      
0000135C                           388  OP_0111 *MOVEQ
0000135C                           389      *Check bit 8 to validate
0000135C  2803                     390      MOVE.L  D3,D4
0000135E  EF4C                     391      LSL.W   #7,D4
00001360  1C3C 000F                392      MOVE.B  #15,D6
00001364  EC6C                     393      LSR.W   D6,D4
00001366  B83C 0000                394      CMP.B   #%0,D4
0000136A  6600 086E                395      BNE     INVALID_OP
0000136E                           396  
0000136E                           397      *Print MOVEQ
0000136E  43F9 000020D9            398      LEA     PRNT_MOVEQ,A1
00001374  4EB9 00001E66            399      JSR PRINT_BUFF
0000137A                           400      
0000137A  2803                     401      MOVE.L  D3,D4
0000137C  E14C                     402      LSL.W   #8,D4
0000137E  E04C                     403      LSR.W   #8,D4
00001380                           404      *Print data
00001380                           405      
00001380                           406      ** NOW PRINTS #$ in front
00001380                           407      
00001380  43F9 0000213E            408      LEA     PRNT_DT,A1
00001386  4EB9 00001E66            409      JSR PRINT_BUFF
0000138C                           410      
0000138C  2204                     411      MOVE.L  D4,D1
0000138E  4EB9 00001E72            412      JSR     PRINT_HEXBUFF
00001394                           413      
00001394                           414      *** Move reg. bits into a bitfield for EA
00001394  3803                     415      MOVE.W  D3,D4
00001396  C87C 0E00                416      AND.W   #%0000111000000000,D4
0000139A  E64C                     417      LSR.W   #3,D4
0000139C  EC4C                     418      LSR.W   #6,D4
0000139E  1C04                     419      MOVE.B  D4,D6
000013A0                           420      
000013A0  48E7 FF00                421      MOVEM.L D0-D7,-(SP)
000013A4                           422      
000013A4  4EB9 00001D06            423      JSR     EA_SUB
000013AA                           424      
000013AA  4CDF 00FF                425      MOVEM.L (SP)+,D0-D7
000013AE                           426     
000013AE  4E75                     427      RTS
000013B0                           428      
000013B0                           429  * HAD TO REORDER INSTRUCTIONS HERE;
000013B0                           430      * Before, MOVEM or JSR check was first, which needed 5 bits.
000013B0                           431      * The ones with fewer bits need to be done first, as this was causing the following:
000013B0                           432          * LEA would have first 4 bits as 0100, and the following 3 bits were address register specifier bits
000013B0                           433          * If that register happened to be anything that toggled the first bit to 1, LEA first five bits matches that of MOVEM and JSR!
000013B0                           434          * Would cause LEA to not be read correctly with certain register values. 
000013B0                           435     
000013B0                           436  OP_0100 *MOVEM, LEA, NOT, JSR
000013B0                           437      *Check if LEA (Now before MOVEM/JSR Check)
000013B0  2803                     438      MOVE.L  D3,D4
000013B2  EF4C                     439      LSL.W   #7,D4
000013B4  1C3C 000D                440      MOVE.B  #13,D6
000013B8  EC6C                     441      LSR.W   D6,D4
000013BA  B83C 0007                442      CMP.B   #%111,D4    *Check bits 8,7,6
000013BE  6700 0016                443      BEQ     IS_LEA
000013C2                           444  
000013C2  2803                     445      MOVE.L  D3,D4
000013C4  1C3C 000B                446      MOVE.B  #11,D6
000013C8  EC6C                     447      LSR.W   D6,D4
000013CA  B83C 0009                448      CMP.B   #%01001,D4  *MOVEM or JSR
000013CE  6700 00A8                449      BEQ     OP_01001
000013D2                           450      
000013D2  6000 0044                451      BRA     IS_NOT *** CHECK THIS, THINK THIS WORKS, BUT HAVEN'T TESTED ****************
000013D6                           452      
000013D6                           453      
000013D6                           454  IS_LEA
000013D6  43F9 000020FA            455      LEA     PRNT_LEA,A1
000013DC  4EB9 00001E66            456      JSR     PRINT_BUFF
000013E2                           457      * HANDLE OPERANDS
000013E2  1A3C 0003                458      MOVE.B  #3,D5 * Size operation is always longword for LEA, so set here.
000013E6                           459      
000013E6  4EB9 00001CC2            460      JSR EA_SRC * Handle the source EA
000013EC                           461      
000013EC  2803                     462      MOVE.L  D3,D4 **** CHANGED TO LONGWORD TO POTENTIALLY DEAL WITH BAD DATA AT FRONT WORD. *******************
000013EE  C87C 0E00                463      AND.W   #%0000111000000000,D4 * Isolate Register #
000013F2  E64C                     464      LSR.W   #3,D4
000013F4  EC4C                     465      LSR.W   #6,D4
000013F6  1C04                     466      MOVE.B  D4,D6   * Prime D6 register
000013F8  8C3C 0008                467      OR.B    #%00001000,D6 * Add the An mode to D6
000013FC                           468      
000013FC  48E7 FF00                469      MOVEM.L D0-D7,-(SP) * Move register contents to stack (NOT SAVING D7 ANYMORE*******************)
00001400                           470      
00001400  43F9 00002038            471      LEA COMMA,A1
00001406  4EB9 00001E66            472      JSR PRINT_BUFF
0000140C                           473  
0000140C  4EB9 00001D06            474      JSR     EA_SUB * Handle the destination EA (last 6 bits of D6)
00001412                           475      
00001412                           476      * MOVEM RETURN (NOT SAVING D7 ANYMORE*******************)
00001412  4CDF 00FF                477      MOVEM.L (SP)+,D0-D7
00001416                           478          
00001416  4E75                     479      RTS * Return to IO
00001418                           480  
00001418                           481  
00001418                           482  
00001418                           483  IS_NOT    
00001418  2803                     484      MOVE.L  D3,D4
0000141A  E04C                     485      LSR.W   #8,D4
0000141C  B87C 0046                486      CMP.W   #%01000110,D4
00001420  6600 07B8                487      BNE     INVALID_OP
00001424                           488      
00001424  43F9 000020F3            489      LEA     PRNT_NOT,A1
0000142A  4EB9 00001E66            490      JSR PRINT_BUFF
00001430                           491      
00001430  2803                     492      MOVE.L  D3,D4
00001432  E14C                     493      LSL.W   #8,D4
00001434  1C3C 000E                494      MOVE.B  #14,D6
00001438  EC6C                     495      LSR.W   D6,D4 
0000143A  B83C 0000                496      CMP.B   #%00,D4
0000143E  6700 0016                497      BEQ     NOT_B
00001442  B83C 0001                498      CMP.B   #%01,D4
00001446  6700 0018                499      BEQ     NOT_W
0000144A  B83C 0002                500      CMP.B   #%10,D4
0000144E  6700 001A                501      BEQ     NOT_L
00001452                           502  
00001452  6000 0786                503      BRA     INVALID_OP    
00001456                           504  NOT_B
00001456  4EB9 00001BA4            505      JSR PRINT_B
0000145C                           506      *Proceed to EA Subroutine  
0000145C  6000 0012                507      BRA NOT_EA  
00001460                           508  NOT_W
00001460  4EB9 00001BB6            509      JSR PRINT_W
00001466                           510      *Proceed to EA Subroutine
00001466  6000 0008                511      BRA NOT_EA    
0000146A                           512  NOT_L
0000146A  4EB9 00001BC8            513      JSR PRINT_L 
00001470                           514      *Proceed to EA Subroutine
00001470                           515      
00001470                           516  NOT_EA * DEALING W/ NOT EA HERE (May need to save registers...) *************
00001470                           517      
00001470  4EB9 00001CC2            518      JSR EA_SRC
00001476  4E75                     519      RTS *** Return to IO ***
00001478                           520      
00001478                           521      
00001478                           522  OP_01001    
00001478  2803                     523      MOVE.L  D3,D4
0000147A  EC4C                     524      LSR.W   #6,D4
0000147C  B87C 013A                525      CMP.W   #%0100111010,D4 *Check if JSR
00001480  6600 0016                526      BNE     IS_MOVEM
00001484  43F9 000020DF            527      LEA     PRNT_JSR,A1
0000148A  4EB9 00001E66            528      JSR     PRINT_BUFF
00001490  4EB9 00001CC2            529      JSR     EA_SRC
00001496  4E75                     530      RTS     *Proceed to EA Subroutine    
00001498                           531  IS_MOVEM
00001498                           532      *Check bits 9,8,7 to validate   
00001498  2803                     533      MOVE.L  D3,D4
0000149A  ED4C                     534      LSL.W   #6,D4
0000149C  1C3C 000D                535      MOVE.B  #13,D6
000014A0  EC6C                     536      LSR.W   D6,D4
000014A2  B83C 0001                537      CMP.B   #%001,D4
000014A6  6600 0732                538      BNE     INVALID_OP
000014AA                           539      
000014AA  43F9 000020D3            540      LEA     PRNT_MOVEM,A1
000014B0  4EB9 00001E66            541      JSR PRINT_BUFF
000014B6                           542      
000014B6  2803                     543      MOVE.L  D3,D4
000014B8  1C3C 0009                544      MOVE.B  #9,D6
000014BC  ED6C                     545      LSL.W   D6,D4
000014BE  1C3C 000F                546      MOVE.B  #15,D6
000014C2  EC6C                     547      LSR.W   D6,D4
000014C4                           548      
000014C4  B83C 0000                549      CMP.B   #0,D4
000014C8  6700 000E                550      BEQ     MOVEM_W
000014CC  B83C 0001                551      CMP.B   #1,D4
000014D0  6700 000C                552      BEQ     MOVEM_L    
000014D4  6000 0704                553      BRA     INVALID_OP   
000014D8                           554  MOVEM_W
000014D8  4EB9 00001BB6            555      JSR PRINT_W
000014DE                           556      *Proceed to EA Subroutine    
000014DE                           557  MOVEM_L
000014DE  4EB9 00001BC8            558      JSR PRINT_L
000014E4                           559      *Proceed to EA Subroutine    
000014E4                           560  OP_0101 *ADDQ
000014E4                           561      *Check bit 8 to validate
000014E4  2803                     562      MOVE.L  D3,D4
000014E6  EF4C                     563      LSL.W   #7,D4
000014E8  1C3C 000F                564      MOVE.B  #15,D6
000014EC  EC6C                     565      LSR.W   D6,D4
000014EE  B83C 0000                566      CMP.B   #%0,D4
000014F2  6600 06E6                567      BNE     INVALID_OP
000014F6                           568  
000014F6                           569      *Print ADDQ
000014F6  43F9 000020FE            570      LEA     PRNT_ADDQ,A1
000014FC  4EB9 00001E66            571      JSR     PRINT_BUFF
00001502                           572      
00001502  2803                     573      MOVE.L  D3,D4
00001504  E14C                     574      LSL.W   #8,D4   *Remove first 8 bits
00001506  1C3C 000E                575      MOVE.B  #14,D6
0000150A  EC6C                     576      LSR.W   D6,D4   *and last 6 bits to get size
0000150C                           577      
0000150C  B83C 0000                578      CMP.B   #%00,D4
00001510  6700 0012                579      BEQ     ADDQ_B
00001514  B83C 0001                580      CMP.B   #%01,D4
00001518  6700 0014                581      BEQ     ADDQ_W
0000151C  B83C 0002                582      CMP.B   #%10,D4
00001520  6700 0016                583      BEQ     ADDQ_L
00001524                           584      
00001524                           585  ADDQ_B    
00001524                           586      *Print .B
00001524  4EB9 00001BA4            587      JSR PRINT_B
0000152A  6000 0016                588      BRA     ADDQ_DATA
0000152E                           589      
0000152E                           590  ADDQ_W     
0000152E                           591      *Print .W
0000152E  4EB9 00001BB6            592      JSR PRINT_W
00001534  6000 000C                593      BRA     ADDQ_DATA
00001538                           594      
00001538                           595  ADDQ_L     
00001538                           596      *Print .L
00001538  4EB9 00001BC8            597      JSR PRINT_L
0000153E  6000 0002                598      BRA     ADDQ_DATA
00001542                           599  ADDQ_DATA    
00001542  2803                     600      MOVE.L  D3,D4
00001544  E94C                     601      LSL.W   #4,D4   *Remove first 4 bits
00001546  1C3C 000D                602      MOVE.B  #13,D6
0000154A  EC6C                     603      LSR.W   D6,D4
0000154C                           604      
0000154C                           605      *Print data
0000154C  43F9 0000213C            606      LEA     PRNT_Q,A1
00001552  4EB9 00001E66            607      JSR     PRINT_BUFF
00001558                           608      
00001558  3204                     609      MOVE.W  D4,D1
0000155A  4EB9 00001E72            610      JSR     PRINT_HEXBUFF
00001560                           611      
00001560                           612      * Handle EA
00001560  4EB9 00001CC2            613      JSR     EA_SRC
00001566                           614      
00001566  4E75                     615      RTS * Return to IO
00001568                           616      
00001568                           617      *Proceed to EA Subroutine
00001568                           618  OP_0110    
00001568  2803                     619      MOVE.L  D3,D4
0000156A  1C3C 000C                620      MOVE.B  #12,D6
0000156E  E94C                     621      LSL.W   #4,D4
00001570  EC6C                     622      LSR.W   D6,D4
00001572                           623      
00001572  B87C 0000                624      CMP.W   #%0000,D4
00001576  6700 001E                625      BEQ     IS_BRA
0000157A                           626      
0000157A  B87C 000E                627      CMP.W   #%1110,D4
0000157E  6700 002A                628      BEQ     IS_BGT
00001582                           629      
00001582  B87C 000F                630      CMP.W   #%1111,D4
00001586  6700 0036                631      BEQ     IS_BLE
0000158A                           632      
0000158A  B87C 0007                633      CMP.W   #%0111,D4
0000158E  6700 0042                634      BEQ     IS_BEQ
00001592                           635      
00001592  6000 0646                636      BRA     INVALID_OP
00001596                           637  IS_BRA
00001596  43F9 000020EF            638      LEA     PRNT_BRA,A1
0000159C  4EB9 00001E66            639      JSR     PRINT_BUFF
000015A2  4EB9 000015E6            640      JSR DISP
000015A8  4E75                     641      RTS
000015AA                           642      
000015AA                           643  IS_BGT
000015AA  43F9 000020E3            644      LEA     PRNT_BGT,A1
000015B0  4EB9 00001E66            645      JSR     PRINT_BUFF
000015B6  4EB9 000015E6            646      JSR DISP
000015BC  4E75                     647      RTS
000015BE                           648  IS_BLE
000015BE  43F9 000020E7            649      LEA     PRNT_BLE,A1
000015C4  4EB9 00001E66            650      JSR     PRINT_BUFF
000015CA  4EB9 000015E6            651      JSR DISP
000015D0  4E75                     652      RTS
000015D2                           653  IS_BEQ  
000015D2  43F9 000020EB            654      LEA     PRNT_BEQ,A1
000015D8  4EB9 00001E66            655      JSR     PRINT_BUFF
000015DE  4EB9 000015E6            656      JSR DISP
000015E4  4E75                     657      RTS  
000015E6                           658  *------------SIZE AFFECT DISP VALUE?---------------
000015E6                           659  DISP *8 bit displacement field
000015E6  2803                     660      MOVE.L  D3,D4
000015E8  E14C                     661      LSL.W   #8,D4
000015EA  E04C                     662      LSR.W   #8,D4   *Holds displacement value
000015EC  C87C 00FF                663      AND.W   #$00FF,D4
000015F0                           664      
000015F0  B87C 0000                665      CMP.W   #$00,D4
000015F4  6700 001E                666      BEQ     DISP_16
000015F8  B87C 00FF                667      CMP.W   #$FF,D4
000015FC  6700 002C                668      BEQ     DISP_32
00001600                           669  
00001600  2A4B                     670      MOVEA.L A3,A5
00001602  2C0D                     671      MOVE.L  A5,D6 *Holds next instruction address
00001604  4604                     672      NOT.B   D4  *flip bits
00001606  5284                     673      ADD.L   #%01,D4
00001608                           674      
00001608  9C44                     675      SUB.W   D4,D6 
0000160A  2206                     676      MOVE.L  D6,D1
0000160C                           677      *=MOVE.B  #16,D2
0000160C                           678      *=MOVE.B  #15,D0
0000160C                           679      *TRAP    #15
0000160C  4EB9 00001E72            680      JSR     PRINT_HEXBUFF
00001612  4E75                     681      RTS    
00001614                           682  DISP_16
00001614  381B                     683      MOVE.W  (A3)+,D4
00001616  2A4B                     684      MOVEA.L A3,A5
00001618  2C0D                     685      MOVE.L A5,D6 *Holds next instruction address
0000161A  4604                     686      NOT.B   D4
0000161C  5284                     687      ADD.L   #%01,D4
0000161E                           688      
0000161E  9C44                     689      SUB.W   D4,D6
00001620  2206                     690      MOVE.L  D6,D1
00001622                           691      *=MOVE.B  #16,D2
00001622                           692      *=MOVE.B  #15,D0
00001622                           693      *TRAP    #15
00001622  4EB9 00001E72            694      JSR     PRINT_HEXBUFF
00001628  4E75                     695      RTS
0000162A                           696  DISP_32    
0000162A  281B                     697      MOVE.L  (A3)+,D4
0000162C  2A4B                     698      MOVEA.L A3,A5
0000162E  2C0D                     699      MOVE.L  A5,D6 *Holds next instruction address
00001630  4604                     700      NOT.B   D4
00001632  5284                     701      ADD.L   #%01,D4
00001634                           702      
00001634  9C44                     703      SUB.W   D4,D6
00001636  2206                     704      MOVE.L  D6,D1
00001638  4EB9 00001E72            705      JSR     PRINT_HEXBUFF
0000163E                           706      * MOVE.B  #16,D2
0000163E                           707      * MOVE.B  #15,D0
0000163E                           708      * TRAP    #15
0000163E  4E75                     709      RTS
00001640                           710  OP_10   *OR,SUB
00001640  2803                     711      MOVE.L  D3,D4
00001642  E54C                     712      LSL.W   #2,D4
00001644  1C3C 000E                713      MOVE.B  #14,D6
00001648  EC6C                     714      LSR.W   D6,D4
0000164A  B83C 0000                715      CMP.B   #%00,D4 *Check bits 13 and 12
0000164E  6700 000E                716      BEQ     IS_OR
00001652                           717      
00001652  B83C 0001                718      CMP.B   #%01,D4
00001656  6700 00A4                719      BEQ     IS_SUB
0000165A                           720      
0000165A  6000 057E                721      BRA     INVALID_OP
0000165E                           722  IS_OR
0000165E  43F9 000020F7            723      LEA     PRNT_OR,A1
00001664  4EB9 00001E66            724      JSR     PRINT_BUFF
0000166A                           725      
0000166A  2803                     726      MOVE.L  D3,D4
0000166C  EF4C                     727      LSL.W   #7,D4
0000166E  1C3C 000D                728      MOVE.B  #13,D6
00001672  EC6C                     729      LSR.W   D6,D4
00001674                           730      
00001674                           731      * Destination is Dn
00001674  B83C 0000                732      CMP.B   #%000,D4
00001678  6700 002E                733      BEQ     OR_B_D
0000167C  B83C 0001                734      CMP.B   #%001,D4
00001680  6700 0034                735      BEQ     OR_W_D
00001684  B83C 0002                736      CMP.B   #%010,D4
00001688  6700 003A                737      BEQ     OR_L_D
0000168C                           738      
0000168C  B83C 0004                739      CMP.B   #%100,D4
00001690  6700 0040                740      BEQ     OR_B
00001694  B83C 0005                741      CMP.B   #%101,D4
00001698  6700 0046                742      BEQ     OR_W
0000169C  B83C 0006                743      CMP.B   #%110,D4
000016A0  6700 004C                744      BEQ     OR_L
000016A4                           745      
000016A4  6000 0534                746      BRA     INVALID_OP
000016A8                           747  
000016A8                           748  
000016A8                           749  
000016A8                           750  
000016A8                           751  * For these, handle EA first, then Data reg.
000016A8                           752  OR_B_D
000016A8  4EB9 00001BA4            753      JSR PRINT_B
000016AE                           754      *Proceed to EA Subroutine
000016AE  4EB9 00001C64            755      JSR     ADDFORMAT_DATA_DEST_EA
000016B4                           756      
000016B4  4E75                     757      RTS * Return to IO
000016B6                           758      
000016B6                           759  OR_W_D
000016B6  4EB9 00001BB6            760      JSR PRINT_W
000016BC                           761      *Proceed to EA Subroutine
000016BC  4EB9 00001C64            762      JSR     ADDFORMAT_DATA_DEST_EA
000016C2                           763      
000016C2  4E75                     764      RTS * Return to IO    
000016C4                           765  OR_L_D
000016C4  4EB9 00001BC8            766      JSR PRINT_L
000016CA                           767      *Proceed to EA Subroutine
000016CA  4EB9 00001C64            768      JSR     ADDFORMAT_DATA_DEST_EA
000016D0                           769      
000016D0  4E75                     770      RTS * Return to IO
000016D2                           771  
000016D2                           772  
000016D2                           773  * For these, handle Data reg first, then EA    
000016D2                           774  OR_B
000016D2  4EB9 00001BA4            775      JSR PRINT_B
000016D8                           776      *Proceed to EA Subroutine
000016D8  4EB9 00001C92            777      JSR     ADDFORMAT_EA_DEST_EA
000016DE  4E75                     778      RTS * Return to IO 
000016E0                           779      
000016E0                           780  OR_W
000016E0  4EB9 00001BB6            781      JSR PRINT_W
000016E6                           782      *Proceed to EA Subroutine
000016E6  4EB9 00001C92            783      JSR     ADDFORMAT_EA_DEST_EA
000016EC  4E75                     784      RTS * Return to IO 
000016EE                           785      
000016EE                           786  OR_L
000016EE  4EB9 00001BC8            787      JSR PRINT_L
000016F4                           788      *Proceed to EA Subroutine
000016F4  4EB9 00001C92            789      JSR     ADDFORMAT_EA_DEST_EA
000016FA  4E75                     790      RTS * Return to IO 
000016FC                           791      
000016FC                           792  IS_SUB
000016FC  43F9 00002110            793      LEA     PRNT_SUB,A1
00001702  4EB9 00001E66            794      JSR     PRINT_BUFF
00001708                           795  
00001708  2803                     796      MOVE.L  D3,D4
0000170A  EF4C                     797      LSL.W   #7,D4
0000170C  1C3C 000D                798      MOVE.B  #13,D6
00001710  EC6C                     799      LSR.W   D6,D4
00001712                           800      
00001712                           801      * Data register as destination;
00001712  B83C 0000                802      CMP.B   #%000,D4
00001716  6700 002A                803      BEQ     SUB_B_D
0000171A  B83C 0001                804      CMP.B   #%001,D4
0000171E  6700 0030                805      BEQ     SUB_W_D
00001722  B83C 0002                806      CMP.B   #%010,D4
00001726  6700 0036                807      BEQ     SUB_L_D
0000172A                           808  
0000172A                           809      * EA as destination;
0000172A  B83C 0004                810      CMP.B   #%100,D4
0000172E  6700 003C                811      BEQ     SUB_B
00001732  B83C 0005                812      CMP.B   #%101,D4
00001736  6700 0042                813      BEQ     SUB_W
0000173A  B83C 0006                814      CMP.B   #%110,D4
0000173E  6700 0048                815      BEQ     SUB_L
00001742                           816  
00001742                           817  
00001742                           818  * Handle EA, then Data Reg.
00001742                           819  SUB_B_D
00001742  4EB9 00001BA4            820      JSR PRINT_B
00001748                           821      *Proceed to EA Subroutine
00001748  4EB9 00001C64            822      JSR     ADDFORMAT_DATA_DEST_EA
0000174E                           823      
0000174E  4E75                     824      RTS * Return to IO    
00001750                           825  SUB_W_D
00001750  4EB9 00001BB6            826      JSR PRINT_W
00001756                           827      *Proceed to EA Subroutine
00001756  4EB9 00001C64            828      JSR     ADDFORMAT_DATA_DEST_EA
0000175C                           829      
0000175C  4E75                     830      RTS * Return to IO    
0000175E                           831  SUB_L_D
0000175E  4EB9 00001BC8            832      JSR PRINT_L
00001764                           833      *Proceed to EA Subroutine 
00001764  4EB9 00001C64            834      JSR     ADDFORMAT_DATA_DEST_EA
0000176A                           835      
0000176A  4E75                     836      RTS * Return to IO
0000176C                           837  
0000176C                           838  
0000176C                           839  * Handle Data reg, then EA    
0000176C                           840  SUB_B
0000176C  4EB9 00001BA4            841      JSR PRINT_B
00001772                           842      *Proceed to EA Subroutine
00001772  4EB9 00001C92            843      JSR     ADDFORMAT_EA_DEST_EA
00001778  4E75                     844      RTS * Return to IO     
0000177A                           845  SUB_W
0000177A  4EB9 00001BB6            846      JSR PRINT_W
00001780                           847      *Proceed to EA Subroutine    
00001780  4EB9 00001C92            848      JSR     ADDFORMAT_EA_DEST_EA
00001786  4E75                     849      RTS * Return to IO 
00001788                           850  SUB_L
00001788  4EB9 00001BC8            851      JSR PRINT_L
0000178E                           852      *Proceed to EA Subroutine 
0000178E  4EB9 00001C92            853      JSR     ADDFORMAT_EA_DEST_EA
00001794  4E75                     854      RTS * Return to IO     
00001796                           855  
00001796                           856     
00001796                           857  OP_11
00001796  2803                     858      MOVE.L  D3,D4
00001798  1C3C 000C                859      MOVE.B  #12,D6
0000179C  EC6C                     860      LSR.W   D6,D4
0000179E                           861      
0000179E  B83C 000C                862      CMP.B   #%1100,D4   *AND
000017A2  6700 0016                863      BEQ     OP_1100
000017A6                           864      
000017A6  B83C 000D                865      CMP.B   #%1101,D4   *ADD,ADDA
000017AA  6700 00AC                866      BEQ     OP_1101
000017AE                           867      
000017AE  B83C 000E                868      CMP.B   #%1110,D4   *LSL/LSR,ASL/ASR,ROL/ROR
000017B2  6700 019E                869      BEQ     OP_1110
000017B6                           870      
000017B6  6000 0422                871      BRA     INVALID_OP
000017BA                           872  OP_1100 *AND
000017BA  43F9 0000210C            873      LEA     PRNT_AND,A1
000017C0  4EB9 00001E66            874      JSR     PRINT_BUFF
000017C6                           875  
000017C6  2803                     876      MOVE.L  D3,D4
000017C8  EF4C                     877      LSL.W   #7,D4
000017CA  1C3C 000D                878      MOVE.B  #13,D6
000017CE  EC6C                     879      LSR.W   D6,D4 *Get Opmode
000017D0                           880      *< ea > Dn -> Dn (Data reg destination)
000017D0  B83C 0000                881      CMP.B   #%000,D4
000017D4  6700 002E                882      BEQ     AND_B_D
000017D8  B83C 0001                883      CMP.B   #%001,D4
000017DC  6700 0034                884      BEQ     AND_W_D
000017E0  B83C 0002                885      CMP.B   #%010,D4
000017E4  6700 003A                886      BEQ     AND_L_D
000017E8                           887      *Dn < ea > -> < ea > (EA destination)
000017E8  B83C 0004                888      CMP.B   #%100,D4
000017EC  6700 0040                889      BEQ     AND_B
000017F0  B83C 0005                890      CMP.B   #%101,D4
000017F4  6700 0046                891      BEQ     AND_W
000017F8  B83C 0006                892      CMP.B   #%110,D4
000017FC  6700 004C                893      BEQ     AND_L
00001800                           894      
00001800  6000 03D8                895      BRA     INVALID_OP
00001804                           896     
00001804                           897  * Handle EA, then Data Reg.
00001804                           898  AND_B_D
00001804  4EB9 00001BA4            899      JSR PRINT_B
0000180A                           900      *Proceed to EA Subroutine
0000180A  4EB9 00001C64            901      JSR     ADDFORMAT_DATA_DEST_EA
00001810                           902      
00001810  4E75                     903      RTS * Return to IO
00001812                           904      
00001812                           905  AND_W_D
00001812  4EB9 00001BB6            906      JSR PRINT_W
00001818                           907      *Proceed to EA Subroutine    
00001818  4EB9 00001C64            908      JSR     ADDFORMAT_DATA_DEST_EA
0000181E                           909      
0000181E  4E75                     910      RTS * Return to IO
00001820                           911  
00001820                           912  AND_L_D  
00001820  4EB9 00001BC8            913      JSR PRINT_L
00001826                           914      *Proceed to EA Subroutine    
00001826  4EB9 00001C64            915      JSR     ADDFORMAT_DATA_DEST_EA
0000182C                           916      
0000182C  4E75                     917      RTS * Return to IO
0000182E                           918  
0000182E                           919      
0000182E                           920  * Handle data reg, then EA     
0000182E                           921  AND_B
0000182E  4EB9 00001BA4            922      JSR PRINT_B
00001834                           923      *Proceed to EA Subroutine
00001834  4EB9 00001C92            924      JSR     ADDFORMAT_EA_DEST_EA
0000183A  4E75                     925      RTS * Return to IO 
0000183C                           926      
0000183C                           927  AND_W
0000183C  4EB9 00001BB6            928      JSR PRINT_W
00001842                           929      *Proceed to EA Subroutine    
00001842  4EB9 00001C92            930      JSR     ADDFORMAT_EA_DEST_EA
00001848  4E75                     931      RTS * Return to IO 
0000184A                           932  
0000184A                           933  AND_L    
0000184A  4EB9 00001BC8            934      JSR PRINT_L
00001850                           935      *Proceed to EA Subroutine  
00001850  4EB9 00001C92            936      JSR     ADDFORMAT_EA_DEST_EA
00001856  4E75                     937      RTS * Return to IO 
00001858                           938  
00001858                           939      
00001858                           940      
00001858                           941  OP_1101 *ADD,ADDA
00001858  2803                     942      MOVE.L  D3,D4
0000185A  EF4C                     943      LSL.W   #7,D4
0000185C  1C3C 000D                944      MOVE.B  #13,D6
00001860  EC6C                     945      LSR.W   D6,D4 *Get Opmode
00001862                           946      
00001862                           947      *ADD Opmodes
00001862                           948      *< ea > Dn -> Dn (Dn is the destination; Print <ea> first, then data register)
00001862                           949          * Added new branches to differentiate between orders.
00001862  B83C 0000                950      CMP.B   #%000,D4
00001866  6700 005A                951      BEQ     ADD_B_D
0000186A  B83C 0001                952      CMP.B   #%001,D4
0000186E  6700 0064                953      BEQ     ADD_W_D
00001872  B83C 0002                954      CMP.B   #%010,D4
00001876  6700 006E                955      BEQ     ADD_L_D
0000187A                           956      
0000187A                           957      
0000187A                           958      *Dn < ea > -> < ea > (EA is the destination; Print data reg first, then <ea>)
0000187A  B83C 0004                959      CMP.B   #%100,D4
0000187E  6700 0078                960      BEQ     ADD_B
00001882  B83C 0005                961      CMP.B   #%101,D4
00001886  6700 0082                962      BEQ     ADD_W
0000188A  B83C 0006                963      CMP.B   #%110,D4
0000188E  6700 008C                964      BEQ     ADD_L
00001892                           965      
00001892                           966      
00001892                           967      *ADDA Opmodes (ALWAYS has An as the destination, so print <ea> first, then the register)
00001892  B83C 0003                968      CMP.B   #%011,D4
00001896  6700 0096                969      BEQ     ADDA_W
0000189A  B83C 0007                970      CMP.B   #%111,D4
0000189E  6700 00A0                971      BEQ     ADDA_L
000018A2                           972       
000018A2                           973      
000018A2  6000 0336                974      BRA     INVALID_OP
000018A6                           975  
000018A6                           976  IS_ADD
000018A6  43F9 00002103            977      LEA     PRNT_ADD,A1
000018AC  4EB9 00001E66            978      JSR     PRINT_BUFF
000018B2  4E75                     979      RTS
000018B4                           980  IS_ADDA
000018B4  43F9 00002107            981      LEA     PRNT_ADDA,A1
000018BA  4EB9 00001E66            982      JSR     PRINT_BUFF
000018C0  4E75                     983      RTS   
000018C2                           984  
000018C2                           985  * For these, handle EA first, then Data reg.
000018C2                           986  ADD_B_D
000018C2  4EB8 18A6                987      JSR     IS_ADD
000018C6  4EB9 00001BA4            988      JSR     PRINT_B
000018CC                           989      * Handle operands
000018CC  4EB9 00001C64            990      JSR     ADDFORMAT_DATA_DEST_EA
000018D2                           991      
000018D2  4E75                     992      RTS * Return to IO
000018D4                           993      
000018D4                           994  ADD_W_D
000018D4  4EB8 18A6                995      JSR     IS_ADD
000018D8  4EB9 00001BB6            996      JSR     PRINT_W
000018DE                           997      * Handle operands
000018DE  4EB9 00001C64            998      JSR     ADDFORMAT_DATA_DEST_EA
000018E4                           999      
000018E4  4E75                    1000      RTS * Return to IO    
000018E6                          1001  ADD_L_D
000018E6  4EB8 18A6               1002      JSR     IS_ADD
000018EA  4EB9 00001BC8           1003      JSR     PRINT_L
000018F0                          1004      * Handle operands
000018F0  4EB9 00001C64           1005      JSR     ADDFORMAT_DATA_DEST_EA
000018F6                          1006      
000018F6  4E75                    1007      RTS * Return to IO
000018F8                          1008  
000018F8                          1009  
000018F8                          1010  * For these, handle data reg first, then EA.
000018F8                          1011  ADD_B
000018F8  4EB8 18A6               1012      JSR     IS_ADD
000018FC  4EB9 00001BA4           1013      JSR     PRINT_B
00001902                          1014      *Proceed to EA Subroutine
00001902  4EB9 00001C92           1015      JSR     ADDFORMAT_EA_DEST_EA
00001908  4E75                    1016      RTS * Return to IO 
0000190A                          1017      
0000190A                          1018  ADD_W
0000190A  4EB8 18A6               1019      JSR     IS_ADD
0000190E  4EB9 00001BB6           1020      JSR     PRINT_W
00001914                          1021      *Proceed to EA Subroutine    
00001914  4EB9 00001C92           1022      JSR     ADDFORMAT_EA_DEST_EA
0000191A  4E75                    1023      RTS * Return to IO 
0000191C                          1024      
0000191C                          1025  ADD_L
0000191C  4EB8 18A6               1026      JSR     IS_ADD
00001920  4EB9 00001BC8           1027      JSR     PRINT_L
00001926                          1028      *Proceed to EA Subroutine
00001926  4EB9 00001C92           1029      JSR     ADDFORMAT_EA_DEST_EA
0000192C  4E75                    1030      RTS * Return to IO 
0000192E                          1031  
0000192E                          1032  
0000192E                          1033  * Destination must be An, so do EA first, then reg (POTENTIAL BUG, CHECK ********************)
0000192E                          1034  ADDA_W
0000192E  4EB8 18B4               1035      JSR     IS_ADDA
00001932  4EB9 00001BB6           1036      JSR     PRINT_W
00001938                          1037      *Proceed to EA Subroutine
00001938  4EB9 00001C32           1038      JSR     ADDAFORMAT_EA
0000193E  4E75                    1039      RTS * Return to IO 
00001940                          1040      
00001940                          1041  ADDA_L  
00001940  4EB8 18B4               1042      JSR     IS_ADDA  
00001944  4EB9 00001BC8           1043      JSR     PRINT_L
0000194A                          1044      *Proceed to EA Subroutine
0000194A  4EB9 00001C32           1045      JSR     ADDAFORMAT_EA
00001950  4E75                    1046      RTS * Return to IO 
00001952                          1047  
00001952                          1048      
00001952                          1049      
00001952                          1050  OP_1110 *LSL/LSR,ASL/ASR,ROL/ROR (ADDED: Using D2 to track Mem/Reg state (0 = Reg, 1 = Mem) (D2 only used in hex input tester, so good to use))
00001952                          1051  
00001952                          1052      *Memory Shift Check bits 6,7
00001952  2803                    1053      MOVE.L  D3,D4
00001954  E14C                    1054      LSL.W   #8,D4
00001956  7C0E                    1055      MOVE.L  #14,D6
00001958  EC6C                    1056      LSR.W   D6,D4
0000195A                          1057      
0000195A  B83C 0003               1058      CMP.B   #%11,D4
0000195E  6600 0024               1059      BNE     REG
00001962                          1060      *Memory Shift check bits 11,10,9
00001962  2803                    1061      MOVE.L  D3,D4
00001964  E94C                    1062      LSL.W   #4,D4
00001966  1C3C 000D               1063      MOVE.B  #13,D6
0000196A  EC6C                    1064      LSR.W   D6,D4
0000196C                          1065      
0000196C  B83C 0000               1066      CMP.B   #%000,D4 *ASL/ASR
00001970  6700 0064               1067      BEQ     A_MEM
00001974  B83C 0001               1068      CMP.B   #%001,D4 *LSL,LSR
00001978  6700 00D0               1069      BEQ     L_MEM
0000197C  B83C 0003               1070      CMP.B   #%011,D4 *ROL/ROR
00001980  6700 013C               1071      BEQ     R_MEM
00001984                          1072      
00001984                          1073      *Register Shift check bits 4,3
00001984  2803                    1074  REG MOVE.L  D3,D4
00001986  1C3C 000B               1075      MOVE.B  #11,D6
0000198A  ED6C                    1076      LSL.W   D6,D4
0000198C  1C3C 000E               1077      MOVE.B  #14,D6
00001990  EC6C                    1078      LSR.W   D6,D4
00001992                          1079      
00001992  B83C 0000               1080      CMP.B   #%00,D4 *ASL/ASR
00001996  6700 0016               1081      BEQ     A_REG
0000199A  B83C 0001               1082      CMP.B   #%01,D4 *LSL/LSR
0000199E  6700 0082               1083      BEQ     L_REG
000019A2  B83C 0003               1084      CMP.B   #%11,D4 *ROL/ROR
000019A6  6700 00EE               1085      BEQ     R_REG
000019AA                          1086      
000019AA                          1087      
000019AA  6000 022E               1088      BRA     INVALID_OP
000019AE                          1089      
000019AE                          1090      *Check bit 8 to determine L/R shift
000019AE                          1091  A_REG
000019AE  4EB9 00001B0A           1092      JSR     RGHT_LFT
000019B4                          1093      
000019B4  143C 0000               1094      MOVE.B  #0,D2 * SET D2 TO 0 TO KNOW IS REG
000019B8                          1095      
000019B8  4286                    1096      CLR.L   D6
000019BA  1C3C 0001               1097      MOVE.B  #01,D6
000019BE  B83C 0000               1098      CMP.B   #%0,D4
000019C2  6700 0032               1099      BEQ     IS_ASR
000019C6  B83C 0001               1100      CMP.B   #%1,D4
000019CA  6700 0040               1101      BEQ     IS_ASL
000019CE                          1102      
000019CE  6000 020A               1103      BRA INVALID_OP
000019D2                          1104  A_SIZE    
000019D2  6000 0142               1105      BRA     GET_SHFT_SIZE 
000019D6                          1106  
000019D6                          1107  A_MEM
000019D6  4EB9 00001B0A           1108      JSR     RGHT_LFT
000019DC                          1109      
000019DC  143C 0001               1110      MOVE.B  #1,D2 * SET D2 TO 1 TO KNOW IS MEM
000019E0                          1111      
000019E0  4286                    1112      CLR.L   D6
000019E2  1C3C 0002               1113      MOVE.B  #02,D6
000019E6  B83C 0000               1114      CMP.B   #%0,D4
000019EA  6700 000A               1115      BEQ     IS_ASR
000019EE  B83C 0001               1116      CMP.B   #%1,D4
000019F2  6700 0018               1117      BEQ     IS_ASL    
000019F6                          1118  
000019F6                          1119  
000019F6                          1120      
000019F6                          1121      
000019F6                          1122  IS_ASR
000019F6  43F9 00002118           1123      LEA     PRNT_ASR,A1
000019FC  4EB9 00001E66           1124      JSR     PRINT_BUFF
00001A02  BC3C 0001               1125      CMP.B   #01,D6
00001A06  67CA                    1126      BEQ     A_SIZE
00001A08                          1127  
00001A08  6000 016A               1128      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001A0C                          1129  
00001A0C                          1130  
00001A0C                          1131  IS_ASL
00001A0C  43F9 00002114           1132      LEA     PRNT_ASL,A1
00001A12  4EB9 00001E66           1133      JSR     PRINT_BUFF
00001A18  BC3C 0001               1134      CMP.B   #01,D6
00001A1C  67B4                    1135      BEQ     A_SIZE
00001A1E                          1136  
00001A1E  6000 0154               1137      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001A22                          1138  
00001A22                          1139  
00001A22                          1140      
00001A22                          1141  L_REG
00001A22  4EB9 00001B0A           1142      JSR     RGHT_LFT
00001A28                          1143      
00001A28  143C 0000               1144      MOVE.B  #0,D2 * SET D2 TO 0 TO KNOW IS REG
00001A2C                          1145      
00001A2C  4286                    1146      CLR.L   D6
00001A2E  1C3C 0001               1147      MOVE.B  #01,D6
00001A32  B83C 0000               1148      CMP.B   #%0,D4
00001A36  6700 0032               1149      BEQ     IS_LSR
00001A3A  B83C 0001               1150      CMP.B   #%1,D4
00001A3E  6700 0040               1151      BEQ     IS_LSL
00001A42                          1152      
00001A42  6000 0196               1153      BRA INVALID_OP
00001A46                          1154  L_SIZE    
00001A46  6000 00CE               1155      BRA     GET_SHFT_SIZE 
00001A4A                          1156  
00001A4A                          1157  L_MEM
00001A4A  4EB9 00001B0A           1158      JSR     RGHT_LFT
00001A50                          1159      
00001A50  143C 0001               1160      MOVE.B  #1,D2 * SET D2 TO 1 TO KNOW IS MEM
00001A54                          1161      
00001A54  4286                    1162      CLR.L   D6
00001A56  1C3C 0002               1163      MOVE.B  #02,D6
00001A5A  B83C 0000               1164      CMP.B   #%0,D4
00001A5E  6700 000A               1165      BEQ     IS_LSR
00001A62  B83C 0001               1166      CMP.B   #%1,D4
00001A66  6700 0018               1167      BEQ     IS_LSL    
00001A6A                          1168  
00001A6A                          1169      
00001A6A                          1170  IS_LSR
00001A6A  43F9 00002120           1171      LEA     PRNT_LSR,A1
00001A70  4EB9 00001E66           1172      JSR     PRINT_BUFF
00001A76  BC3C 0001               1173      CMP.B   #01,D6
00001A7A  67CA                    1174      BEQ     L_SIZE
00001A7C                          1175      
00001A7C  6000 00F6               1176      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001A80                          1177      
00001A80                          1178  
00001A80                          1179  IS_LSL
00001A80  43F9 0000211C           1180      LEA     PRNT_LSL,A1
00001A86  4EB9 00001E66           1181      JSR     PRINT_BUFF
00001A8C  BC3C 0001               1182      CMP.B   #01,D6
00001A90  67B4                    1183      BEQ     L_SIZE 
00001A92                          1184      
00001A92  6000 00E0               1185      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001A96                          1186      
00001A96                          1187  
00001A96                          1188      
00001A96                          1189      
00001A96                          1190  R_REG
00001A96  4EB9 00001B0A           1191      JSR     RGHT_LFT
00001A9C                          1192      
00001A9C  143C 0000               1193      MOVE.B  #0,D2 * SET D2 TO 0 TO KNOW IS REG
00001AA0                          1194      
00001AA0  4286                    1195      CLR.L   D6
00001AA2  1C3C 0001               1196      MOVE.B  #01,D6
00001AA6  B83C 0000               1197      CMP.B   #%0,D4
00001AAA  6700 0032               1198      BEQ     IS_ROR
00001AAE  B83C 0001               1199      CMP.B   #%1,D4
00001AB2  6700 0040               1200      BEQ     IS_ROL
00001AB6                          1201      
00001AB6  6000 0122               1202      BRA INVALID_OP
00001ABA                          1203  R_SIZE    
00001ABA  6000 005A               1204      BRA     GET_SHFT_SIZE 
00001ABE                          1205  
00001ABE                          1206  R_MEM
00001ABE  4EB9 00001B0A           1207      JSR     RGHT_LFT
00001AC4                          1208      
00001AC4  143C 0001               1209      MOVE.B  #1,D2 * SET D2 TO 1 TO KNOW IS MEM
00001AC8                          1210      
00001AC8  4286                    1211      CLR.L   D6
00001ACA  1C3C 0002               1212      MOVE.B  #02,D6
00001ACE  B83C 0000               1213      CMP.B   #%0,D4
00001AD2  6700 000A               1214      BEQ     IS_ROR
00001AD6  B83C 0001               1215      CMP.B   #%1,D4
00001ADA  6700 0018               1216      BEQ     IS_ROL    
00001ADE                          1217  
00001ADE                          1218      
00001ADE                          1219      
00001ADE                          1220  IS_ROR
00001ADE  43F9 00002128           1221      LEA     PRNT_ROR,A1
00001AE4  4EB9 00001E66           1222      JSR     PRINT_BUFF
00001AEA  BC3C 0001               1223      CMP.B   #01,D6
00001AEE  67CA                    1224      BEQ     R_SIZE  
00001AF0                          1225  
00001AF0  6000 0082               1226      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001AF4                          1227    
00001AF4                          1228  
00001AF4                          1229  IS_ROL
00001AF4  43F9 00002124           1230      LEA     PRNT_ROL,A1
00001AFA  4EB9 00001E66           1231      JSR     PRINT_BUFF
00001B00  BC3C 0001               1232      CMP.B   #01,D6
00001B04  67B4                    1233      BEQ     R_SIZE 
00001B06                          1234  
00001B06  6000 006C               1235      BRA     DO_SHIFT_EA * FOR MEM ONES WITH NO SIZE ATTRIBUTE.
00001B0A                          1236     
00001B0A                          1237  
00001B0A                          1238      
00001B0A                          1239      
00001B0A                          1240  
00001B0A                          1241  *GET_IR
00001B0A                          1242  *    MOVE.L  D3,D4
00001B0A                          1243  *    MOVE.B  #10,D6
00001B0A                          1244  *    LSL.W   D6,D4
00001B0A                          1245  *    MOVE.B  #15,D6
00001B0A                          1246  *    LSR.W   D6,D4
00001B0A                          1247  *    
00001B0A                          1248  *    MOVE.W  D4,D1
00001B0A                          1249  *    MOVE.B  #3,D0
00001B0A                          1250  *    TRAP    #15
00001B0A                          1251  *    SIMHALT    
00001B0A                          1252  
00001B0A                          1253  RGHT_LFT    *0 = RIGHT 1 = LEFT
00001B0A                          1254  *Determine if right/left shift
00001B0A  2803                    1255      MOVE.L  D3,D4
00001B0C  1C3C 000F               1256      MOVE.B  #15,D6
00001B10  EF4C                    1257      LSL.W   #7,D4
00001B12  EC6C                    1258      LSR.W   D6,D4
00001B14  4E75                    1259      RTS
00001B16                          1260      
00001B16                          1261  GET_SHFT_SIZE
00001B16  2803                    1262      MOVE.L  D3,D4
00001B18  E14C                    1263      LSL.W   #8,D4
00001B1A  1C3C 000E               1264      MOVE.B  #14,D6
00001B1E  EC6C                    1265      LSR.W   D6,D4
00001B20                          1266      
00001B20  B83C 0000               1267      CMP.B   #%00,D4    *B
00001B24  6700 0012               1268      BEQ     PRINT_B_SHIFT
00001B28  B83C 0001               1269      CMP.B   #%01,D4    *W
00001B2C  6700 001E               1270      BEQ     PRINT_W_SHIFT
00001B30  B83C 0002               1271      CMP.B   #%10,D4    *L
00001B34  6700 002A               1272      BEQ     PRINT_L_SHIFT
00001B38                          1273      
00001B38                          1274  
00001B38                          1275      
00001B38                          1276  PRINT_B_SHIFT
00001B38  1A3C 0001               1277      MOVE.B  #$1,D5 * For EA subroutine's size handling
00001B3C  43F9 000020B4           1278      LEA     PRNT_B,A1
00001B42  4EB9 00001E66           1279      JSR     PRINT_BUFF
00001B48  6000 002A               1280      BRA     DO_SHIFT_EA
00001B4C                          1281  PRINT_W_SHIFT
00001B4C  1A3C 0002               1282      MOVE.B  #$2,D5 * For EA subroutine's size handling
00001B50  43F9 000020B8           1283      LEA     PRNT_W,A1
00001B56  4EB9 00001E66           1284      JSR     PRINT_BUFF
00001B5C  6000 0016               1285      BRA     DO_SHIFT_EA
00001B60                          1286  PRINT_L_SHIFT
00001B60  1A3C 0003               1287      MOVE.B  #$3,D5 * For EA subroutine's size handling
00001B64  43F9 000020BC           1288      LEA     PRNT_L,A1
00001B6A  4EB9 00001E66           1289      JSR     PRINT_BUFF
00001B70  6000 0002               1290      BRA     DO_SHIFT_EA
00001B74                          1291  
00001B74                          1292  DO_SHIFT_EA
00001B74                          1293      
00001B74                          1294      
00001B74                          1295      *Proceed to EA Subroutine (ALL SHIFT OPS END UP HERE; USE TO GENERALIZE THE EA HANDLING FOR ALL)
00001B74                          1296      * Check D2 for status on MEM/REG for these.
00001B74  B43C 0000               1297      CMP.B   #0,D2
00001B78  6700 000C               1298      BEQ     REG_EA
00001B7C                          1299  
00001B7C  4EB9 00001CC2           1300      JSR     EA_SRC * MEM mode, so just need to print single EA field.
00001B82  6000 001E               1301      BRA     SHIFT_EA_DONE
00001B86                          1302  
00001B86                          1303  REG_EA
00001B86  4EB9 00001BE0           1304      JSR     REGSHIFTFORMAT_EA
00001B8C                          1305      
00001B8C  3803                    1306      MOVE.W  D3,D4
00001B8E  C87C 0007               1307      AND.W   #%0000000000000111,D4
00001B92  1C04                    1308      MOVE.B  D4,D6
00001B94                          1309      
00001B94  48E7 FF00               1310      MOVEM.L D0-D7,-(SP) * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001B98  4EB9 00001D06           1311      JSR     EA_SUB
00001B9E  4CDF 00FF               1312      MOVEM.L (SP)+,D0-D7 * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001BA2                          1313  
00001BA2                          1314  SHIFT_EA_DONE
00001BA2  4E75                    1315      RTS * GO TO IO; SHIFT INSTR DONE.    
00001BA4                          1316   
00001BA4                          1317  PRINT_B
00001BA4  1A3C 0001               1318      MOVE.B  #$1,D5 * For EA subroutine's size handling
00001BA8  43F9 000020B4           1319      LEA     PRNT_B,A1
00001BAE  4EB9 00001E66           1320      JSR     PRINT_BUFF
00001BB4  4E75                    1321      RTS
00001BB6                          1322  PRINT_W
00001BB6  1A3C 0002               1323      MOVE.B  #$2,D5 * For EA subroutine's size handling
00001BBA  43F9 000020B8           1324      LEA     PRNT_W,A1
00001BC0  4EB9 00001E66           1325      JSR     PRINT_BUFF
00001BC6  4E75                    1326      RTS
00001BC8                          1327  PRINT_L
00001BC8  1A3C 0003               1328      MOVE.B  #$3,D5 * For EA subroutine's size handling
00001BCC  43F9 000020BC           1329      LEA     PRNT_L,A1
00001BD2  4EB9 00001E66           1330      JSR     PRINT_BUFF
00001BD8  4E75                    1331      RTS
00001BDA                          1332  INVALID_OP
00001BDA                          1333      * LEA     INVALID_MSG,A1
00001BDA                          1334      * JSR       PRINT_BUFF
00001BDA  1E3C 0001               1335      MOVE.B  #1,D7
00001BDE  4E75                    1336      RTS
00001BE0                          1337  *-----------HANDLE BIT SHIFTING EA SOURCE -------------------------
00001BE0                          1338  REGSHIFTFORMAT_EA
00001BE0  3803                    1339      MOVE.W  D3,D4 * Refresh D4 with our opcode word to analyze
00001BE2                          1340       
00001BE2  C87C 0E00               1341      AND.W   #%0000111000000000,D4 * Isolate the register number
00001BE6  E64C                    1342      LSR.W   #3,D4   * Shift reg/count to far right
00001BE8  EC4C                    1343      LSR.W   #6,D4
00001BEA  1C04                    1344      MOVE.B  D4,D6   * D6 now contains either our register number or amount to shift by
00001BEC                          1345      
00001BEC  3803                    1346      MOVE.W  D3,D4
00001BEE  0804 0005               1347      BTST    #5,D4 * Test bit 5 to tell if specified as a register or immediate value (Doesn't modify D4)
00001BF2  6700 0012               1348      BEQ     S_IMM   * Bit was 0, need to do immediate value process.
00001BF6                          1349      * If here, do data register contains count process (D6 already prepared)
00001BF6                          1350      
00001BF6  48E7 FF00               1351      MOVEM.L D0-D7,-(SP) * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001BFA                          1352      
00001BFA  4EB9 00001D06           1353      JSR     EA_SUB * Print the source operand
00001C00                          1354      
00001C00  4CDF 00FF               1355      MOVEM.L (SP)+,D0-D7 * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001C04                          1356  
00001C04                          1357      
00001C04  4E75                    1358      RTS * Go back to process the destination
00001C06                          1359      
00001C06                          1360  S_IMM
00001C06  43F9 0000213C           1361      LEA     PRNT_Q,A1 * To print hash for immediate data.
00001C0C  4EB9 00001E66           1362      JSR     PRINT_BUFF
00001C12                          1363      
00001C12  BC3C 0000               1364      CMP.B   #0,D6 * Test to see if D6 is equal to zero.
00001C16  6700 000C               1365      BEQ     S_EIGHT * Convert value to 8.
00001C1A                          1366      
00001C1A  1206                    1367      MOVE.B  D6,D1 * Print the value.
00001C1C  4EB9 00001E72           1368      JSR     PRINT_HEXBUFF
00001C22                          1369      
00001C22  4E75                    1370      RTS
00001C24                          1371  
00001C24                          1372  S_EIGHT
00001C24  1C3C 0008               1373      MOVE.B  #8,D6
00001C28                          1374      
00001C28  1206                    1375      MOVE.B  D6,D1 * Print the value.
00001C2A  4EB9 00001E72           1376      JSR     PRINT_HEXBUFF
00001C30                          1377  
00001C30  4E75                    1378      RTS
00001C32                          1379      
00001C32                          1380  *------------------------------------------------------------
00001C32                          1381  *-----------HANDLE ADDA FORMAT EA ---------------------------
00001C32                          1382  ADDAFORMAT_EA
00001C32                          1383      
00001C32  4EB9 00001CC2           1384      JSR     EA_SRC * Handle source EA
00001C38                          1385      
00001C38  43F9 00002038           1386      LEA     COMMA,A1
00001C3E  4EB9 00001E66           1387      JSR     PRINT_BUFF
00001C44                          1388      
00001C44  3803                    1389      MOVE.W  D3,D4
00001C46  C87C 0E00               1390      AND.W   #%0000111000000000,D4 * Isolate Register #
00001C4A  E64C                    1391      LSR.W   #3,D4
00001C4C  EC4C                    1392      LSR.W   #6,D4
00001C4E  883C 0008               1393      OR.B    #%00001000,D4 * set as address reg
00001C52  1C04                    1394      MOVE.B  D4,D6   * Prime D6 register
00001C54                          1395      
00001C54                          1396      * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001C54  48E7 FF00               1397      MOVEM.L D0-D7,-(SP) * Move register contents to stack
00001C58                          1398      
00001C58  4EB9 00001D06           1399      JSR     EA_SUB * Handle the destination EA (last 6 bits of D6)
00001C5E                          1400      
00001C5E                          1401      * MOVEM RETURN
00001C5E  4CDF 00FF               1402      MOVEM.L (SP)+,D0-D7 * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001C62                          1403      
00001C62                          1404  
00001C62                          1405  
00001C62  4E75                    1406      RTS
00001C64                          1407  *------------------------------------------------------------
00001C64                          1408  *-----------HANDLE ADD FORMAT DATA DESTINATION EA -----------
00001C64                          1409  ADDFORMAT_DATA_DEST_EA
00001C64  4EB9 00001CC2           1410      JSR     EA_SRC * Handle source EA
00001C6A                          1411      
00001C6A                          1412      
00001C6A                          1413      
00001C6A  3803                    1414      MOVE.W  D3,D4
00001C6C  C87C 0E00               1415      AND.W   #%0000111000000000,D4 * Isolate Register #
00001C70  E64C                    1416      LSR.W   #3,D4
00001C72  EC4C                    1417      LSR.W   #6,D4
00001C74  1C04                    1418      MOVE.B  D4,D6   * Prime D6 register
00001C76                          1419      
00001C76                          1420      * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001C76  48E7 FF00               1421      MOVEM.L D0-D7,-(SP) * Move register contents to stack
00001C7A                          1422  
00001C7A  43F9 00002038           1423      LEA     COMMA,A1
00001C80  4EB9 00001E66           1424      JSR     PRINT_BUFF
00001C86                          1425      
00001C86  4EB9 00001D06           1426      JSR     EA_SUB * Handle the destination EA (last 6 bits of D6)
00001C8C                          1427      
00001C8C                          1428      * MOVEM RETURN
00001C8C  4CDF 00FF               1429      MOVEM.L (SP)+,D0-D7 * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001C90                          1430  
00001C90                          1431      
00001C90  4E75                    1432      RTS
00001C92                          1433  *------------------------------------------------------------
00001C92                          1434  *-----------HANDLE ADD FORMAT EA DESTINATION EA -------------
00001C92                          1435  ADDFORMAT_EA_DEST_EA
00001C92                          1436      
00001C92  3803                    1437      MOVE.W  D3,D4
00001C94  C87C 0E00               1438      AND.W   #%0000111000000000,D4 * Isolate Register #
00001C98  E64C                    1439      LSR.W   #3,D4
00001C9A  EC4C                    1440      LSR.W   #6,D4
00001C9C  1C04                    1441      MOVE.B  D4,D6   * Prime D6 register
00001C9E                          1442      
00001C9E                          1443      * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001C9E                          1444  
00001C9E  48E7 FF00               1445      MOVEM.L D0-D7,-(SP) * Move register contents to stack
00001CA2                          1446      
00001CA2  4EB9 00001D06           1447      JSR     EA_SUB * Handle the source EA
00001CA8                          1448      
00001CA8                          1449      * MOVEM RETURN
00001CA8  4CDF 00FF               1450      MOVEM.L (SP)+,D0-D7 * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001CAC                          1451  
00001CAC                          1452      
00001CAC  3803                    1453      MOVE.W  D3,D4  * Refresh opcode
00001CAE                          1454  
00001CAE  43F9 00002038           1455      LEA     COMMA,A1
00001CB4  4EB9 00001E66           1456      JSR     PRINT_BUFF
00001CBA                          1457      
00001CBA  4EB9 00001CC2           1458      JSR     EA_SRC * Handle destination EA
00001CC0                          1459  
00001CC0  4E75                    1460      RTS
00001CC2                          1461  
00001CC2                          1462  *------------------------------------------------------------
00001CC2                          1463  *-------------------HANDLE SOURCE EA (last 6 bits)-----------
00001CC2                          1464  EA_SRC
00001CC2                          1465      * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001CC2  48E7 FF00               1466      MOVEM.L D0-D7,-(SP) * Move register contents to stack
00001CC6                          1467  
00001CC6  3803                    1468      MOVE.W  D3,D4
00001CC8  C87C 003F               1469      AND.W   #%0000000000111111,D4
00001CCC  1C04                    1470      MOVE.B  D4,D6
00001CCE                          1471      
00001CCE  4EB9 00001D06           1472      JSR EA_SUB ** Print source EA bits from bits in D6
00001CD4                          1473      
00001CD4                          1474      * MOVEM RETURN
00001CD4  4CDF 00FF               1475      MOVEM.L (SP)+,D0-D7 * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001CD8  4E75                    1476      RTS
00001CDA                          1477  *------------------------------------------------------------
00001CDA                          1478  *------HANDLE DESTINATION EA(6 bits before last 6 bits)------
00001CDA                          1479  EA_DEST
00001CDA                          1480      * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001CDA  48E7 FF00               1481      MOVEM.L D0-D7,-(SP) * Move register contents to stack
00001CDE                          1482  
00001CDE  3803                    1483      MOVE.W  D3,D4
00001CE0  C87C 0FC0               1484      AND.W #%0000111111000000,D4
00001CE4  EC4C                    1485      LSR.W #6,D4
00001CE6  1004                    1486      MOVE.B  D4,D0
00001CE8  C07C 0007               1487      AND.W #%0000000000000111,D0 * D0 contains mode bits
00001CEC  1200                    1488      MOVE.B  D0,D1   *MODE (D1) (Curr state: 000 001 in D1)
00001CEE  2004                    1489      MOVE.L  D4,D0 * D0 contains 6 bit field out of order
00001CF0  E648                    1490      LSR.W   #3,D0 * D0 contains reg bits (Curr State: 000 010 in D0)
00001CF2  1400                    1491      MOVE.B  D0,D2   *REG (D2) (Curr State: 000 010 in D2 and D0)
00001CF4                          1492      
00001CF4  E709                    1493      LSL.B   #3,D1 * Shift mode into position
00001CF6                          1494      
00001CF6  8401                    1495      OR.B    D1,D2   
00001CF8  1C02                    1496      MOVE.B  D2,D6 *
00001CFA                          1497      
00001CFA  4EB9 00001D06           1498      JSR     EA_SUB
00001D00                          1499      
00001D00                          1500      * MOVEM RETURN
00001D00  4CDF 00FF               1501      MOVEM.L (SP)+,D0-D7 * POTENTIAL BUG: SHOULDN'T SAVE D7 ADDRESS *****************************************
00001D04                          1502      
00001D04  4E75                    1503      RTS
00001D06                          1504  *------------------------------------------------------------ 
00001D06                          1505      
00001D06                          1506  *-------------------EA Subroutine----------------------------
00001D06                          1507  
00001D06                          1508  EA_SUB
00001D06                          1509  
00001D06                          1510              * 1: Process the 6-bit field into D3 (Register bits) and D4 (Mode bits)
00001D06  1806                    1511              MOVE.B  D6,D4 * Prime D4 with the full 6-bit field
00001D08  C83C 0007               1512              AND.B   #%00000111,D4 * Clear everything but the register bits (BITS READY)
00001D0C                          1513              
00001D0C  1606                    1514              MOVE.B  D6,D3 * Prime D3 with the full 6-bit field
00001D0E  E60B                    1515              LSR.B   #3,D3 * Shift out the register bits to isolate the mode bits (BITS READY)
00001D10                          1516                  
00001D10                          1517              * 2: Process the MODE BITS:
00001D10  B63C 0000               1518  MODE_P      CMP.B   #%00000000,D3   * TEST FOR 000: Dn
00001D14  6700 002E               1519              BEQ     DN_MODE
00001D18                          1520              
00001D18  B63C 0001               1521              CMP.B   #%00000001,D3   * TEST FOR 001: An
00001D1C  6700 0036               1522              BEQ     AN_MODE
00001D20                          1523              
00001D20  B63C 0002               1524              CMP.B   #%00000010,D3   * TEST FOR 010: (An)
00001D24  6700 003E               1525              BEQ     ANIND_MODE
00001D28                          1526              
00001D28  B63C 0003               1527              CMP.B   #%00000011,D3   * TEST FOR 011: (An)+
00001D2C  6700 0046               1528              BEQ     ANINC_MODE
00001D30                          1529              
00001D30  B63C 0004               1530              CMP.B   #%00000100,D3   * TEST FOR 100: -(An)
00001D34  6700 004E               1531              BEQ     ANDEC_MODE
00001D38                          1532              
00001D38  B63C 0007               1533              CMP.B   #%00000111,D3   * TEST FOR 111: #<data>, (xxx).W, or (xxx).L (or unsupported!)
00001D3C  6700 0056               1534              BEQ     ABSDAT_MODE
00001D40                          1535              
00001D40  6000 011E               1536              BRA     UNSUPP_MODE     * If we made it here, assume an unsupported mode!
00001D44                          1537              
00001D44                          1538              
00001D44  43F9 0000212C           1539  DN_MODE     LEA     PRNT_D,A1
00001D4A  4EB9 00001E66           1540              JSR     PRINT_BUFF
00001D50                          1541              
00001D50  6000 005E               1542              BRA     REG_P
00001D54                          1543              
00001D54  43F9 0000212E           1544  AN_MODE     LEA     PRNT_A,A1
00001D5A  4EB9 00001E66           1545              JSR     PRINT_BUFF
00001D60                          1546              
00001D60  6000 004E               1547              BRA     REG_P
00001D64                          1548  
00001D64  43F9 00002130           1549  ANIND_MODE  LEA     PRNT_AI,A1
00001D6A  4EB9 00001E66           1550              JSR     PRINT_BUFF
00001D70                          1551              
00001D70  6000 003E               1552              BRA     REG_P
00001D74                          1553  
00001D74  43F9 00002130           1554  ANINC_MODE  LEA     PRNT_AI,A1  * As of now this is the same as indirect, postdec added after register
00001D7A  4EB9 00001E66           1555              JSR     PRINT_BUFF
00001D80                          1556              
00001D80  6000 002E               1557              BRA     REG_P
00001D84                          1558  
00001D84  43F9 00002138           1559  ANDEC_MODE  LEA     PRNT_DC,A1
00001D8A  4EB9 00001E66           1560              JSR     PRINT_BUFF
00001D90                          1561              
00001D90  6000 001E               1562              BRA     REG_P
00001D94                          1563              
00001D94                          1564  
00001D94                          1565  * DATA / ABSOLUTE ADDRESSING HANDLING (Mode was 111 in D3; need to chk. D4 reg bits for behavior)
00001D94  B83C 0004               1566  ABSDAT_MODE CMP.B   #%00000100,D4 * TEST FOR 100: #<data>
00001D98  6700 005A               1567              BEQ     DATA_MODE
00001D9C                          1568              
00001D9C  B83C 0000               1569              CMP.B   #%00000000,D4 * TEST FOR 000: (xxx).W
00001DA0  6700 0076               1570              BEQ     ABSW_MODE
00001DA4                          1571              
00001DA4  B83C 0001               1572              CMP.B   #%00000001,D4 * TEST FOR 001: (xxx).L
00001DA8  6700 007E               1573              BEQ     ABSL_MODE
00001DAC                          1574              
00001DAC  6000 00B2               1575              BRA     UNSUPP_MODE   * If the register is some other val, unsupported!
00001DB0                          1576              
00001DB0                          1577              * 3: Process the REGISTER BITS: (IN D4)
00001DB0  2204                    1578  REG_P       MOVE.L  D4,D1   * Load the register value into D1 for display.
00001DB2  4EB9 00001E72           1579              JSR     PRINT_HEXBUFF
00001DB8                          1580              
00001DB8  B63C 0002               1581              CMP.B   #%00000010,D3
00001DBC  6700 0016               1582              BEQ     END_ONE
00001DC0                          1583              
00001DC0  B63C 0004               1584              CMP.B   #%00000100,D3
00001DC4  6700 000E               1585              BEQ     END_ONE
00001DC8                          1586              
00001DC8  B63C 0003               1587              CMP.B   #%00000011,D3
00001DCC  6700 0016               1588              BEQ     END_TWO
00001DD0                          1589              
00001DD0  6000 0092               1590              BRA     FINISH  * Additional char after register unnecessary, branch to finish
00001DD4                          1591              
00001DD4  43F9 00002133           1592  END_ONE     LEA     PRNT_CL,A1
00001DDA  4EB9 00001E66           1593              JSR     PRINT_BUFF
00001DE0                          1594              
00001DE0  6000 0082               1595              BRA     FINISH
00001DE4                          1596  
00001DE4  43F9 00002135           1597  END_TWO     LEA     PRNT_IN,A1
00001DEA  4EB9 00001E66           1598              JSR     PRINT_BUFF
00001DF0                          1599              
00001DF0  6000 0072               1600              BRA     FINISH
00001DF4                          1601  
00001DF4                          1602  * #<DATA>; RELIES ON D5 CONTAINING SIZE VALUE OF THE INSTRUCTION! (So we know how much data to grab, then what to increment A5 by! (word or long))
00001DF4                          1603      * If this contains 0, this will not work in this state. D5 MUST have val 1-3 at this point!
00001DF4  43F9 0000213E           1604  DATA_MODE   LEA     PRNT_DT,A1 * Print '#$'
00001DFA  4EB9 00001E66           1605              JSR     PRINT_BUFF
00001E00                          1606              
00001E00  BA3C 0001               1607              CMP.B   #1,D5
00001E04  6700 0032               1608              BEQ     BYTE
00001E08                          1609              
00001E08  BA3C 0002               1610              CMP.B   #2,D5
00001E0C  6700 003A               1611              BEQ     WORD
00001E10                          1612              
00001E10  BA3C 0003               1613              CMP.B   #3,D5
00001E14  6700 003E               1614              BEQ     LONG
00001E18                          1615              
00001E18                          1616  * (xxx).W;            
00001E18  43F9 00002141           1617  ABSW_MODE   LEA     PRNT_HX,A1 * Print '$'
00001E1E  4EB9 00001E66           1618              JSR     PRINT_BUFF
00001E24                          1619              
00001E24  6000 0022               1620              BRA     WORD
00001E28                          1621              
00001E28                          1622  * (xxx).L; Assembler uses this when it sign extends automatically over (xxx).W           
00001E28  43F9 00002141           1623  ABSL_MODE   LEA     PRNT_HX,A1 * Print '$'
00001E2E  4EB9 00001E66           1624              JSR     PRINT_BUFF
00001E34                          1625              
00001E34  6000 001E               1626              BRA     LONG
00001E38                          1627  
00001E38                          1628  * Expects format created by assembled machine code, NOT how it is just pushed to memory by (An)!            
00001E38  321B                    1629  BYTE        MOVE.W  (A3)+,D1    * Move word of data from curr opcode word pointer to D1, then increment pointer a word.
00001E3A                          1630              *=MOVE.B  #16,D2      * Prepare to display a hex value
00001E3A  C27C 00FF               1631              AND.W   #%0000000011111111,D1   * Discard potential word part from byte
00001E3E                          1632              *=MOVE.B  #15,D0      * Set the task to 15
00001E3E                          1633              *=TRAP    #15         * Print the value.
00001E3E  4EB9 00001E72           1634              JSR     PRINT_HEXBUFF
00001E44                          1635  
00001E44  6000 001E               1636              BRA     FINISH
00001E48                          1637  
00001E48  321B                    1638  WORD        MOVE.W  (A3)+,D1    * Move word of data from curr opcode word pointer to D1, then increment pointer a word.
00001E4A                          1639              *=MOVE.B  #16,D2      * Prepare to display a hex value
00001E4A                          1640              *=MOVE.B  #15,D0      * Set the task to 15
00001E4A                          1641              *=TRAP    #15         * Print the value.
00001E4A  4EB9 00001E72           1642              JSR     PRINT_HEXBUFF
00001E50                          1643  
00001E50  6000 0012               1644              BRA     FINISH
00001E54                          1645  
00001E54  221B                    1646  LONG        MOVE.L  (A3)+,D1    * Move longword of data from curr opcode word pointer to D1, then increment pointer a longword.
00001E56                          1647              *=MOVE.B  #16,D2      * Prepare to display a hex value
00001E56                          1648              *=MOVE.B  #15,D0      * Set the task to 15
00001E56                          1649              *=TRAP    #15         * Print the value.
00001E56  4EB9 00001E72           1650              JSR     PRINT_HEXBUFF
00001E5C                          1651  
00001E5C  6000 0006               1652              BRA     FINISH
00001E60                          1653        
00001E60                          1654              * 4: UNSUPPORTED BRANCH:
00001E60                          1655  UNSUPP_MODE *LEA     PRNT_ER,A1
00001E60                          1656              *JSR        PRINT_BUFF * Continue directly onto finishing up from here
00001E60                          1657              
00001E60  1E3C 0001               1658              MOVE.B  #1,D7   * Set Good/Bad flag to Bad state (1 bit)
00001E64                          1659              
00001E64                          1660              * 5: Finishing up:
00001E64                          1661  FINISH      
00001E64                          1662              * Return values stored in stack prior to moving into here into registers.
00001E64                          1663                  * (Will put here on integration...)
00001E64                          1664              * A5 currently points to the next needed opcode to process, which could be the following:
00001E64                          1665                  * Next opcode word instruction
00001E64                          1666                  * More data corresponding to the next <ea> field for current instruction
00001E64                          1667              
00001E64  4E75                    1668              RTS
00001E66                          1669  
00001E66                          1670  * POTENTIAL PRINT LOGIC ERROR: HANDLES LSL/R-LIKE INSTRUCTIONS WITH DIRECT NUMBER INCORRECTLY (prints first byte of mem location addr, then the number desired) *********************************
00001E66                          1671  
00001E66                          1672  PRINT_BUFF
00001E66  0C11 0000               1673              CMP.B #0,(A1)
00001E6A  6700 0056               1674              BEQ RET_PBUFF           * Done copying? Jump back
00001E6E                          1675  
00001E6E  1CD9                    1676              MOVE.B (A1)+,(A6)+      * Copy character to print buffer
00001E70  60F4                    1677              BRA PRINT_BUFF          * Repeat
00001E72                          1678  
00001E72                          1679  PRINT_HEXBUFF
00001E72  143C 0000               1680              MOVE.B #0,D2
00001E76  B2BC 00000000           1681              CMP.L #0,D1
00001E7C  6600 0006               1682              BNE PRINT_HEXBUFF_LP
00001E80  1CFC 0030               1683              MOVE.B #$30,(A6)+       * Value was 0, print 0
00001E84                          1684  
00001E84                          1685  PRINT_HEXBUFF_LP
00001E84  B2BC 00000000           1686              CMP.L #0,D1
00001E8A  6700 0036               1687              BEQ RET_PBUFF
00001E8E                          1688              
00001E8E  E999                    1689              ROL.L #4,D1             *Rotate 1 nibble to the left
00001E90  2001                    1690              MOVE.L D1,D0    
00001E92  C0BC 0000000F           1691              AND.L #$F,D0            *Isolate the hex value
00001E98                          1692              
00001E98  0600 0037               1693              ADD.B #$37,D0
00001E9C  B03C 0040               1694              CMP.B #$40,D0
00001EA0  6E00 0004               1695              BGT   PRINT_HEXBUFF_SKIP
00001EA4  5F00                    1696              SUB.B #$7,D0
00001EA6                          1697      
00001EA6                          1698  PRINT_HEXBUFF_SKIP
00001EA6  B03C 0030               1699              CMP.B #$30,D0           * Going to print a zero
00001EAA  6600 000A               1700              BNE PRINT_HEXBUFF_YESZERO
00001EAE                          1701  
00001EAE  B43C 0000               1702              CMP.B #0,D2             * Actually, don't
00001EB2  6700 0008               1703              BEQ PRINT_HEXBUFF_NOZERO
00001EB6                          1704  
00001EB6                          1705  PRINT_HEXBUFF_YESZERO
00001EB6  1CC0                    1706              MOVE.B D0,(A6)+
00001EB8  143C 0001               1707              MOVE.B #1,D2
00001EBC                          1708  
00001EBC                          1709  PRINT_HEXBUFF_NOZERO
00001EBC  C23C 00F0               1710              AND.B #$F0,D1   Clear last nibble
00001EC0  60C2                    1711              BRA PRINT_HEXBUFF_LP
00001EC2                          1712  
00001EC2  4E75                    1713  RET_PBUFF   RTS
00001EC4                          1714  * Put variables and constants here
00001EC4= 50 6C 65 61 73 65 ...   1715  PROMPT_START DC.B 'Please enter starting address in hexadecimal: ' ,0
00001EF3= 50 6C 65 61 73 65 ...   1716  PROMPT_END DC.B 'Please enter ending address in hexadecimal (must be after starting): ' ,0
00001F3A= 4572 726F 723A 2...     1717  INVALID_HEX DC.W 'Error: Address must be in valid hexadecimal' ,CR,LF,0
00001F6C= 44 6F 6E 65 20 72 ...   1718  DONE_MESSAGE DC.B 'Done reading instructions' ,CR,LF,0
00001F88= 506C 6561 7365 2...     1719  ENTER_MESSAGE DC.W 'Please press enter to display new screen ' ,CR,LF,0
00001FB8= 4572 726F 723A 2...     1720  INVALID_ORDER DC.W 'Error: ending address must come after starting',CR,LF,0
00001FEC= 4469 7361 7373 6...     1721  ASK_REPEAT DC.W 'Disassemble another mem range? (Yes = 0, No = 1) ' ,0 
00002020                          1722  INVALID_MEM_ADDR DS.W 1
00002022= 4441 5441 2000 0...     1723  DATA DC.W 'DATA ',CR,LF,0
0000202E                          1724  INVALID_HEX_VAL DS.W 1 
00002030= 20 0D 0A 00             1725  LINE_BREAK DC.B ' ',CR,LF,0
00002034= 2000 0000               1726  SPACE DC.W ' ',0
00002038= 2C00 0000               1727  COMMA DC.W ',',0
0000203C                          1728  INSTRUCTION_ADDR DS.B 1
0000203E= 494E 5354 5255 4...     1729  INSTRUCTION_ADDR_MESSAGE DC.W 'INSTRUCTION ADDR',0
00002050                          1730  OPCODE DS.W 1
00002052= 4F50 434F 4445 0000     1731  OPCODE_MESSAGE DC.W 'OPCODE',0
0000205A                          1732  OPERAND1 DS.W 1
0000205C= 4F50 4552 414E 4...     1733  OPERAND1_MESSAGE DC.W 'OPERAND1',0
00002066                          1734  OPERAND2 DS.W 1
00002068= 4F50 4552 414E 4...     1735  OPERAND2_MESSAGE DC.W 'OPERAND2',0
00002072                          1736  
00002072                          1737  GOOD_BAD_FLAG DS.B 1
00002073                          1738  
00002074                          1739  START_ADDR DS.W 4
0000207C                          1740  END_ADDR DS.W 4
00002084                          1741  
00002084= 45 6E 74 65 72 20 ...   1742  INPUT_MSG   DC.B    'Enter machine code: ',0
0000209A                          1743  INPUT       DS.L    1
0000209E= 49 6E 76 61 6C 69 ...   1744  INVALID_MSG DC.B    'Invalid Instruction',CR,LF,0
000020B4                          1745  
000020B4= 2E 42 20 00             1746  PRNT_B      DC.B    '.B ',0
000020B8= 2E 57 20 00             1747  PRNT_W      DC.B    '.W ',0
000020BC= 2E 4C 20 00             1748  PRNT_L      DC.B    '.L ',0
000020C0                          1749  
000020C0= 4E 4F 50 00             1750  PRNT_NOP    DC.B    'NOP',0
000020C4= 52 54 53 00             1751  PRNT_RTS    DC.B    'RTS',0
000020C8= 4D 4F 56 45 00          1752  PRNT_MOVE   DC.B    'MOVE',0
000020CD= 4D 4F 56 45 41 00       1753  PRNT_MOVEA  DC.B    'MOVEA',0
000020D3= 4D 4F 56 45 4D 00       1754  PRNT_MOVEM  DC.B    'MOVEM',0
000020D9= 4D 4F 56 45 51 00       1755  PRNT_MOVEQ  DC.B    'MOVEQ',0
000020DF= 4A 53 52 00             1756  PRNT_JSR    DC.B    'JSR',0
000020E3= 42 47 54 00             1757  PRNT_BGT    DC.B    'BGT',0
000020E7= 42 4C 45 00             1758  PRNT_BLE    DC.B    'BLE',0
000020EB= 42 45 51 00             1759  PRNT_BEQ    DC.B    'BEQ',0
000020EF= 42 52 41 00             1760  PRNT_BRA    DC.B    'BRA',0
000020F3= 4E 4F 54 00             1761  PRNT_NOT    DC.B    'NOT',0
000020F7= 4F 52 00                1762  PRNT_OR     DC.B    'OR',0
000020FA= 4C 45 41 00             1763  PRNT_LEA    DC.B    'LEA',0
000020FE= 41 44 44 51 00          1764  PRNT_ADDQ   DC.B    'ADDQ',0
00002103= 41 44 44 00             1765  PRNT_ADD    DC.B    'ADD',0
00002107= 41 44 44 41 00          1766  PRNT_ADDA   DC.B    'ADDA',0
0000210C= 41 4E 44 00             1767  PRNT_AND    DC.B    'AND',0
00002110= 53 55 42 00             1768  PRNT_SUB    DC.B    'SUB',0
00002114= 41 53 4C 00             1769  PRNT_ASL    DC.B    'ASL',0
00002118= 41 53 52 00             1770  PRNT_ASR    DC.B    'ASR',0
0000211C= 4C 53 4C 00             1771  PRNT_LSL    DC.B    'LSL',0
00002120= 4C 53 52 00             1772  PRNT_LSR    DC.B    'LSR',0
00002124= 52 4F 4C 00             1773  PRNT_ROL    DC.B    'ROL',0
00002128= 52 4F 52 00             1774  PRNT_ROR    DC.B    'ROR',0
0000212C                          1775  
0000212C= 44 00                   1776  PRNT_D  DC.B    'D',0
0000212E= 41 00                   1777  PRNT_A  DC.B    'A',0
00002130= 28 41 00                1778  PRNT_AI DC.B    '(A',0
00002133= 29 00                   1779  PRNT_CL DC.B    ')',0
00002135= 29 2B 00                1780  PRNT_IN DC.B    ')+',0
00002138= 2D 28 41 00             1781  PRNT_DC DC.B    '-(A',0
0000213C                          1782  
0000213C= 23 00                   1783  PRNT_Q  DC.B    '#',0
0000213E= 23 24 00                1784  PRNT_DT DC.B    '#$',0
00002141= 24 00                   1785  PRNT_HX DC.B    '$',0
00002143                          1786  
00002143= 45 52 52 4F 52 3A ...   1787  PRNT_ER DC.B    'ERROR: Unsupported EA Mode',0
0000215E                          1788  
0000215E                          1789  *D3 = original instruction
0000215E                          1790  *D4 = copy of instruction
0000215E                          1791  *D6 = num of bits to shift
0000215E                          1792  
0000215E                          1793      
0000215E                          1794  
0000215E                          1795  DONE
0000215E  43F8 1F6C               1796      LEA DONE_MESSAGE, A1
00002162  4EB8 1E66               1797      JSR     PRINT_BUFF
00002166                          1798      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSDAT_MODE         1D94
ABSL_MODE           1E28
ABSW_MODE           1E18
ADDAFORMAT_EA       1C32
ADDA_L              1940
ADDA_W              192E
ADDFORMAT_DATA_DEST_EA  1C64
ADDFORMAT_EA_DEST_EA  1C92
ADDQ_B              1524
ADDQ_DATA           1542
ADDQ_L              1538
ADDQ_W              152E
ADD_B               18F8
ADD_B_D             18C2
ADD_L               191C
ADD_L_D             18E6
ADD_W               190A
ADD_W_D             18D4
ANDEC_MODE          1D84
AND_B               182E
AND_B_D             1804
AND_L               184A
AND_L_D             1820
AND_W               183C
AND_W_D             1812
ANINC_MODE          1D74
ANIND_MODE          1D64
AN_MODE             1D54
ASK_REPEAT          1FEC
A_MEM               19D6
A_REG               19AE
A_SIZE              19D2
BYTE                1E38
CLEAR_REG           11F4
COMMA               2038
CONV_NUM            107C
CONV_STRING         1038
CR                  D
DATA                2022
DATA_MODE           1DF4
DISP                15E6
DISPLAY_INVALID_HEX  105E
DISPLAY_INVALID_INSTRUCTION  1154
DISPLAY_INVALID_ORDER  10C0
DISP_16             1614
DISP_32             162A
DN_MODE             1D44
DONE                215E
DONE_END_CONV       10AE
DONE_MESSAGE        1F6C
DONE_START_CONV     109C
DO_SHIFT_EA         1B74
EA_DEST             1CDA
EA_SRC              1CC2
EA_SUB              1D06
END_ADDR            207C
END_ONE             1DD4
END_TWO             1DE4
ENTER_MESSAGE       1F88
FIND_OP             1258
FINISH              1E64
GET_SHFT_SIZE       1B16
GOOD_BAD_FLAG       2072
INPUT               209A
INPUT_MSG           2084
INSTRUCTION_ADDR    203C
INSTRUCTION_ADDR_MESSAGE  203E
INVALID_HEX         1F3A
INVALID_HEX_VAL     202E
INVALID_MEM_ADDR    2020
INVALID_MSG         209E
INVALID_OP          1BDA
INVALID_ORDER       1FB8
IS_ADD              18A6
IS_ADDA             18B4
IS_ASL              1A0C
IS_ASR              19F6
IS_BEQ              15D2
IS_BGT              15AA
IS_BLE              15BE
IS_BRA              1596
IS_LEA              13D6
IS_LSL              1A80
IS_LSR              1A6A
IS_MOVE             1292
IS_MOVEA            12A2
IS_MOVEM            1498
IS_NOT              1418
IS_OR               165E
IS_ROL              1AF4
IS_ROR              1ADE
IS_SUB              16FC
LF                  A
LINE_BREAK          2030
LONG                1E54
L_MEM               1A4A
L_REG               1A22
L_SIZE              1A46
MODE_P              1D10
MOVEM_L             14DE
MOVEM_W             14D8
MOVE_B              12D4
MOVE_L              1314
MOVE_SIZE           12AE
MOVE_W              12F4
NEEDS_NEW_SCREEN    1180
NOP                 1228
NOT_B               1456
NOT_EA              1470
NOT_L               146A
NOT_W               1460
OPCODE              2050
OPCODE_MESSAGE      2052
OPERAND1            205A
OPERAND1_MESSAGE    205C
OPERAND2            2066
OPERAND2_MESSAGE    2068
OP_00               1280
OP_01               1334
OP_0100             13B0
OP_01001            1478
OP_0101             14E4
OP_0110             1568
OP_0111             135C
OP_10               1640
OP_11               1796
OP_1100             17BA
OP_1101             1858
OP_1110             1952
OR_B                16D2
OR_B_D              16A8
OR_L                16EE
OR_L_D              16C4
OR_W                16E0
OR_W_D              16B6
PBUFF               900
PRINT_B             1BA4
PRINT_BUFF          1E66
PRINT_B_SHIFT       1B38
PRINT_HEXBUFF       1E72
PRINT_HEXBUFF_LP    1E84
PRINT_HEXBUFF_NOZERO  1EBC
PRINT_HEXBUFF_SKIP  1EA6
PRINT_HEXBUFF_YESZERO  1EB6
PRINT_INSTRUCTIONS  10E4
PRINT_L             1BC8
PRINT_L_SHIFT       1B60
PRINT_W             1BB6
PRINT_W_SHIFT       1B4C
PRNT_A              212E
PRNT_ADD            2103
PRNT_ADDA           2107
PRNT_ADDQ           20FE
PRNT_AI             2130
PRNT_AND            210C
PRNT_ASL            2114
PRNT_ASR            2118
PRNT_B              20B4
PRNT_BEQ            20EB
PRNT_BGT            20E3
PRNT_BLE            20E7
PRNT_BRA            20EF
PRNT_CL             2133
PRNT_D              212C
PRNT_DC             2138
PRNT_DT             213E
PRNT_ER             2143
PRNT_HX             2141
PRNT_IN             2135
PRNT_JSR            20DF
PRNT_L              20BC
PRNT_LEA            20FA
PRNT_LSL            211C
PRNT_LSR            2120
PRNT_MOVE           20C8
PRNT_MOVEA          20CD
PRNT_MOVEM          20D3
PRNT_MOVEQ          20D9
PRNT_NOP            20C0
PRNT_NOT            20F3
PRNT_OR             20F7
PRNT_Q              213C
PRNT_ROL            2124
PRNT_ROR            2128
PRNT_RTS            20C4
PRNT_SUB            2110
PRNT_W              20B8
PROMPT_END          1EF3
PROMPT_FOR_END      101C
PROMPT_FOR_START    1000
PROMPT_START        1EC4
PROMPT_USER_FOR_ENTER  1198
REACHED_END         11C6
REG                 1984
REGSHIFTFORMAT_EA   1BE0
REG_EA              1B86
REG_P               1DB0
RET_PBUFF           1EC2
RGHT_LFT            1B0A
RTS                 1240
R_MEM               1ABE
R_REG               1A96
R_SIZE              1ABA
SHIFT_EA_DONE       1BA2
SPACE               2034
START               1000
START_ADDR          2074
START_OP            1228
SUB_B               176C
SUB_B_D             1742
SUB_L               1788
SUB_L_D             175E
SUB_W               177A
SUB_W_D             1750
S_EIGHT             1C24
S_IMM               1C06
UNSUPP_MODE         1E60
WORD                1E48
